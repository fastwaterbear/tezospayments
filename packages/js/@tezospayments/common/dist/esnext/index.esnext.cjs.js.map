{"version":3,"file":"index.esnext.cjs.js","sources":["../../src/utils/base64.ts","../../src/utils/converters.ts","../../src/utils/guards.ts","../../src/utils/memoize.ts","../../src/utils/optimization.ts","../../src/utils/shallowEqual.ts","../../src/utils/text.ts","../../src/utils/index.ts","../../src/helpers/serviceLinkHelper.ts","../../src/models/payment/paymentBase.ts","../../src/helpers/paymentValidator/paymentValidatorBase.ts","../../src/models/blockchain/network.ts","../../src/models/blockchain/token.ts","../../src/models/blockchain/tezosInfo.ts","../../src/models/blockchain/keyType.ts","../../src/native/index.ts","../../src/helpers/paymentValidator/validationMethods.ts","../../src/helpers/paymentValidator/paymentValidator.ts","../../src/helpers/paymentValidator/donationValidator.ts","../../src/models/core/stateModel.ts","../../src/models/core/eventEmitter.ts","../../src/serialization/base64/objectSerializationValidator.ts","../../src/serialization/base64/base64Serializer.ts","../../src/serialization/base64/base64Deserializer.ts","../../src/serialization/payment/serializedPaymentFieldTypes.ts","../../src/serialization/payment/paymentSerializer.ts","../../src/serialization/payment/paymentDeserializer.ts","../../src/serialization/donation/serializedDonationFieldTypes.ts","../../src/serialization/donation/donationSerializer.ts","../../src/serialization/donation/donationDeserializer.ts","../../src/models/payment/payment.ts","../../src/models/payment/donation.ts","../../src/models/payment/paymentUrlType.ts","../../src/models/routing/parameterizedRoute.ts","../../src/models/service/serviceOperationType.ts","../../src/models/service/service.ts","../../src/models/operation/operationType.ts","../../src/models/operation/operationDirection.ts","../../src/models/operation/operationStatus.ts","../../src/models/operation/donationOperation.ts","../../src/signing/signPayloadEncoders/donationSignPayloadEncoder.ts","../../src/signing/signPayloadEncoders/clientSignPayload.ts","../../src/signing/signPayloadEncoders/michelsonTypes.ts","../../src/signing/signPayloadEncoders/paymentSignPayloadEncoder.ts","../../src/signing/keyPairGenerators/ed25519KeyGenerator.ts","../../src/signing/keyPairGenerators/ellipticCurveKeyGenerator.ts"],"sourcesContent":["import { Buffer } from 'buffer';\n\ntype ValidBase64Format = 'base64' | 'base64url';\n\n// Node.js < 15\nconst isBase64UrlFormatSupported = Buffer.isEncoding('base64url');\n\nexport const decode = (base64String: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (!isBase64UrlFormatSupported) {\n    format = 'base64';\n    base64String = base64UrlPreprocessor.prepareValueForDecoding(base64String);\n  }\n\n  return Buffer.from(base64String, format).toString('utf8');\n};\n\nexport const encode = (value: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (isBase64UrlFormatSupported)\n    return Buffer.from(value, 'utf8').toString(format);\n\n  const encodedValue = Buffer.from(value, 'utf8').toString('base64');\n  return base64UrlPreprocessor.prepareEncodedValue(encodedValue);\n};\n\nconst base64UrlPreprocessor = {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  prepareEncodedValue: (base64value: string) => base64value\n    .split('=')[0]!\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_'),\n\n  prepareValueForDecoding: (base64value: string) => {\n    base64value = base64value\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n\n    switch (base64value.length % 4) {\n      case 0: return base64value;\n      case 2: return base64value + '==';\n      case 3: return base64value + '=';\n      default:\n        throw new Error('Invalid base64url value');\n    }\n  }\n};\n","import { Buffer } from 'buffer';\n\nimport BigNumber from 'bignumber.js';\n\nexport const stringToUint8Array = (hex: string): Uint8Array => {\n  const integers = hex.match(/[\\da-f]{2}/gi)?.map(val => parseInt(val, 16));\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return new Uint8Array(integers!);\n};\n\nexport const stringToBytes = (value: string): string => Buffer.from(value, 'utf8').toString('hex');\nexport const bytesToString = (value: string): string => Buffer.from(stringToUint8Array(value)).toString('utf8');\n\nexport const objectToBytes = (value: Record<string, unknown>): string => stringToBytes(JSON.stringify(value));\nexport const bytesToObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: string): T | null => {\n  try {\n    return JSON.parse(bytesToString(value));\n  }\n  catch {\n    return null;\n  }\n};\n\nexport const tokensAmountToNat = (tokensAmount: BigNumber | number, decimals: number): BigNumber => {\n  return new BigNumber(tokensAmount).multipliedBy(10 ** decimals).integerValue();\n};\n\nexport const numberToTokensAmount = (value: BigNumber | number, decimals: number): BigNumber => {\n  return new BigNumber(value).integerValue().div(10 ** decimals);\n};\n\nexport const tezToMutez = (tez: BigNumber | number): BigNumber => tokensAmountToNat(tez, 6);\nexport const mutezToTez = (mutez: BigNumber | number): BigNumber => numberToTokensAmount(mutez, 6);\n","import isPlainObjectLodashFunction from 'lodash.isplainobject';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isArray = (arg: any): arg is any[] => {\n  return Array.isArray(arg);\n};\n\nexport const isReadonlyArray = (arg: unknown): arg is readonly unknown[] => {\n  return Array.isArray(arg);\n};\n\nexport const isPlainObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: unknown): value is T => {\n  return isPlainObjectLodashFunction(value);\n};\n","const defaultEqualityCheck = <T>(a: T, b: T) => a === b;\n\nconst areArgumentsShallowlyEqual = <T extends IArguments | null>(equalityCheck: (a: T, b: T) => boolean, prev: T, next: T) => {\n    if (prev === null || next === null || prev.length !== next.length) {\n        return false;\n    }\n\n    // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n    const length = prev.length;\n    for (let i = 0; i < length; i++) {\n        if (!equalityCheck(prev[i], next[i])) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/* eslint-disable prefer-rest-params  */\n/* eslint-disable prefer-spread */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const memoize = <TF extends (...args: any) => any>(func: TF, equalityCheck = defaultEqualityCheck): TF => {\n    let lastArgs: IArguments | null = null;\n    let lastResult: unknown = null;\n\n    return (function () {\n        if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n            // apply arguments instead of spreading for performance.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            lastResult = func.apply(null, arguments as any);\n        }\n\n        lastArgs = arguments;\n        return lastResult;\n    } as TF);\n};\n/* eslint-enable prefer-spread */\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/no-explicit-any */\n","import BigNumber from 'bignumber.js';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst emptyArray: any[] = [];\nconst emptyObject = {};\nconst emptyMap = new Map();\nconst emptySet: Set<any> = new Set();\nconst zeroBigNumber = new BigNumber(0);\n\nexport default {\n    emptyArray,\n    emptyMap,\n    emptySet,\n    emptyObject,\n    zeroBigNumber\n};\n","const is = (x: unknown, y: unknown) => {\n    return (x === y)\n        ? x !== 0 || y !== 0 || (1 / x) === (1 / y)\n        // eslint-disable-next-line no-self-compare\n        : x !== x && y !== y;\n};\n\nexport default function shallowEqual(objA: unknown, objB: unknown) {\n    if (is(objA, objB))\n        return true;\n\n    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null)\n        return false;\n\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    if (keysA.length !== keysB.length)\n        return false;\n\n    for (let i = 0; i < keysA.length; i++) {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]!)\n            || !is((objA as any)[keysA[i]!], (objB as any)[keysA[i]!])\n        )\n            return false;\n\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n    }\n\n    return true;\n}\n","export const capitalize = (value: string): string => value && (value[0]?.toLocaleUpperCase() + value.slice(1));\n\nexport const getAvatarText = (value: string, maxLength = 2) => {\n  if (!value || !maxLength)\n    return '';\n\n  let result = '';\n\n  for (let i = 0, j = 0, isWord = false; i < value.length; i++) {\n    if (!isWord && value[i] !== ' ') {\n      isWord = true;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      result += value[i]!;\n\n      if (++j === maxLength)\n        return result;\n    }\n    else if (isWord && value[i] === ' ') {\n      isWord = false;\n    }\n  }\n\n  return result;\n};\n\nconst stringPad = (string: string, isStart: boolean, maxLength: number, fillString = ' ') => {\n  if (String.prototype.padStart !== undefined)\n    return string.padStart(maxLength, fillString);\n\n  const stringLength = string.length;\n  // eslint-disable-next-line eqeqeq\n  if (maxLength <= stringLength || fillString == '')\n    return string;\n\n  const fillLength = maxLength - stringLength;\n  let filler = fillString.repeat(Math.ceil(fillLength / fillString.length));\n\n  if (filler.length > fillLength)\n    filler = filler.slice(0, fillLength);\n\n  return isStart ? filler + string : string + filler;\n};\n\nexport const padStart = (string: string, maxLength: number, fillString = ' ') => String.prototype.padStart !== undefined\n  ? string.padStart(maxLength, fillString)\n  : stringPad(string, true, maxLength, fillString);\n\nexport const padEnd = (string: string, maxLength: number, fillString = ' ') => String.prototype.padEnd !== undefined\n  ? string.padEnd(maxLength, fillString)\n  : stringPad(string, false, maxLength, fillString);\n","import combineClassNames from 'clsx';\n\nimport * as base64 from './base64';\nimport * as converters from './converters';\nimport * as guards from './guards';\nimport { memoize } from './memoize';\nimport optimization from './optimization';\nimport shallowEqual from './shallowEqual';\nimport * as text from './text';\n\nconst wait = (ms: number) => new Promise<void>(resolve => setTimeout(resolve, ms));\n\nexport {\n  wait,\n  combineClassNames,\n  memoize,\n  shallowEqual,\n  base64,\n  optimization,\n  guards,\n  text,\n  converters\n};\n","import { memoize } from '../utils';\n\nexport enum IconId {\n  Common = 0,\n  Email = 1,\n  Telegram = 2,\n  Facebook = 3,\n  Twitter = 4,\n  Instagram = 5,\n  GitHub = 6,\n  Reddit = 7\n}\n\ninterface LinkInfo {\n  readonly rawLink: string;\n  readonly formattedLink: string;\n  readonly displayLink: string;\n  readonly icon: IconId;\n}\n\nconst getInvalidLinkInfo = (link: string): LinkInfo => ({\n  rawLink: link,\n  formattedLink: '#',\n  displayLink: 'Invalid Link',\n  icon: IconId.Common\n});\n\ntype LinkInfoProvider = (link: string) => LinkInfo | false;\n\nconst prepareFormattedLink = memoize((link: string) => link.trim());\nconst prepareDisplayLink = memoize((link: string) => link.trim().replace(/\\/$/, ''));\n\nconst socialMediaLinkInfoProvider = (link: string, baseUrl: string, icon: IconId): LinkInfo | false => {\n  if (!link.startsWith(baseUrl))\n    return false;\n\n  const formattedLink = prepareFormattedLink(link);\n  if (formattedLink === baseUrl)\n    return false;\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link).replace(baseUrl, ''),\n    icon\n  };\n};\n\nconst telegramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://t.me/', IconId.Telegram);\nconst facebookLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://facebook.com/', IconId.Facebook);\nconst twitterLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://twitter.com/', IconId.Twitter);\nconst instagramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://instagram.com/', IconId.Instagram);\nconst gitHubLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://github.com/', IconId.GitHub);\nconst redditLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://www.reddit.com/', IconId.Reddit);\n\n// This regex should not use for email validation\nconst emailCheckingRegEx = /^[^\\s/@]+@[^\\s@/]+$/;\nconst emailLinkInfoProvider: LinkInfoProvider = link => {\n  const preparedFormattedLink = prepareFormattedLink(link);\n\n  return emailCheckingRegEx.test(preparedFormattedLink) && {\n    rawLink: link,\n    formattedLink: `mailto:${preparedFormattedLink}`,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Email\n  };\n};\n\nconst javascriptLinkInfoProvider: LinkInfoProvider = link => link.startsWith('javascript') ? getInvalidLinkInfo(link) : false;\n\n// https://datatracker.ietf.org/doc/html/rfc3986#section-3.1\nconst urlSchemeRegEx = /^([a-z][a-z0-9+\\-.]*):/;\nconst commonLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return urlSchemeRegEx.test(formattedLink) && {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nconst editLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nexport class ServiceLinkHelper {\n  // Order is important\n  static readonly linkInfoProviders: readonly LinkInfoProvider[] = [\n    // Disallowed\n    javascriptLinkInfoProvider,\n    // Allowed\n    telegramLinkInfoProvider,\n    facebookLinkInfoProvider,\n    twitterLinkInfoProvider,\n    instagramLinkInfoProvider,\n    gitHubLinkInfoProvider,\n    emailLinkInfoProvider,\n    redditLinkInfoProvider,\n    commonLinkInfoProvider\n  ];\n\n  getLinkInfo(link: string, isEditMode = false): LinkInfo | null {\n    for (const provider of ServiceLinkHelper.linkInfoProviders) {\n      const linkInfo = provider(link);\n\n      if (linkInfo)\n        return this.linkInfoIsValid(linkInfo) ? linkInfo : null;\n    }\n\n    if (isEditMode)\n      return editLinkInfoProvider(link) as LinkInfo;\n\n    return null;\n  }\n\n  linkInfoIsValid(linkInfo: LinkInfo) {\n    return linkInfo.formattedLink !== '#';\n  }\n}\n","export enum PaymentType {\n  Payment = 1,\n  Donation = 2\n}\n\nexport interface PaymentBase {\n  readonly type: PaymentType;\n  readonly targetAddress: string;\n}\n","import { PaymentBase } from '../../models/payment/paymentBase';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { guards } from '../../utils';\nimport { PaymentValidationMethod } from './paymentValidationMethod';\n\nexport abstract class PaymentValidatorBase<TPayment extends PaymentBase> {\n  protected readonly abstract validationMethods: ReadonlyArray<PaymentValidationMethod<TPayment>>;\n  protected readonly abstract invalidPaymentObjectError: string;\n\n  validate(payment: TPayment, bail = false): FailedValidationResults {\n    if (!guards.isPlainObject(payment))\n      return [this.invalidPaymentObjectError];\n\n    let failedValidationResults: FailedValidationResults;\n    for (const validationMethod of this.validationMethods) {\n      const currentFailedValidationResults = validationMethod(payment);\n      if (currentFailedValidationResults) {\n        if (!bail)\n          return currentFailedValidationResults;\n\n        failedValidationResults = (failedValidationResults || []).concat(currentFailedValidationResults);\n      }\n    }\n\n    return failedValidationResults;\n  }\n}\n","const networksInternal = {\n  mainnet: {\n    id: 'NetXdQprcVkpaWU',\n    name: 'mainnet',\n  },\n  hangzhounet: {\n    id: 'NetXZSsxBpMQeAT',\n    name: 'hangzhounet'\n  }\n} as const;\n\ninterface NetworkInternal {\n  readonly id: string;\n  readonly name: string;\n}\n\ntype Networks = {\n  readonly [P in keyof typeof networksInternal]: (typeof networksInternal)[P] extends NetworkInternal & {\n    readonly name: P;\n  }\n  ? (typeof networksInternal)[P]\n  : never\n};\n\nexport type Network = Networks[keyof Networks];\nexport interface CustomNetwork {\n  readonly id?: string;\n  readonly name: string;\n}\n\nexport const networks: Networks = networksInternal;\nexport const networksCollection = Object.values(networksInternal);\n\nexport const networkIdRegExp = /^[a-zA-Z]\\w*$/;\nexport const networkNameRegExp = networkIdRegExp;\n","import { Network, networks, networksCollection } from './network';\n\ninterface TokenBase {\n  readonly network: Network;\n  readonly contractAddress: string;\n  readonly metadata?: TokenMetadata;\n}\n\nexport interface TokenFA12 extends TokenBase {\n  readonly type: 'fa1.2';\n}\n\nexport interface TokenFA2 extends TokenBase {\n  readonly type: 'fa2';\n  readonly id: number;\n}\n\nexport type Token = TokenFA12 | TokenFA2;\n\nexport type TokenMetadata = {\n  readonly decimals: number;\n  readonly symbol: string;\n  readonly name: string;\n  readonly thumbnailUri: string;\n};\n\nexport const tezosMeta: TokenMetadata = {\n  symbol: 'XTZ',\n  name: 'Tezos',\n  decimals: 6,\n  thumbnailUri: 'https://dashboard.tezospayments.com/tokens/tezos.png'\n};\n\nexport const unknownAssetMeta: TokenMetadata = {\n  name: 'Unknown',\n  symbol: 'Unknown',\n  decimals: 0,\n  thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png'\n};\n\nexport const tokenWhitelist: readonly Token[] = [\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa1.2',\n  //   contractAddress: 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV',\n  //   metadata: {\n  //     decimals: 18,\n  //     symbol: 'KUSD',\n  //     name: 'Kolibri',\n  //     thumbnailUri: 'https://kolibri-data.s3.amazonaws.com/logo.png',\n  //   },\n  // },\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa2',\n  //   contractAddress: 'KT1REEb5VxWRjcHm5GzDMwErMmNFftsE5Gpf',\n  //   fa2TokenId: 0,\n  //   metadata: {\n  //     decimals: 6,\n  //     symbol: 'USDS',\n  //     name: 'Stably USD',\n  //     thumbnailUri: 'https://quipuswap.com/tokens/stably.png',\n  //   },\n  // },\n  {\n    network: networks.hangzhounet,\n    type: 'fa1.2',\n    contractAddress: 'KT19sYK89XKYTeGHekWK9wL5iDHVF4YYf26t',\n    metadata: {\n      decimals: 6,\n      symbol: 'FA12',\n      name: 'Test FA 1.2',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  },\n  {\n    network: networks.hangzhounet,\n    type: 'fa2',\n    contractAddress: 'KT1EKo1Eihucz9N4cQyaDKeYRoMzTEoiZRAT',\n    id: 0,\n    metadata: {\n      decimals: 6,\n      symbol: 'FA20',\n      name: 'Test FA 2.0',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  },\n];\n\nexport const tokenWhitelistMap: ReadonlyMap<Network, ReadonlyMap<Token['contractAddress'], Token>> = new Map(\n  networksCollection.map(nc => [nc, new Map(tokenWhitelist.filter(t => t.network === nc).map(t => [t.contractAddress, t]))])\n);\n","const contractAddressPrefixes = ['KT'] as const;\nconst implicitAddressPrefixes = ['tz1', 'tz2', 'tz3'] as const;\nconst addressPrefixes = [...contractAddressPrefixes, ...implicitAddressPrefixes] as const;\n\nexport const tezosInfo = {\n  addressLength: 36,\n  contractAddressPrefixes,\n  implicitAddressPrefixes,\n  addressPrefixes,\n} as const;\n","export enum KeyType {\n  Ed25519 = 'Ed25519',\n  Secp256k1 = 'Secp256k1',\n  P256 = 'P256'\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { URL as NodeURL } from 'url';\n\nexport type URL = NodeURL;\nexport const URL = NodeURL || (globalThis as any).URL;\n","import BigNumber from 'bignumber.js';\n\nimport { tezosInfo } from '../../models/blockchain';\nimport { DonationAsset, Payment, PaymentAsset } from '../../models/payment';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { URL } from '../../native';\nimport { guards } from '../../utils';\n\ntype Errors<FieldNames extends string> = {\n  readonly [P in FieldNames]: string;\n};\n\nexport const validateTargetAddress = (\n  targetAddress: string,\n  errors: Errors<'invalidTargetAddress' | 'targetAddressHasInvalidLength' | 'targetAddressIsNotNetworkAddress'>\n): FailedValidationResults => {\n  if (typeof targetAddress !== 'string')\n    return [errors.invalidTargetAddress];\n\n  if (targetAddress.length !== tezosInfo.addressLength)\n    return [errors.targetAddressHasInvalidLength];\n\n  if (!tezosInfo.addressPrefixes.some(prefix => targetAddress.startsWith(prefix)))\n    return [errors.targetAddressIsNotNetworkAddress];\n};\n\nexport const validateId = (\n  id: string,\n  errors: Errors<'invalidId' | 'emptyId'>\n): FailedValidationResults => {\n  if (typeof id !== 'string')\n    return [errors.invalidId];\n\n  if (id === '')\n    return [errors.emptyId];\n};\n\nexport const validateAmount = (\n  amount: BigNumber,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  if (!BigNumber.isBigNumber(amount) || amount.isNaN() || !amount.isFinite())\n    return [errors.invalidAmount];\n\n  if (amount.isZero() || amount.isNegative())\n    return [errors.amountIsNonPositive];\n};\n\nexport const validateDesiredAmount = (\n  desiredAmount: BigNumber | undefined,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  return desiredAmount === undefined ? undefined : validateAmount(desiredAmount, errors);\n};\n\nexport const validatePaymentAsset = (\n  asset: PaymentAsset | undefined,\n  errors: Errors<\n    | 'invalidAsset'\n    | 'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'\n    | 'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'\n    | 'invalidAssetDecimals' | 'assetDecimalsNumberIsNegative' | 'assetDecimalsNumberIsNotInteger'\n  >\n): FailedValidationResults => {\n  if (asset === undefined)\n    return;\n\n  if (!guards.isPlainObject(asset))\n    return [errors.invalidAsset];\n\n  return validateAsset(asset, errors) || validateAssetDecimals(asset.decimals, errors);\n};\n\nexport const validateDonationAsset = (\n  asset: DonationAsset | undefined,\n  errors: Errors<\n    | 'invalidAsset'\n    | 'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'\n    | 'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'\n  >\n): FailedValidationResults => {\n  if (asset === undefined)\n    return;\n\n  if (!guards.isPlainObject(asset))\n    return [errors.invalidAsset];\n\n  return validateAsset(asset, errors);\n};\n\nexport const validateCreatedDate = (\n  date: Date,\n  errors: Errors<'invalidCreatedDate'>\n): FailedValidationResults => {\n  if (!(date instanceof Date) || isNaN(date.getTime()))\n    return [errors.invalidCreatedDate];\n};\n\nexport const validateUrl = (\n  url: URL | undefined,\n  errors: Errors<'invalidUrl' | 'invalidProtocol'>\n): FailedValidationResults => {\n  if (url === undefined)\n    return;\n\n  if (!(url instanceof URL))\n    return [errors.invalidUrl];\n\n  if (url.protocol.indexOf('javascript') > -1)\n    return [errors.invalidProtocol];\n};\n\nexport const validateExpiredDate = (\n  expiredDate: Date | undefined,\n  createdDate: Date,\n  minimumPaymentLifetime: number,\n  errors: Errors<'invalidExpiredDate' | 'paymentLifetimeIsShort'>\n): FailedValidationResults => {\n  if (expiredDate === undefined)\n    return;\n\n  if (!(expiredDate instanceof Date) || isNaN(expiredDate.getTime()))\n    return [errors.invalidExpiredDate];\n\n  if (expiredDate.getTime() - createdDate.getTime() < minimumPaymentLifetime) {\n    return [errors.paymentLifetimeIsShort];\n  }\n};\n\nexport const validateData = (\n  data: Payment['data'],\n  errors: Errors<'invalidData'>\n): FailedValidationResults => {\n  if (data === undefined)\n    return;\n\n  if (!guards.isPlainObject(data))\n    return [errors.invalidData];\n};\n\nconst validateAsset = (\n  asset: PaymentAsset | DonationAsset,\n  errors: Errors<\n    | 'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'\n    | 'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'\n  >\n): FailedValidationResults => {\n  return validateAssetAddress(asset.address, errors) || validateAssetId(asset.id, errors);\n};\n\nconst validateAssetAddress = (\n  assetAddress: string,\n  errors: Errors<'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'>\n): FailedValidationResults => {\n  if (typeof assetAddress !== 'string')\n    return [errors.invalidAssetAddress];\n\n  if (assetAddress.length !== tezosInfo.addressLength)\n    return [errors.assetAddressHasInvalidLength];\n\n  if (!tezosInfo.contractAddressPrefixes.some(prefix => assetAddress.startsWith(prefix)))\n    return [errors.assetAddressIsNotContractAddress];\n};\n\nconst validateAssetId = (\n  assetId: number | null,\n  errors: Errors<'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'>\n): FailedValidationResults => {\n  if (assetId === null)\n    return;\n\n  if (typeof assetId !== 'number' || Number.isNaN(assetId) || !Number.isFinite(assetId))\n    return [errors.invalidAssetId];\n\n  if (assetId < 0)\n    return [errors.assetIdIsNegative];\n\n  if (!Number.isInteger(assetId))\n    return [errors.assetIdIsNotInteger];\n};\n\nconst validateAssetDecimals = (\n  assetDecimals: number,\n  errors: Errors<'invalidAssetDecimals' | 'assetDecimalsNumberIsNegative' | 'assetDecimalsNumberIsNotInteger'>\n): FailedValidationResults => {\n  if (typeof assetDecimals !== 'number' || Number.isNaN(assetDecimals) || !Number.isFinite(assetDecimals))\n    return [errors.invalidAssetDecimals];\n\n  if (assetDecimals < 0)\n    return [errors.assetDecimalsNumberIsNegative];\n\n  if (!Number.isInteger(assetDecimals))\n    return [errors.assetDecimalsNumberIsNotInteger];\n};\n","import type { Payment, UnsignedPayment } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport {\n  validateTargetAddress, validateId, validateAmount, validateData, validatePaymentAsset,\n  validateCreatedDate, validateExpiredDate, validateUrl\n} from './validationMethods';\n\nexport class PaymentValidator extends PaymentValidatorBase<Payment | UnsignedPayment> {\n  static readonly errors = {\n    invalidPaymentObject: 'Payment is undefined or not object',\n    invalidType: 'Payment type is invalid',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidId: 'Id is invalid',\n    emptyId: 'Id is empty',\n    invalidAmount: 'Amount is invalid',\n    amountIsNonPositive: 'Amount is less than or equal to zero',\n    invalidData: 'Payment data is invalid',\n    invalidAsset: 'Asset is invalid',\n    invalidAssetAddress: 'Asset address is invalid',\n    assetAddressIsNotContractAddress: 'Asset address isn\\'t a contract address',\n    assetAddressHasInvalidLength: 'Asset address has an invalid address',\n    invalidAssetId: 'Asset Id is invalid',\n    assetIdIsNegative: 'Asset Id is negative',\n    assetIdIsNotInteger: 'Asset Id isn\\'t an integer',\n    invalidAssetDecimals: 'Asset number of decimals is invalid',\n    assetDecimalsNumberIsNegative: 'Asset number of decimals is negative',\n    assetDecimalsNumberIsNotInteger: 'Asset number of decimals isn\\'t an integer',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol',\n    invalidCreatedDate: 'Created date is invalid',\n    invalidExpiredDate: 'Expired date is invalid',\n    paymentLifetimeIsShort: 'Payment lifetime is short'\n  } as const;\n  static readonly minimumPaymentLifetime = 600000; // 10 * 60 * 1000;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Payment | UnsignedPayment>> = [\n    payment => payment.type !== PaymentType.Payment ? [PaymentValidator.errors.invalidType] : undefined,\n    payment => validateTargetAddress(payment.targetAddress, PaymentValidator.errors),\n    payment => validateId(payment.id, PaymentValidator.errors),\n    payment => validateAmount(payment.amount, PaymentValidator.errors),\n    payment => validatePaymentAsset(payment.asset, PaymentValidator.errors),\n    payment => validateData(payment.data, PaymentValidator.errors),\n    payment => validateUrl(payment.successUrl, PaymentValidator.successUrlErrors),\n    payment => validateUrl(payment.cancelUrl, PaymentValidator.cancelUrlErrors),\n    payment => validateCreatedDate(payment.created, PaymentValidator.errors),\n    payment => validateExpiredDate(payment.expired, payment.created, PaymentValidator.minimumPaymentLifetime, PaymentValidator.errors),\n  ];\n\n  protected readonly invalidPaymentObjectError = PaymentValidator.errors.invalidPaymentObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidSuccessUrl,\n    invalidProtocol: PaymentValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidCancelUrl,\n    invalidProtocol: PaymentValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","import type { Donation, UnsignedDonation } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport { validateTargetAddress, validateDesiredAmount, validateDonationAsset, validateUrl, validateData } from './validationMethods';\n\nexport class DonationValidator extends PaymentValidatorBase<Donation | UnsignedDonation> {\n  static readonly errors = {\n    invalidDonationObject: 'Donation is undefined or not object',\n    invalidType: 'Donation type is invalid',\n    invalidData: 'Donation data is invalid',\n    invalidAmount: 'Desired amount is invalid',\n    amountIsNonPositive: 'Desired amount is less than or equal to zero',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidAsset: 'Desired asset is invalid',\n    invalidAssetAddress: 'Desired asset address is invalid',\n    assetAddressIsNotContractAddress: 'Desired asset address isn\\'t a contract address',\n    assetAddressHasInvalidLength: 'Desired asset address has an invalid address',\n    invalidAssetId: 'Asset Id is invalid',\n    assetIdIsNegative: 'Asset Id is negative',\n    assetIdIsNotInteger: 'Asset Id isn\\'t an integer',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol'\n  } as const;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Donation | UnsignedDonation>> = [\n    donation => donation.type !== PaymentType.Donation ? [DonationValidator.errors.invalidType] : undefined,\n    donation => validateData(donation.data, DonationValidator.errors),\n    donation => validateTargetAddress(donation.targetAddress, DonationValidator.errors),\n    donation => validateDesiredAmount(donation.desiredAmount, DonationValidator.errors),\n    donation => validateDonationAsset(donation.desiredAsset, DonationValidator.errors),\n    donation => validateUrl(donation.successUrl, DonationValidator.successUrlErrors),\n    donation => validateUrl(donation.cancelUrl, DonationValidator.cancelUrlErrors)\n  ];\n\n  protected readonly invalidPaymentObjectError = DonationValidator.errors.invalidDonationObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidSuccessUrl,\n    invalidProtocol: DonationValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidCancelUrl,\n    invalidProtocol: DonationValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","export abstract class StateModel {\n    protected constructor() {\n    // All derived classes should be static\n    }\n}\n","export interface PublicEventEmitter<T extends readonly unknown[]> {\n    addListener(listener: (...args: T) => void): this;\n    removeListener(listener: (...args: T) => void): this;\n    removeAllListeners(): this;\n}\n\nexport class EventEmitter<T extends readonly unknown[]> implements PublicEventEmitter<T> {\n    private listeners: Set<(...args: T) => void> = new Set();\n\n    addListener(listener: (...args: T) => void) {\n        this.listeners.add(listener);\n        return this;\n    }\n\n    removeListener(listener: (...args: T) => void) {\n        if (this.listeners.has(listener))\n            this.listeners.delete(listener);\n        return this;\n    }\n\n    removeAllListeners() {\n        this.listeners = new Set();\n        return this;\n    }\n\n    emit(...args: T) {\n        if (!this.listeners.size)\n            return;\n\n        if (this.listeners.size === 1) {\n            this.listeners.values().next().value(...args);\n        } else {\n            // We copy listeners to prevent an unbounded loop if there is the adding of a new event handler inside the handler; \n            [...this.listeners].forEach(listener => listener(...args));\n        }\n    }\n}\n","import { SerializedFieldType } from './serializedFieldType';\n\nexport class ObjectSerializationValidator<T extends Record<string | number, unknown>> {\n  private _minObjectFieldsCount: number | undefined;\n\n  constructor(\n    protected readonly objectFieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>\n  ) {\n  }\n\n  private get minObjectFieldsCount() {\n    if (!this._minObjectFieldsCount) {\n      let count = 0;\n      for (const info of this.objectFieldTypes) {\n        if (typeof info[1] === 'string' ? info[1] !== 'undefined' : info[1].every(type => type !== 'undefined'))\n          count++;\n      }\n\n      this._minObjectFieldsCount = count;\n    }\n\n    return this._minObjectFieldsCount;\n  }\n\n  private get maxObjectFieldsCount() {\n    return this.objectFieldTypes.size;\n  }\n\n  validate(value: T): value is T {\n    if (!value)\n      return false;\n\n    const fieldNames = Object.getOwnPropertyNames(value) as ReadonlyArray<keyof T>;\n\n    // Prevent the field checking if the deserializedValue has an invalid number of fields\n    if (fieldNames.length < this.minObjectFieldsCount || fieldNames.length > this.maxObjectFieldsCount)\n      return false;\n\n    for (const [fieldName, expectedFieldType] of this.objectFieldTypes) {\n      const fieldValue = value[fieldName];\n      const actualFieldType = fieldValue === null ? 'null' : typeof fieldValue;\n\n      if (Array.isArray(expectedFieldType)\n        ? !expectedFieldType.some(expectedType => actualFieldType === expectedType)\n        : actualFieldType !== expectedFieldType\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Serializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  serialize(value: T): string | null {\n    try {\n      if (!this.objectSerializationValidator.validate(value))\n        return null;\n\n      const jsonString = JSON.stringify(value);\n      return base64.encode(jsonString, 'base64url');\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Deserializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  deserialize(serializedValue: string): T | null {\n    try {\n      let value: T;\n\n      if (serializedValue) {\n        const serializedValueString = base64.decode(serializedValue, 'base64url');\n        value = JSON.parse(serializedValueString);\n      }\n      else\n        value = {} as T;\n\n      return this.objectSerializationValidator.validate(value)\n        ? value\n        : null;\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { SerializedPayment, SerializedPaymentAsset, SerializedPaymentSignature } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nconst _serializedPaymentAssetFieldTypes: ReadonlyMap<\n  keyof SerializedPaymentAsset, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPaymentAsset, SerializedFieldType | readonly SerializedFieldType[]>()\n  // address\n  .set('a', 'string')\n  // decimals\n  .set('d', 'number')\n  // id\n  .set('i', ['number', 'undefined', 'null']);\n\nconst _serializedPaymentSignatureFieldTypes: ReadonlyMap<\n  keyof SerializedPaymentSignature, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPaymentSignature, SerializedFieldType | readonly SerializedFieldType[]>()\n  // contract\n  .set('c', 'string')\n  // client\n  .set('cl', ['string', 'undefined', 'null'])\n  // signature.signingPublicKey\n  .set('k', 'string');\n\nexport const serializedPaymentFieldTypes: ReadonlyMap<\n  keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  // id\n  .set('i', 'string')\n  // amount\n  .set('a', 'string')\n  // target\n  .set('t', 'string')\n  // asset\n  .set('as', ['object', 'undefined', 'null'])\n  // .set('as', serializedPaymentAssetFieldTypes)\n  // data\n  .set('d', ['object', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null'])\n  // created\n  .set('c', 'number')\n  // expired\n  .set('e', ['number', 'undefined', 'null'])\n  // signature\n  .set('s', 'object');\n  // .set('s', serializedPaymentSignatureFieldTypes);\n","import type {\n  Payment, PaymentAsset, PaymentSignature,\n  SerializedPayment, SerializedPaymentAsset, SerializedPaymentSignature\n} from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentSerializer {\n  protected static readonly serializedPaymentBase64Serializer = new Base64Serializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  serialize(payment: Payment): string | null {\n    try {\n      const serializedPayment = this.mapPaymentToSerializedPayment(payment);\n      return PaymentSerializer.serializedPaymentBase64Serializer.serialize(serializedPayment);\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapPaymentToSerializedPayment(payment: Payment): SerializedPayment {\n    return {\n      i: payment.id,\n      a: payment.amount.toString(10),\n      t: payment.targetAddress,\n      as: payment.asset ? this.mapPaymentAssetToSerializedPaymentAsset(payment.asset) : undefined,\n      d: payment.data,\n      su: payment.successUrl?.toString(),\n      cu: payment.cancelUrl?.toString(),\n      c: payment.created.getTime(),\n      e: payment.expired?.getTime(),\n      s: this.mapPaymentSignatureToSerializedPaymentSignature(payment.signature)\n    };\n  }\n\n  protected mapPaymentAssetToSerializedPaymentAsset(paymentAsset: PaymentAsset): SerializedPaymentAsset {\n    return {\n      a: paymentAsset.address,\n      d: paymentAsset.decimals,\n      i: paymentAsset.id !== null ? paymentAsset.id : undefined\n    };\n  }\n\n  protected mapPaymentSignatureToSerializedPaymentSignature(paymentSignature: PaymentSignature): SerializedPaymentSignature {\n    return {\n      k: paymentSignature.signingPublicKey,\n      c: paymentSignature.contract,\n      cl: paymentSignature.client\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type {\n  Payment, PaymentAsset, PaymentSignature,\n  SerializedPayment, SerializedPaymentAsset, SerializedPaymentSignature\n} from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string): Payment | null {\n    try {\n      const serializedPayment = PaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: SerializedPayment): Payment {\n    return {\n      type: PaymentType.Payment,\n      id: serializedPayment.i,\n      amount: new BigNumber(serializedPayment.a),\n      targetAddress: serializedPayment.t,\n      asset: serializedPayment.as ? this.mapSerializedPaymentAssetToPaymentAsset(serializedPayment.as) : undefined,\n      data: serializedPayment.d,\n      successUrl: serializedPayment.su ? new URL(serializedPayment.su) : undefined,\n      cancelUrl: serializedPayment.cu ? new URL(serializedPayment.cu) : undefined,\n      created: new Date(serializedPayment.c),\n      expired: serializedPayment.e ? new Date(serializedPayment.e) : undefined,\n\n      signature: this.mapSerializedPaymentSignatureToPaymentSignature(serializedPayment.s)\n    };\n  }\n\n  protected mapSerializedPaymentAssetToPaymentAsset(serializedPaymentAsset: SerializedPaymentAsset): PaymentAsset {\n    return {\n      address: serializedPaymentAsset.a,\n      decimals: serializedPaymentAsset.d,\n      id: serializedPaymentAsset.i !== undefined ? serializedPaymentAsset.i : null\n    };\n  }\n\n  protected mapSerializedPaymentSignatureToPaymentSignature(serializedPaymentSignature: SerializedPaymentSignature): PaymentSignature {\n    return {\n      signingPublicKey: serializedPaymentSignature.k,\n      contract: serializedPaymentSignature.c,\n      client: serializedPaymentSignature.cl\n    };\n  }\n}\n","import { SerializedDonation, SerializedDonationAsset, SerializedDonationSignature } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nconst _serializedDonationAssetFieldTypes: ReadonlyMap<\n  keyof SerializedDonationAsset, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonationAsset, SerializedFieldType | readonly SerializedFieldType[]>()\n  // address\n  .set('a', 'string')\n  // id\n  .set('i', ['number', 'undefined', 'null']);\n\nconst _serializedDonationSignatureFieldTypes: ReadonlyMap<\n  keyof SerializedDonationSignature, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonationSignature, SerializedFieldType | readonly SerializedFieldType[]>()\n  // client\n  .set('cl', 'string')\n  // signature.signingPublicKey\n  .set('k', 'string');\n\nexport const serializedDonationFieldTypes: ReadonlyMap<\n  keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  // data\n  .set('d', ['object', 'undefined', 'null'])\n  // desiredAmount\n  .set('da', ['string', 'undefined', 'null'])\n  // desiredAsset\n  .set('das', ['object', 'undefined', 'null'])\n  // .set('das', serializedDonationAssetFieldTypes)\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null'])\n  // signature\n  .set('s', ['object', 'undefined', 'null']);\n  // .set('da', serializedDonationSignatureFieldTypes)\n","import type {\n  Donation, DonationAsset, DonationSignature,\n  SerializedDonation, SerializedDonationAsset, SerializedDonationSignature\n} from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nconst serializedEmptyObjectBase64 = 'e30';\nexport class DonationSerializer {\n  protected static readonly serializedDonationBase64Serializer = new Base64Serializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  serialize(donation: Donation): string | null {\n    try {\n      const serializedDonation = this.mapDonationToSerializedDonation(donation);\n      const serializedDonationBase64 = DonationSerializer.serializedDonationBase64Serializer.serialize(serializedDonation);\n\n      return serializedDonationBase64 === serializedEmptyObjectBase64 ? '' : serializedDonationBase64;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapDonationToSerializedDonation(donation: Donation): SerializedDonation {\n    return {\n      d: donation.data,\n      da: donation.desiredAmount?.toString(10),\n      das: donation.desiredAsset ? this.mapDonationAssetToSerializedDonationAsset(donation.desiredAsset) : undefined,\n      su: donation.successUrl?.toString(),\n      cu: donation.cancelUrl?.toString(),\n      s: donation.signature ? this.mapDonationSignatureToSerializedDonationSignature(donation.signature) : undefined\n    };\n  }\n\n  protected mapDonationAssetToSerializedDonationAsset(donationAsset: DonationAsset): SerializedDonationAsset {\n    return {\n      a: donationAsset.address,\n      i: donationAsset.id !== null ? donationAsset.id : undefined\n    };\n  }\n\n  protected mapDonationSignatureToSerializedDonationSignature(donationSignature: DonationSignature): SerializedDonationSignature {\n    return {\n      k: donationSignature.signingPublicKey,\n      cl: donationSignature.client\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type {\n  NonSerializedDonationSlice, Donation, DonationAsset, DonationSignature,\n  SerializedDonation, SerializedDonationSignature, SerializedDonationAsset,\n} from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class DonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = DonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: SerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      data: serializedDonation.d,\n      desiredAmount: serializedDonation.da ? new BigNumber(serializedDonation.da) : undefined,\n      desiredAsset: serializedDonation.das ? this.mapSerializedDonationAssetToDonationAsset(serializedDonation.das) : undefined,\n      successUrl: serializedDonation.su ? new URL(serializedDonation.su) : undefined,\n      cancelUrl: serializedDonation.cu ? new URL(serializedDonation.cu) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress,\n      signature: serializedDonation.s ? this.mapSerializedDonationSignatureToDonationSignature(serializedDonation.s) : undefined\n    };\n  }\n\n  protected mapSerializedDonationAssetToDonationAsset(serializedDonationAsset: SerializedDonationAsset): DonationAsset {\n    return {\n      address: serializedDonationAsset.a,\n      id: serializedDonationAsset.i !== undefined ? serializedDonationAsset.i : null\n    };\n  }\n\n  protected mapSerializedDonationSignatureToDonationSignature(serializedDonationSignature: SerializedDonationSignature): DonationSignature {\n    return {\n      signingPublicKey: serializedDonationSignature.k,\n      client: serializedDonationSignature.cl\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { PaymentValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { PaymentDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport type { PaymentSignature } from '../signing';\nimport { PaymentBase, PaymentType } from './paymentBase';\n\nexport interface Payment extends PaymentBase {\n  readonly type: PaymentType.Payment;\n  readonly id: string;\n  readonly amount: BigNumber;\n  readonly asset?: PaymentAsset;\n  readonly created: Date;\n  readonly expired?: Date;\n  readonly data?: PaymentData;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n  readonly signature: PaymentSignature;\n}\n\nexport type UnsignedPayment = Omit<Payment, 'signature'>;\n\ninterface PaymentData {\n  readonly [fieldName: string]: unknown;\n}\n\nexport interface PaymentAsset {\n  readonly address: string;\n  readonly decimals: number;\n  readonly id: number | null;\n}\n\nexport class Payment extends StateModel {\n  static readonly defaultDeserializer: PaymentDeserializer = new PaymentDeserializer();\n  static readonly defaultValidator: PaymentValidator = new PaymentValidator();\n\n  static validate(payment: Payment) {\n    return Payment.defaultValidator.validate(payment);\n  }\n\n  static deserialize(serializedPayment: string): Payment | null {\n    return Payment.defaultDeserializer.deserialize(serializedPayment);\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { DonationValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { DonationDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport type { DonationSignature } from '../signing';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedDonationSlice } from './serializedDonation';\n\nexport interface Donation extends PaymentBase {\n  readonly type: PaymentType.Donation;\n  readonly data?: DonationData;\n  readonly desiredAmount?: BigNumber;\n  readonly desiredAsset?: DonationAsset;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n  readonly signature?: DonationSignature;\n}\n\nexport type UnsignedDonation = Omit<Donation, 'signature'>;\n\ninterface DonationData {\n  readonly [fieldName: string]: unknown;\n}\n\nexport interface DonationAsset {\n  readonly address: string;\n  readonly id: number | null;\n}\n\nexport class Donation extends StateModel {\n  static readonly defaultDeserializer: DonationDeserializer = new DonationDeserializer();\n  static readonly defaultValidator: DonationValidator = new DonationValidator();\n\n  static validate(donation: Donation) {\n    return Donation.defaultValidator.validate(donation);\n  }\n\n  static deserialize(serializedDonation: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    return Donation.defaultDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice);\n  }\n}\n\n","import { text } from '../../utils';\n\nexport enum PaymentUrlType {\n  Base64 = 0\n}\n\nconst encodedPaymentUrlTypeMap = new Map<PaymentUrlType, string>(\n  Object.keys(PaymentUrlType)\n    .filter(value => !isNaN(+value))\n    .map(value => [+value, text.padStart(value, 2, '0')])\n);\n\nexport const getEncodedPaymentUrlType = (paymentUrlType: PaymentUrlType) => encodedPaymentUrlTypeMap.get(paymentUrlType) || '';\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ParameterizedRouteFactory = (...args: any[]) => string;\nexport type ParameterizedRoute<Factory extends ParameterizedRouteFactory> = Factory & {\n  readonly template: string;\n};\n\nexport const getParameterizedRoute = <Factory extends ParameterizedRouteFactory>(\n  factory: Factory, template: string\n): ParameterizedRoute<Factory> => {\n  (factory as Factory & { template: string }).template = template;\n\n  return factory as ParameterizedRoute<Factory>;\n};\n","export enum ServiceOperationType {\n  Payment = 1,\n  Donation = 2,\n\n  All = Payment | Donation\n}\n","import { optimization } from '../../utils';\nimport { Network, networks } from '../blockchain/network';\nimport { ServiceOperationType } from './serviceOperationType';\nimport { ServiceSigningKey } from './serviceSigningKey';\n\nexport interface Service {\n  readonly name: string;\n  readonly links: readonly string[];\n  readonly description?: string;\n  readonly iconUrl?: string;\n  readonly version: number;\n  readonly metadata: string;\n\n  readonly contractAddress: string;\n  readonly network: Network;\n  readonly allowedTokens: {\n    readonly tez: boolean;\n    readonly assets: readonly string[];\n  }\n  readonly allowedOperationType: ServiceOperationType;\n\n  readonly owner: string;\n  readonly paused: boolean;\n  readonly deleted: boolean;\n  readonly signingKeys: ReadonlyMap<ServiceSigningKey['publicKey'], ServiceSigningKey>;\n}\n\nexport const emptyService: Service = {\n  name: '',\n  description: '',\n  links: optimization.emptyArray,\n  version: 0,\n  metadata: '',\n  contractAddress: '',\n  allowedTokens: {\n    tez: true,\n    assets: optimization.emptyArray\n  },\n  allowedOperationType: ServiceOperationType.Payment,\n  owner: '',\n  paused: false,\n  deleted: false,\n  network: networks.mainnet,\n  signingKeys: optimization.emptyMap\n};\n","export enum OperationType {\n  Payment = 1,\n  Donation = 2\n}\n","export enum OperationDirection {\n  Incoming = 0,\n  Outgoing = 1\n}\n","export enum OperationStatus {\n  Pending = 0,\n  Success = 1,\n  Cancelled = 2\n}\n","\nimport { converters } from '../../utils';\nimport { StateModel } from '../core';\nimport { Operation } from './operation';\nimport { OperationDirection } from './operationDirection';\nimport { OperationType } from './operationType';\n\nexport interface DonationOperation extends Operation {\n  readonly type: OperationType.Donation;\n  readonly direction: OperationDirection.Incoming;\n  readonly payload?: DonationOperationPayload;\n}\n\nexport interface DonationOperationPayload {\n  readonly value: { readonly [fieldName: string]: unknown; } | null;\n  readonly valueString: string;\n  readonly encodedValue: string;\n}\n\nexport class DonationOperation extends StateModel {\n  static parsePayload(encodedValue: string): DonationOperationPayload {\n    const valueString = converters.bytesToString(encodedValue);\n\n    let value: DonationOperationPayload['value'] = null;\n    try { value = JSON.parse(valueString); } catch { /**/ }\n\n    return {\n      value,\n      valueString,\n      encodedValue,\n    };\n  }\n}\n","\nimport type { UnsignedDonation, EncodedDonationSignPayload } from '../../models';\n\nexport class DonationSignPayloadEncoder {\n  encode(donation: UnsignedDonation): EncodedDonationSignPayload {\n    return {\n      clientSignPayload: this.getClientSignPayload(donation)\n    };\n  }\n\n  protected getClientSignPayload(donation: UnsignedDonation): EncodedDonationSignPayload['clientSignPayload'] {\n    return (\n      (donation.successUrl ? donation.successUrl.href : '')\n      + (donation.cancelUrl ? donation.cancelUrl.href : '')\n    ) || null;\n  }\n}\n","import type { Payment } from '../../models';\n\nexport interface ClientSignPayload {\n  readonly successUrl?: string;\n  readonly cancelUrl?: string;\n  readonly data?: Payment['data'];\n}\n\n// 'Tezos Signed Message: '\nexport const tezosSignedMessagePrefixBytes = '54657a6f73205369676e6564204d6573736167653a20';\n// 'Payment Client Data: '\nexport const tezosPaymentsClientSignedMessagePrefixBytes = '5061796d656e7420436c69656e7420446174613a20';\n","import type { MichelsonType } from '@taquito/michel-codec';\n\nexport const contractPaymentInTezSignPayloadMichelsonType: MichelsonType = {\n  prim: 'pair',\n  args: [\n    {\n      prim: 'pair',\n      args: [\n        { prim: 'string' },\n        { prim: 'address' }\n      ]\n    },\n    { prim: 'mutez' }\n  ]\n};\n\nexport const contractPaymentInAssetSignPayloadMichelsonType: MichelsonType = {\n  prim: 'pair',\n  args: [\n    {\n      prim: 'pair',\n      args: [\n        {\n          prim: 'pair',\n          args: [\n            { prim: 'string' },\n            { prim: 'address' }\n          ]\n        },\n        {\n          prim: 'pair',\n          args: [\n            { prim: 'nat' },\n            { prim: 'address' }\n          ]\n        }\n      ]\n    },\n    {\n      prim: 'option',\n      args: [{ prim: 'nat' }]\n    }\n  ]\n};\n","\nimport { MichelsonType, packDataBytes } from '@taquito/michel-codec';\n\nimport type { UnsignedPayment, EncodedPaymentSignPayload } from '../../models';\nimport { converters, text } from '../../utils';\nimport { tezToMutez, tokensAmountToNat } from '../../utils/converters';\nimport { ClientSignPayload, tezosPaymentsClientSignedMessagePrefixBytes, tezosSignedMessagePrefixBytes } from './clientSignPayload';\nimport { contractPaymentInTezSignPayloadMichelsonType, contractPaymentInAssetSignPayloadMichelsonType } from './michelsonTypes';\n\nexport class PaymentSignPayloadEncoder {\n  protected static readonly contractPaymentInTezSignPayloadMichelsonType: MichelsonType = contractPaymentInTezSignPayloadMichelsonType;\n  protected static readonly contractPaymentInAssetSignPayloadMichelsonType: MichelsonType = contractPaymentInAssetSignPayloadMichelsonType;\n\n  encode(payment: UnsignedPayment): EncodedPaymentSignPayload {\n    return {\n      contractSignPayload: this.getContractSignPayload(payment),\n      clientSignPayload: this.getClientSignPayload(payment)\n    };\n  }\n\n  protected getContractSignPayload(payment: UnsignedPayment): EncodedPaymentSignPayload['contractSignPayload'] {\n    const signPayload = payment.asset\n      ? packDataBytes(\n        {\n          prim: 'Pair',\n          args: [\n            {\n              prim: 'Pair',\n              args: [\n                {\n                  prim: 'Pair',\n                  args: [\n                    { string: payment.id },\n                    { string: payment.targetAddress }\n                  ]\n                },\n                {\n                  prim: 'Pair',\n                  args: [\n                    { int: tokensAmountToNat(payment.amount, payment.asset.decimals).toString(10) },\n                    { string: payment.asset.address }\n                  ]\n                }\n              ]\n            },\n            payment.asset.id !== undefined && payment.asset.id !== null\n              ? { prim: 'Some', args: [{ int: payment.asset.id.toString() }] }\n              : { prim: 'None' }\n          ]\n        },\n        contractPaymentInAssetSignPayloadMichelsonType\n      )\n      : packDataBytes(\n        {\n          prim: 'Pair',\n          args: [\n            {\n              prim: 'Pair',\n              args: [\n                { string: payment.id },\n                { string: payment.targetAddress }\n              ]\n            },\n            { int: tezToMutez(payment.amount).toString(10) }\n          ]\n        },\n        contractPaymentInTezSignPayloadMichelsonType\n      );\n\n    return '0x' + signPayload.bytes;\n  }\n\n  protected getClientSignPayload(payment: UnsignedPayment): EncodedPaymentSignPayload['clientSignPayload'] {\n    const clientSignPayload: ClientSignPayload = {\n      data: payment.data,\n      successUrl: payment.successUrl?.href,\n      cancelUrl: payment.cancelUrl?.href\n    };\n    const serializedClientSignPayload = JSON.stringify(\n      clientSignPayload,\n      (_key, value) => value !== undefined && value !== null && value !== '' ? value : undefined\n    );\n    if (serializedClientSignPayload === '{}')\n      return null;\n\n    const serializedClientSignPayloadBytes = converters.stringToBytes(serializedClientSignPayload);\n    const signedMessageBytes = tezosSignedMessagePrefixBytes + tezosPaymentsClientSignedMessagePrefixBytes + serializedClientSignPayloadBytes;\n    const messageLength = text.padStart((signedMessageBytes.length / 2).toString(16), 8, '0');\n    const result = '0x0501' + messageLength + signedMessageBytes;\n\n    return result;\n  }\n}\n","import { b58cencode, prefix } from '@taquito/utils';\nimport sodium from 'libsodium-wrappers';\n\nimport { EncodedKeyPair, KeyPair, KeyPairGeneratorResult, KeyType } from '../../models';\nimport type { KeyPairGenerator } from './keyPairGenerator';\n\nexport class Ed25519KeyGenerator implements KeyPairGenerator {\n  private _isInitialized = false;\n\n  get isInitialized() {\n    return this._isInitialized;\n  }\n\n  generate(): KeyPairGeneratorResult {\n    if (!this.isInitialized)\n      throw new Error('Ed25519 key generator is not initialized');\n\n    const keyPair = sodium.crypto_sign_keypair('uint8array');\n    const raw: KeyPair = {\n      keyType: KeyType.Ed25519,\n      privateKey: keyPair.privateKey,\n      publicKey: keyPair.publicKey,\n    };\n\n    const encoded: EncodedKeyPair = {\n      keyType: KeyType.Ed25519,\n      privateKey: b58cencode(raw.privateKey, prefix['edsk']),\n      publicKey: b58cencode(raw.publicKey, prefix['edpk']),\n    };\n\n    return {\n      raw,\n      encoded\n    };\n  }\n\n  async initialize(): Promise<void> {\n    await sodium.ready;\n    this._isInitialized = true;\n  }\n\n  static async create(): Promise<Ed25519KeyGenerator> {\n    const instance = new Ed25519KeyGenerator();\n    await instance.initialize();\n\n    return instance;\n  }\n}\n","import { b58cencode, prefix } from '@taquito/utils';\nimport { ec } from 'elliptic';\n\nimport { EncodedKeyPair, KeyPair, KeyPairGeneratorResult, KeyType } from '../../models';\nimport type { KeyPairGenerator } from './keyPairGenerator';\n\nexport class EllipticCurveKeyGenerator implements KeyPairGenerator {\n  protected static readonly curveInfo = {\n    secp256k1: {\n      name: 'secp256k1',\n      keyType: KeyType.Secp256k1,\n      privateKeyPrefix: prefix['spsk'],\n      publicKeyPrefix: prefix['sppk'],\n    },\n    p256: {\n      name: 'p256',\n      keyType: KeyType.P256,\n      privateKeyPrefix: prefix['p2sk'],\n      publicKeyPrefix: prefix['p2pk'],\n    },\n  } as const;\n\n  protected readonly ec: ec;\n  protected readonly curveInfo: typeof EllipticCurveKeyGenerator.curveInfo[keyof typeof EllipticCurveKeyGenerator.curveInfo];\n\n  constructor(curveName: keyof typeof EllipticCurveKeyGenerator.curveInfo) {\n    this.ec = new ec(curveName);\n    this.curveInfo = EllipticCurveKeyGenerator.curveInfo[curveName];\n  }\n\n  generate(): KeyPairGeneratorResult {\n    const keyPair = this.ec.genKeyPair();\n    console.log(keyPair);\n\n    const publicBasePoint = keyPair.getPublic();\n    const publicPointX = publicBasePoint.getX().toArray();\n    const publicPointY = publicBasePoint.getY().toArray();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const firstByte = publicPointY[publicPointY.length - 1]! % 2 ? 3 : 2;\n\n    const privateKey = new Uint8Array(keyPair.getPrivate().toArray());\n    const pad = new Array(32).fill(0);\n    const publicKey = new Uint8Array([firstByte].concat(pad.concat(publicPointX).slice(-32)));\n\n    const raw: KeyPair = {\n      keyType: KeyType.P256,\n      privateKey,\n      publicKey,\n    };\n\n    const encoded: EncodedKeyPair = {\n      keyType: this.curveInfo.keyType,\n      privateKey: b58cencode(privateKey, this.curveInfo.privateKeyPrefix),\n      publicKey: b58cencode(publicKey, this.curveInfo.publicKeyPrefix),\n    };\n\n    return {\n      raw,\n      encoded\n    };\n  }\n}\n"],"names":["Buffer","BigNumber","isPlainObjectLodashFunction","IconId","PaymentType","guards.isPlainObject","KeyType","NodeURL","base64.encode","base64.decode","PaymentUrlType","text.padStart","ServiceOperationType","OperationType","OperationDirection","OperationStatus","converters.bytesToString","packDataBytes","converters.stringToBytes","sodium","b58cencode","prefix","ec"],"mappings":"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"}