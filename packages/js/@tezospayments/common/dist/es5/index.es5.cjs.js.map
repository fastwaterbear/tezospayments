{"version":3,"file":"index.es5.cjs.js","sources":["../../src/utils/base64.ts","../../src/utils/converters.ts","../../src/utils/guards.ts","../../src/utils/memoize.ts","../../src/utils/optimization.ts","../../src/utils/shallowEqual.ts","../../src/utils/text.ts","../../src/utils/index.ts","../../src/helpers/serviceLinkHelper.ts","../../src/models/payment/paymentBase.ts","../../src/helpers/paymentValidator/paymentValidatorBase.ts","../../src/models/blockchain/network.ts","../../src/models/blockchain/token.ts","../../src/models/blockchain/tezosInfo.ts","../../src/models/blockchain/keyType.ts","../../src/native/index.ts","../../src/helpers/paymentValidator/validationMethods.ts","../../src/helpers/paymentValidator/paymentValidator.ts","../../src/helpers/paymentValidator/donationValidator.ts","../../src/models/core/stateModel.ts","../../src/models/core/eventEmitter.ts","../../src/serialization/base64/objectSerializationValidator.ts","../../src/serialization/base64/base64Serializer.ts","../../src/serialization/base64/base64Deserializer.ts","../../src/serialization/payment/serializedPaymentFieldTypes.ts","../../src/serialization/payment/paymentSerializer.ts","../../src/serialization/payment/paymentDeserializer.ts","../../src/serialization/donation/serializedDonationFieldTypes.ts","../../src/serialization/donation/donationSerializer.ts","../../src/serialization/donation/donationDeserializer.ts","../../src/models/payment/payment.ts","../../src/models/payment/donation.ts","../../src/models/payment/paymentUrlType.ts","../../src/models/routing/parameterizedRoute.ts","../../src/models/service/serviceOperationType.ts","../../src/models/service/service.ts","../../src/models/operation/operationType.ts","../../src/models/operation/operationDirection.ts","../../src/models/operation/operationStatus.ts","../../src/models/operation/donationOperation.ts","../../src/signing/signPayloadEncoders/donationSignPayloadEncoder.ts","../../src/signing/signPayloadEncoders/clientSignPayload.ts","../../src/signing/signPayloadEncoders/michelsonTypes.ts","../../src/signing/signPayloadEncoders/paymentSignPayloadEncoder.ts","../../src/signing/keyPairGenerators/ed25519KeyGenerator.ts","../../src/signing/keyPairGenerators/ellipticCurveKeyGenerator.ts"],"sourcesContent":["import { Buffer } from 'buffer';\n\ntype ValidBase64Format = 'base64' | 'base64url';\n\n// Node.js < 15\nconst isBase64UrlFormatSupported = Buffer.isEncoding('base64url');\n\nexport const decode = (base64String: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (!isBase64UrlFormatSupported) {\n    format = 'base64';\n    base64String = base64UrlPreprocessor.prepareValueForDecoding(base64String);\n  }\n\n  return Buffer.from(base64String, format).toString('utf8');\n};\n\nexport const encode = (value: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (isBase64UrlFormatSupported)\n    return Buffer.from(value, 'utf8').toString(format);\n\n  const encodedValue = Buffer.from(value, 'utf8').toString('base64');\n  return base64UrlPreprocessor.prepareEncodedValue(encodedValue);\n};\n\nconst base64UrlPreprocessor = {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  prepareEncodedValue: (base64value: string) => base64value\n    .split('=')[0]!\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_'),\n\n  prepareValueForDecoding: (base64value: string) => {\n    base64value = base64value\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n\n    switch (base64value.length % 4) {\n      case 0: return base64value;\n      case 2: return base64value + '==';\n      case 3: return base64value + '=';\n      default:\n        throw new Error('Invalid base64url value');\n    }\n  }\n};\n","import { Buffer } from 'buffer';\n\nimport BigNumber from 'bignumber.js';\n\nexport const stringToUint8Array = (hex: string): Uint8Array => {\n  const integers = hex.match(/[\\da-f]{2}/gi)?.map(val => parseInt(val, 16));\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return new Uint8Array(integers!);\n};\n\nexport const stringToBytes = (value: string): string => Buffer.from(value, 'utf8').toString('hex');\nexport const bytesToString = (value: string): string => Buffer.from(stringToUint8Array(value)).toString('utf8');\n\nexport const objectToBytes = (value: Record<string, unknown>): string => stringToBytes(JSON.stringify(value));\nexport const bytesToObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: string): T | null => {\n  try {\n    return JSON.parse(bytesToString(value));\n  }\n  catch {\n    return null;\n  }\n};\n\nexport const tokensAmountToNat = (tokensAmount: BigNumber | number, decimals: number): BigNumber => {\n  return new BigNumber(tokensAmount).multipliedBy(10 ** decimals).integerValue();\n};\n\nexport const numberToTokensAmount = (value: BigNumber | number, decimals: number): BigNumber => {\n  return new BigNumber(value).integerValue().div(10 ** decimals);\n};\n\nexport const tezToMutez = (tez: BigNumber | number): BigNumber => tokensAmountToNat(tez, 6);\nexport const mutezToTez = (mutez: BigNumber | number): BigNumber => numberToTokensAmount(mutez, 6);\n","import isPlainObjectLodashFunction from 'lodash.isplainobject';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isArray = (arg: any): arg is any[] => {\n  return Array.isArray(arg);\n};\n\nexport const isReadonlyArray = (arg: unknown): arg is readonly unknown[] => {\n  return Array.isArray(arg);\n};\n\nexport const isPlainObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: unknown): value is T => {\n  return isPlainObjectLodashFunction(value);\n};\n","const defaultEqualityCheck = <T>(a: T, b: T) => a === b;\n\nconst areArgumentsShallowlyEqual = <T extends IArguments | null>(equalityCheck: (a: T, b: T) => boolean, prev: T, next: T) => {\n    if (prev === null || next === null || prev.length !== next.length) {\n        return false;\n    }\n\n    // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n    const length = prev.length;\n    for (let i = 0; i < length; i++) {\n        if (!equalityCheck(prev[i], next[i])) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/* eslint-disable prefer-rest-params  */\n/* eslint-disable prefer-spread */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const memoize = <TF extends (...args: any) => any>(func: TF, equalityCheck = defaultEqualityCheck): TF => {\n    let lastArgs: IArguments | null = null;\n    let lastResult: unknown = null;\n\n    return (function () {\n        if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n            // apply arguments instead of spreading for performance.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            lastResult = func.apply(null, arguments as any);\n        }\n\n        lastArgs = arguments;\n        return lastResult;\n    } as TF);\n};\n/* eslint-enable prefer-spread */\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/no-explicit-any */\n","import BigNumber from 'bignumber.js';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst emptyArray: any[] = [];\nconst emptyObject = {};\nconst emptyMap = new Map();\nconst emptySet: Set<any> = new Set();\nconst zeroBigNumber = new BigNumber(0);\n\nexport default {\n    emptyArray,\n    emptyMap,\n    emptySet,\n    emptyObject,\n    zeroBigNumber\n};\n","const is = (x: unknown, y: unknown) => {\n    return (x === y)\n        ? x !== 0 || y !== 0 || (1 / x) === (1 / y)\n        // eslint-disable-next-line no-self-compare\n        : x !== x && y !== y;\n};\n\nexport default function shallowEqual(objA: unknown, objB: unknown) {\n    if (is(objA, objB))\n        return true;\n\n    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null)\n        return false;\n\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    if (keysA.length !== keysB.length)\n        return false;\n\n    for (let i = 0; i < keysA.length; i++) {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]!)\n            || !is((objA as any)[keysA[i]!], (objB as any)[keysA[i]!])\n        )\n            return false;\n\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n    }\n\n    return true;\n}\n","export const capitalize = (value: string): string => value && (value[0]?.toLocaleUpperCase() + value.slice(1));\n\nexport const getAvatarText = (value: string, maxLength = 2) => {\n  if (!value || !maxLength)\n    return '';\n\n  let result = '';\n\n  for (let i = 0, j = 0, isWord = false; i < value.length; i++) {\n    if (!isWord && value[i] !== ' ') {\n      isWord = true;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      result += value[i]!;\n\n      if (++j === maxLength)\n        return result;\n    }\n    else if (isWord && value[i] === ' ') {\n      isWord = false;\n    }\n  }\n\n  return result;\n};\n\nconst stringPad = (string: string, isStart: boolean, maxLength: number, fillString = ' ') => {\n  if (String.prototype.padStart !== undefined)\n    return string.padStart(maxLength, fillString);\n\n  const stringLength = string.length;\n  // eslint-disable-next-line eqeqeq\n  if (maxLength <= stringLength || fillString == '')\n    return string;\n\n  const fillLength = maxLength - stringLength;\n  let filler = fillString.repeat(Math.ceil(fillLength / fillString.length));\n\n  if (filler.length > fillLength)\n    filler = filler.slice(0, fillLength);\n\n  return isStart ? filler + string : string + filler;\n};\n\nexport const padStart = (string: string, maxLength: number, fillString = ' ') => String.prototype.padStart !== undefined\n  ? string.padStart(maxLength, fillString)\n  : stringPad(string, true, maxLength, fillString);\n\nexport const padEnd = (string: string, maxLength: number, fillString = ' ') => String.prototype.padEnd !== undefined\n  ? string.padEnd(maxLength, fillString)\n  : stringPad(string, false, maxLength, fillString);\n","import combineClassNames from 'clsx';\n\nimport * as base64 from './base64';\nimport * as converters from './converters';\nimport * as guards from './guards';\nimport { memoize } from './memoize';\nimport optimization from './optimization';\nimport shallowEqual from './shallowEqual';\nimport * as text from './text';\n\nconst wait = (ms: number) => new Promise<void>(resolve => setTimeout(resolve, ms));\n\nexport {\n  wait,\n  combineClassNames,\n  memoize,\n  shallowEqual,\n  base64,\n  optimization,\n  guards,\n  text,\n  converters\n};\n","import { memoize } from '../utils';\n\nexport enum IconId {\n  Common = 0,\n  Email = 1,\n  Telegram = 2,\n  Facebook = 3,\n  Twitter = 4,\n  Instagram = 5,\n  GitHub = 6,\n  Reddit = 7\n}\n\ninterface LinkInfo {\n  readonly rawLink: string;\n  readonly formattedLink: string;\n  readonly displayLink: string;\n  readonly icon: IconId;\n}\n\nconst getInvalidLinkInfo = (link: string): LinkInfo => ({\n  rawLink: link,\n  formattedLink: '#',\n  displayLink: 'Invalid Link',\n  icon: IconId.Common\n});\n\ntype LinkInfoProvider = (link: string) => LinkInfo | false;\n\nconst prepareFormattedLink = memoize((link: string) => link.trim());\nconst prepareDisplayLink = memoize((link: string) => link.trim().replace(/\\/$/, ''));\n\nconst socialMediaLinkInfoProvider = (link: string, baseUrl: string, icon: IconId): LinkInfo | false => {\n  if (!link.startsWith(baseUrl))\n    return false;\n\n  const formattedLink = prepareFormattedLink(link);\n  if (formattedLink === baseUrl)\n    return false;\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link).replace(baseUrl, ''),\n    icon\n  };\n};\n\nconst telegramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://t.me/', IconId.Telegram);\nconst facebookLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://facebook.com/', IconId.Facebook);\nconst twitterLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://twitter.com/', IconId.Twitter);\nconst instagramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://instagram.com/', IconId.Instagram);\nconst gitHubLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://github.com/', IconId.GitHub);\nconst redditLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://www.reddit.com/', IconId.Reddit);\n\n// This regex should not use for email validation\nconst emailCheckingRegEx = /^[^\\s/@]+@[^\\s@/]+$/;\nconst emailLinkInfoProvider: LinkInfoProvider = link => {\n  const preparedFormattedLink = prepareFormattedLink(link);\n\n  return emailCheckingRegEx.test(preparedFormattedLink) && {\n    rawLink: link,\n    formattedLink: `mailto:${preparedFormattedLink}`,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Email\n  };\n};\n\nconst javascriptLinkInfoProvider: LinkInfoProvider = link => link.startsWith('javascript') ? getInvalidLinkInfo(link) : false;\n\n// https://datatracker.ietf.org/doc/html/rfc3986#section-3.1\nconst urlSchemeRegEx = /^([a-z][a-z0-9+\\-.]*):/;\nconst commonLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return urlSchemeRegEx.test(formattedLink) && {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nconst editLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nexport class ServiceLinkHelper {\n  // Order is important\n  static readonly linkInfoProviders: readonly LinkInfoProvider[] = [\n    // Disallowed\n    javascriptLinkInfoProvider,\n    // Allowed\n    telegramLinkInfoProvider,\n    facebookLinkInfoProvider,\n    twitterLinkInfoProvider,\n    instagramLinkInfoProvider,\n    gitHubLinkInfoProvider,\n    emailLinkInfoProvider,\n    redditLinkInfoProvider,\n    commonLinkInfoProvider\n  ];\n\n  getLinkInfo(link: string, isEditMode = false): LinkInfo | null {\n    for (const provider of ServiceLinkHelper.linkInfoProviders) {\n      const linkInfo = provider(link);\n\n      if (linkInfo)\n        return this.linkInfoIsValid(linkInfo) ? linkInfo : null;\n    }\n\n    if (isEditMode)\n      return editLinkInfoProvider(link) as LinkInfo;\n\n    return null;\n  }\n\n  linkInfoIsValid(linkInfo: LinkInfo) {\n    return linkInfo.formattedLink !== '#';\n  }\n}\n","export enum PaymentType {\n  Payment = 1,\n  Donation = 2\n}\n\nexport interface PaymentBase {\n  readonly type: PaymentType;\n  readonly targetAddress: string;\n}\n","import { PaymentBase } from '../../models/payment/paymentBase';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { guards } from '../../utils';\nimport { PaymentValidationMethod } from './paymentValidationMethod';\n\nexport abstract class PaymentValidatorBase<TPayment extends PaymentBase> {\n  protected readonly abstract validationMethods: ReadonlyArray<PaymentValidationMethod<TPayment>>;\n  protected readonly abstract invalidPaymentObjectError: string;\n\n  validate(payment: TPayment, bail = false): FailedValidationResults {\n    if (!guards.isPlainObject(payment))\n      return [this.invalidPaymentObjectError];\n\n    let failedValidationResults: FailedValidationResults;\n    for (const validationMethod of this.validationMethods) {\n      const currentFailedValidationResults = validationMethod(payment);\n      if (currentFailedValidationResults) {\n        if (!bail)\n          return currentFailedValidationResults;\n\n        failedValidationResults = (failedValidationResults || []).concat(currentFailedValidationResults);\n      }\n    }\n\n    return failedValidationResults;\n  }\n}\n","const networksInternal = {\n  mainnet: {\n    id: 'NetXdQprcVkpaWU',\n    name: 'mainnet',\n  },\n  hangzhounet: {\n    id: 'NetXZSsxBpMQeAT',\n    name: 'hangzhounet'\n  }\n} as const;\n\ninterface NetworkInternal {\n  readonly id: string;\n  readonly name: string;\n}\n\ntype Networks = {\n  readonly [P in keyof typeof networksInternal]: (typeof networksInternal)[P] extends NetworkInternal & {\n    readonly name: P;\n  }\n  ? (typeof networksInternal)[P]\n  : never\n};\n\nexport type Network = Networks[keyof Networks];\nexport interface CustomNetwork {\n  readonly id?: string;\n  readonly name: string;\n}\n\nexport const networks: Networks = networksInternal;\nexport const networksCollection = Object.values(networksInternal);\n\nexport const networkIdRegExp = /^[a-zA-Z]\\w*$/;\nexport const networkNameRegExp = networkIdRegExp;\n","import { Network, networks, networksCollection } from './network';\n\ninterface TokenBase {\n  readonly network: Network;\n  readonly contractAddress: string;\n  readonly metadata?: TokenMetadata;\n}\n\nexport interface TokenFA12 extends TokenBase {\n  readonly type: 'fa1.2';\n}\n\nexport interface TokenFA2 extends TokenBase {\n  readonly type: 'fa2';\n  readonly id: number;\n}\n\nexport type Token = TokenFA12 | TokenFA2;\n\nexport type TokenMetadata = {\n  readonly decimals: number;\n  readonly symbol: string;\n  readonly name: string;\n  readonly thumbnailUri: string;\n};\n\nexport const tezosMeta: TokenMetadata = {\n  symbol: 'XTZ',\n  name: 'Tezos',\n  decimals: 6,\n  thumbnailUri: 'https://dashboard.tezospayments.com/tokens/tezos.png'\n};\n\nexport const unknownAssetMeta: TokenMetadata = {\n  name: 'Unknown',\n  symbol: 'Unknown',\n  decimals: 0,\n  thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png'\n};\n\nexport const tokenWhitelist: readonly Token[] = [\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa1.2',\n  //   contractAddress: 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV',\n  //   metadata: {\n  //     decimals: 18,\n  //     symbol: 'KUSD',\n  //     name: 'Kolibri',\n  //     thumbnailUri: 'https://kolibri-data.s3.amazonaws.com/logo.png',\n  //   },\n  // },\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa2',\n  //   contractAddress: 'KT1REEb5VxWRjcHm5GzDMwErMmNFftsE5Gpf',\n  //   fa2TokenId: 0,\n  //   metadata: {\n  //     decimals: 6,\n  //     symbol: 'USDS',\n  //     name: 'Stably USD',\n  //     thumbnailUri: 'https://quipuswap.com/tokens/stably.png',\n  //   },\n  // },\n  {\n    network: networks.hangzhounet,\n    type: 'fa1.2',\n    contractAddress: 'KT19sYK89XKYTeGHekWK9wL5iDHVF4YYf26t',\n    metadata: {\n      decimals: 6,\n      symbol: 'FA12',\n      name: 'Test FA 1.2',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  },\n  {\n    network: networks.hangzhounet,\n    type: 'fa2',\n    contractAddress: 'KT1EKo1Eihucz9N4cQyaDKeYRoMzTEoiZRAT',\n    id: 0,\n    metadata: {\n      decimals: 6,\n      symbol: 'FA20',\n      name: 'Test FA 2.0',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  },\n];\n\nexport const tokenWhitelistMap: ReadonlyMap<Network, ReadonlyMap<Token['contractAddress'], Token>> = new Map(\n  networksCollection.map(nc => [nc, new Map(tokenWhitelist.filter(t => t.network === nc).map(t => [t.contractAddress, t]))])\n);\n","const contractAddressPrefixes = ['KT'] as const;\nconst implicitAddressPrefixes = ['tz1', 'tz2', 'tz3'] as const;\nconst addressPrefixes = [...contractAddressPrefixes, ...implicitAddressPrefixes] as const;\n\nexport const tezosInfo = {\n  addressLength: 36,\n  contractAddressPrefixes,\n  implicitAddressPrefixes,\n  addressPrefixes,\n} as const;\n","export enum KeyType {\n  Ed25519 = 'Ed25519',\n  Secp256k1 = 'Secp256k1',\n  P256 = 'P256'\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { URL as NodeURL } from 'url';\n\nexport type URL = NodeURL;\nexport const URL = NodeURL || (globalThis as any).URL;\n","import BigNumber from 'bignumber.js';\n\nimport { tezosInfo } from '../../models/blockchain';\nimport { DonationAsset, Payment, PaymentAsset } from '../../models/payment';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { URL } from '../../native';\nimport { guards } from '../../utils';\n\ntype Errors<FieldNames extends string> = {\n  readonly [P in FieldNames]: string;\n};\n\nexport const validateTargetAddress = (\n  targetAddress: string,\n  errors: Errors<'invalidTargetAddress' | 'targetAddressHasInvalidLength' | 'targetAddressIsNotNetworkAddress'>\n): FailedValidationResults => {\n  if (typeof targetAddress !== 'string')\n    return [errors.invalidTargetAddress];\n\n  if (targetAddress.length !== tezosInfo.addressLength)\n    return [errors.targetAddressHasInvalidLength];\n\n  if (!tezosInfo.addressPrefixes.some(prefix => targetAddress.startsWith(prefix)))\n    return [errors.targetAddressIsNotNetworkAddress];\n};\n\nexport const validateId = (\n  id: string,\n  errors: Errors<'invalidId' | 'emptyId'>\n): FailedValidationResults => {\n  if (typeof id !== 'string')\n    return [errors.invalidId];\n\n  if (id === '')\n    return [errors.emptyId];\n};\n\nexport const validateAmount = (\n  amount: BigNumber,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  if (!BigNumber.isBigNumber(amount) || amount.isNaN() || !amount.isFinite())\n    return [errors.invalidAmount];\n\n  if (amount.isZero() || amount.isNegative())\n    return [errors.amountIsNonPositive];\n};\n\nexport const validateDesiredAmount = (\n  desiredAmount: BigNumber | undefined,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  return desiredAmount === undefined ? undefined : validateAmount(desiredAmount, errors);\n};\n\nexport const validatePaymentAsset = (\n  asset: PaymentAsset | undefined,\n  errors: Errors<\n    | 'invalidAsset'\n    | 'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'\n    | 'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'\n    | 'invalidAssetDecimals' | 'assetDecimalsNumberIsNegative' | 'assetDecimalsNumberIsNotInteger'\n  >\n): FailedValidationResults => {\n  if (asset === undefined)\n    return;\n\n  if (!guards.isPlainObject(asset))\n    return [errors.invalidAsset];\n\n  return validateAsset(asset, errors) || validateAssetDecimals(asset.decimals, errors);\n};\n\nexport const validateDonationAsset = (\n  asset: DonationAsset | undefined,\n  errors: Errors<\n    | 'invalidAsset'\n    | 'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'\n    | 'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'\n  >\n): FailedValidationResults => {\n  if (asset === undefined)\n    return;\n\n  if (!guards.isPlainObject(asset))\n    return [errors.invalidAsset];\n\n  return validateAsset(asset, errors);\n};\n\nexport const validateCreatedDate = (\n  date: Date,\n  errors: Errors<'invalidCreatedDate'>\n): FailedValidationResults => {\n  if (!(date instanceof Date) || isNaN(date.getTime()))\n    return [errors.invalidCreatedDate];\n};\n\nexport const validateUrl = (\n  url: URL | undefined,\n  errors: Errors<'invalidUrl' | 'invalidProtocol'>\n): FailedValidationResults => {\n  if (url === undefined)\n    return;\n\n  if (!(url instanceof URL))\n    return [errors.invalidUrl];\n\n  if (url.protocol.indexOf('javascript') > -1)\n    return [errors.invalidProtocol];\n};\n\nexport const validateExpiredDate = (\n  expiredDate: Date | undefined,\n  createdDate: Date,\n  minimumPaymentLifetime: number,\n  errors: Errors<'invalidExpiredDate' | 'paymentLifetimeIsShort'>\n): FailedValidationResults => {\n  if (expiredDate === undefined)\n    return;\n\n  if (!(expiredDate instanceof Date) || isNaN(expiredDate.getTime()))\n    return [errors.invalidExpiredDate];\n\n  if (expiredDate.getTime() - createdDate.getTime() < minimumPaymentLifetime) {\n    return [errors.paymentLifetimeIsShort];\n  }\n};\n\nexport const validateData = (\n  data: Payment['data'],\n  errors: Errors<'invalidData'>\n): FailedValidationResults => {\n  if (data === undefined)\n    return;\n\n  if (!guards.isPlainObject(data))\n    return [errors.invalidData];\n};\n\nconst validateAsset = (\n  asset: PaymentAsset | DonationAsset,\n  errors: Errors<\n    | 'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'\n    | 'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'\n  >\n): FailedValidationResults => {\n  return validateAssetAddress(asset.address, errors) || validateAssetId(asset.id, errors);\n};\n\nconst validateAssetAddress = (\n  assetAddress: string,\n  errors: Errors<'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'>\n): FailedValidationResults => {\n  if (typeof assetAddress !== 'string')\n    return [errors.invalidAssetAddress];\n\n  if (assetAddress.length !== tezosInfo.addressLength)\n    return [errors.assetAddressHasInvalidLength];\n\n  if (!tezosInfo.contractAddressPrefixes.some(prefix => assetAddress.startsWith(prefix)))\n    return [errors.assetAddressIsNotContractAddress];\n};\n\nconst validateAssetId = (\n  assetId: number | null,\n  errors: Errors<'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'>\n): FailedValidationResults => {\n  if (assetId === null)\n    return;\n\n  if (typeof assetId !== 'number' || Number.isNaN(assetId) || !Number.isFinite(assetId))\n    return [errors.invalidAssetId];\n\n  if (assetId < 0)\n    return [errors.assetIdIsNegative];\n\n  if (!Number.isInteger(assetId))\n    return [errors.assetIdIsNotInteger];\n};\n\nconst validateAssetDecimals = (\n  assetDecimals: number,\n  errors: Errors<'invalidAssetDecimals' | 'assetDecimalsNumberIsNegative' | 'assetDecimalsNumberIsNotInteger'>\n): FailedValidationResults => {\n  if (typeof assetDecimals !== 'number' || Number.isNaN(assetDecimals) || !Number.isFinite(assetDecimals))\n    return [errors.invalidAssetDecimals];\n\n  if (assetDecimals < 0)\n    return [errors.assetDecimalsNumberIsNegative];\n\n  if (!Number.isInteger(assetDecimals))\n    return [errors.assetDecimalsNumberIsNotInteger];\n};\n","import type { Payment, UnsignedPayment } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport {\n  validateTargetAddress, validateId, validateAmount, validateData, validatePaymentAsset,\n  validateCreatedDate, validateExpiredDate, validateUrl\n} from './validationMethods';\n\nexport class PaymentValidator extends PaymentValidatorBase<Payment | UnsignedPayment> {\n  static readonly errors = {\n    invalidPaymentObject: 'Payment is undefined or not object',\n    invalidType: 'Payment type is invalid',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidId: 'Id is invalid',\n    emptyId: 'Id is empty',\n    invalidAmount: 'Amount is invalid',\n    amountIsNonPositive: 'Amount is less than or equal to zero',\n    invalidData: 'Payment data is invalid',\n    invalidAsset: 'Asset is invalid',\n    invalidAssetAddress: 'Asset address is invalid',\n    assetAddressIsNotContractAddress: 'Asset address isn\\'t a contract address',\n    assetAddressHasInvalidLength: 'Asset address has an invalid address',\n    invalidAssetId: 'Asset Id is invalid',\n    assetIdIsNegative: 'Asset Id is negative',\n    assetIdIsNotInteger: 'Asset Id isn\\'t an integer',\n    invalidAssetDecimals: 'Asset number of decimals is invalid',\n    assetDecimalsNumberIsNegative: 'Asset number of decimals is negative',\n    assetDecimalsNumberIsNotInteger: 'Asset number of decimals isn\\'t an integer',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol',\n    invalidCreatedDate: 'Created date is invalid',\n    invalidExpiredDate: 'Expired date is invalid',\n    paymentLifetimeIsShort: 'Payment lifetime is short'\n  } as const;\n  static readonly minimumPaymentLifetime = 600000; // 10 * 60 * 1000;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Payment | UnsignedPayment>> = [\n    payment => payment.type !== PaymentType.Payment ? [PaymentValidator.errors.invalidType] : undefined,\n    payment => validateTargetAddress(payment.targetAddress, PaymentValidator.errors),\n    payment => validateId(payment.id, PaymentValidator.errors),\n    payment => validateAmount(payment.amount, PaymentValidator.errors),\n    payment => validatePaymentAsset(payment.asset, PaymentValidator.errors),\n    payment => validateData(payment.data, PaymentValidator.errors),\n    payment => validateUrl(payment.successUrl, PaymentValidator.successUrlErrors),\n    payment => validateUrl(payment.cancelUrl, PaymentValidator.cancelUrlErrors),\n    payment => validateCreatedDate(payment.created, PaymentValidator.errors),\n    payment => validateExpiredDate(payment.expired, payment.created, PaymentValidator.minimumPaymentLifetime, PaymentValidator.errors),\n  ];\n\n  protected readonly invalidPaymentObjectError = PaymentValidator.errors.invalidPaymentObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidSuccessUrl,\n    invalidProtocol: PaymentValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidCancelUrl,\n    invalidProtocol: PaymentValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","import type { Donation, UnsignedDonation } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport { validateTargetAddress, validateDesiredAmount, validateDonationAsset, validateUrl, validateData } from './validationMethods';\n\nexport class DonationValidator extends PaymentValidatorBase<Donation | UnsignedDonation> {\n  static readonly errors = {\n    invalidDonationObject: 'Donation is undefined or not object',\n    invalidType: 'Donation type is invalid',\n    invalidData: 'Donation data is invalid',\n    invalidAmount: 'Desired amount is invalid',\n    amountIsNonPositive: 'Desired amount is less than or equal to zero',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidAsset: 'Desired asset is invalid',\n    invalidAssetAddress: 'Desired asset address is invalid',\n    assetAddressIsNotContractAddress: 'Desired asset address isn\\'t a contract address',\n    assetAddressHasInvalidLength: 'Desired asset address has an invalid address',\n    invalidAssetId: 'Asset Id is invalid',\n    assetIdIsNegative: 'Asset Id is negative',\n    assetIdIsNotInteger: 'Asset Id isn\\'t an integer',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol'\n  } as const;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Donation | UnsignedDonation>> = [\n    donation => donation.type !== PaymentType.Donation ? [DonationValidator.errors.invalidType] : undefined,\n    donation => validateData(donation.data, DonationValidator.errors),\n    donation => validateTargetAddress(donation.targetAddress, DonationValidator.errors),\n    donation => validateDesiredAmount(donation.desiredAmount, DonationValidator.errors),\n    donation => validateDonationAsset(donation.desiredAsset, DonationValidator.errors),\n    donation => validateUrl(donation.successUrl, DonationValidator.successUrlErrors),\n    donation => validateUrl(donation.cancelUrl, DonationValidator.cancelUrlErrors)\n  ];\n\n  protected readonly invalidPaymentObjectError = DonationValidator.errors.invalidDonationObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidSuccessUrl,\n    invalidProtocol: DonationValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidCancelUrl,\n    invalidProtocol: DonationValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","export abstract class StateModel {\n    protected constructor() {\n    // All derived classes should be static\n    }\n}\n","export interface PublicEventEmitter<T extends readonly unknown[]> {\n    addListener(listener: (...args: T) => void): this;\n    removeListener(listener: (...args: T) => void): this;\n    removeAllListeners(): this;\n}\n\nexport class EventEmitter<T extends readonly unknown[]> implements PublicEventEmitter<T> {\n    private listeners: Set<(...args: T) => void> = new Set();\n\n    addListener(listener: (...args: T) => void) {\n        this.listeners.add(listener);\n        return this;\n    }\n\n    removeListener(listener: (...args: T) => void) {\n        if (this.listeners.has(listener))\n            this.listeners.delete(listener);\n        return this;\n    }\n\n    removeAllListeners() {\n        this.listeners = new Set();\n        return this;\n    }\n\n    emit(...args: T) {\n        if (!this.listeners.size)\n            return;\n\n        if (this.listeners.size === 1) {\n            this.listeners.values().next().value(...args);\n        } else {\n            // We copy listeners to prevent an unbounded loop if there is the adding of a new event handler inside the handler; \n            [...this.listeners].forEach(listener => listener(...args));\n        }\n    }\n}\n","import { SerializedFieldType } from './serializedFieldType';\n\nexport class ObjectSerializationValidator<T extends Record<string | number, unknown>> {\n  private _minObjectFieldsCount: number | undefined;\n\n  constructor(\n    protected readonly objectFieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>\n  ) {\n  }\n\n  private get minObjectFieldsCount() {\n    if (!this._minObjectFieldsCount) {\n      let count = 0;\n      for (const info of this.objectFieldTypes) {\n        if (typeof info[1] === 'string' ? info[1] !== 'undefined' : info[1].every(type => type !== 'undefined'))\n          count++;\n      }\n\n      this._minObjectFieldsCount = count;\n    }\n\n    return this._minObjectFieldsCount;\n  }\n\n  private get maxObjectFieldsCount() {\n    return this.objectFieldTypes.size;\n  }\n\n  validate(value: T): value is T {\n    if (!value)\n      return false;\n\n    const fieldNames = Object.getOwnPropertyNames(value) as ReadonlyArray<keyof T>;\n\n    // Prevent the field checking if the deserializedValue has an invalid number of fields\n    if (fieldNames.length < this.minObjectFieldsCount || fieldNames.length > this.maxObjectFieldsCount)\n      return false;\n\n    for (const [fieldName, expectedFieldType] of this.objectFieldTypes) {\n      const fieldValue = value[fieldName];\n      const actualFieldType = fieldValue === null ? 'null' : typeof fieldValue;\n\n      if (Array.isArray(expectedFieldType)\n        ? !expectedFieldType.some(expectedType => actualFieldType === expectedType)\n        : actualFieldType !== expectedFieldType\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Serializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  serialize(value: T): string | null {\n    try {\n      if (!this.objectSerializationValidator.validate(value))\n        return null;\n\n      const jsonString = JSON.stringify(value);\n      return base64.encode(jsonString, 'base64url');\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Deserializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  deserialize(serializedValue: string): T | null {\n    try {\n      let value: T;\n\n      if (serializedValue) {\n        const serializedValueString = base64.decode(serializedValue, 'base64url');\n        value = JSON.parse(serializedValueString);\n      }\n      else\n        value = {} as T;\n\n      return this.objectSerializationValidator.validate(value)\n        ? value\n        : null;\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { SerializedPayment, SerializedPaymentAsset, SerializedPaymentSignature } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nconst _serializedPaymentAssetFieldTypes: ReadonlyMap<\n  keyof SerializedPaymentAsset, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPaymentAsset, SerializedFieldType | readonly SerializedFieldType[]>()\n  // address\n  .set('a', 'string')\n  // decimals\n  .set('d', 'number')\n  // id\n  .set('i', ['number', 'undefined', 'null']);\n\nconst _serializedPaymentSignatureFieldTypes: ReadonlyMap<\n  keyof SerializedPaymentSignature, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPaymentSignature, SerializedFieldType | readonly SerializedFieldType[]>()\n  // contract\n  .set('c', 'string')\n  // client\n  .set('cl', ['string', 'undefined', 'null'])\n  // signature.signingPublicKey\n  .set('k', 'string');\n\nexport const serializedPaymentFieldTypes: ReadonlyMap<\n  keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  // id\n  .set('i', 'string')\n  // amount\n  .set('a', 'string')\n  // target\n  .set('t', 'string')\n  // asset\n  .set('as', ['object', 'undefined', 'null'])\n  // .set('as', serializedPaymentAssetFieldTypes)\n  // data\n  .set('d', ['object', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null'])\n  // created\n  .set('c', 'number')\n  // expired\n  .set('e', ['number', 'undefined', 'null'])\n  // signature\n  .set('s', 'object');\n  // .set('s', serializedPaymentSignatureFieldTypes);\n","import type {\n  Payment, PaymentAsset, PaymentSignature,\n  SerializedPayment, SerializedPaymentAsset, SerializedPaymentSignature\n} from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentSerializer {\n  protected static readonly serializedPaymentBase64Serializer = new Base64Serializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  serialize(payment: Payment): string | null {\n    try {\n      const serializedPayment = this.mapPaymentToSerializedPayment(payment);\n      return PaymentSerializer.serializedPaymentBase64Serializer.serialize(serializedPayment);\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapPaymentToSerializedPayment(payment: Payment): SerializedPayment {\n    return {\n      i: payment.id,\n      a: payment.amount.toString(10),\n      t: payment.targetAddress,\n      as: payment.asset ? this.mapPaymentAssetToSerializedPaymentAsset(payment.asset) : undefined,\n      d: payment.data,\n      su: payment.successUrl?.toString(),\n      cu: payment.cancelUrl?.toString(),\n      c: payment.created.getTime(),\n      e: payment.expired?.getTime(),\n      s: this.mapPaymentSignatureToSerializedPaymentSignature(payment.signature)\n    };\n  }\n\n  protected mapPaymentAssetToSerializedPaymentAsset(paymentAsset: PaymentAsset): SerializedPaymentAsset {\n    return {\n      a: paymentAsset.address,\n      d: paymentAsset.decimals,\n      i: paymentAsset.id !== null ? paymentAsset.id : undefined\n    };\n  }\n\n  protected mapPaymentSignatureToSerializedPaymentSignature(paymentSignature: PaymentSignature): SerializedPaymentSignature {\n    return {\n      k: paymentSignature.signingPublicKey,\n      c: paymentSignature.contract,\n      cl: paymentSignature.client\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type {\n  Payment, PaymentAsset, PaymentSignature,\n  SerializedPayment, SerializedPaymentAsset, SerializedPaymentSignature\n} from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string): Payment | null {\n    try {\n      const serializedPayment = PaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: SerializedPayment): Payment {\n    return {\n      type: PaymentType.Payment,\n      id: serializedPayment.i,\n      amount: new BigNumber(serializedPayment.a),\n      targetAddress: serializedPayment.t,\n      asset: serializedPayment.as ? this.mapSerializedPaymentAssetToPaymentAsset(serializedPayment.as) : undefined,\n      data: serializedPayment.d,\n      successUrl: serializedPayment.su ? new URL(serializedPayment.su) : undefined,\n      cancelUrl: serializedPayment.cu ? new URL(serializedPayment.cu) : undefined,\n      created: new Date(serializedPayment.c),\n      expired: serializedPayment.e ? new Date(serializedPayment.e) : undefined,\n\n      signature: this.mapSerializedPaymentSignatureToPaymentSignature(serializedPayment.s)\n    };\n  }\n\n  protected mapSerializedPaymentAssetToPaymentAsset(serializedPaymentAsset: SerializedPaymentAsset): PaymentAsset {\n    return {\n      address: serializedPaymentAsset.a,\n      decimals: serializedPaymentAsset.d,\n      id: serializedPaymentAsset.i !== undefined ? serializedPaymentAsset.i : null\n    };\n  }\n\n  protected mapSerializedPaymentSignatureToPaymentSignature(serializedPaymentSignature: SerializedPaymentSignature): PaymentSignature {\n    return {\n      signingPublicKey: serializedPaymentSignature.k,\n      contract: serializedPaymentSignature.c,\n      client: serializedPaymentSignature.cl\n    };\n  }\n}\n","import { SerializedDonation, SerializedDonationAsset, SerializedDonationSignature } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nconst _serializedDonationAssetFieldTypes: ReadonlyMap<\n  keyof SerializedDonationAsset, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonationAsset, SerializedFieldType | readonly SerializedFieldType[]>()\n  // address\n  .set('a', 'string')\n  // id\n  .set('i', ['number', 'undefined', 'null']);\n\nconst _serializedDonationSignatureFieldTypes: ReadonlyMap<\n  keyof SerializedDonationSignature, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonationSignature, SerializedFieldType | readonly SerializedFieldType[]>()\n  // client\n  .set('cl', 'string')\n  // signature.signingPublicKey\n  .set('k', 'string');\n\nexport const serializedDonationFieldTypes: ReadonlyMap<\n  keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  // data\n  .set('d', ['object', 'undefined', 'null'])\n  // desiredAmount\n  .set('da', ['string', 'undefined', 'null'])\n  // desiredAsset\n  .set('das', ['object', 'undefined', 'null'])\n  // .set('das', serializedDonationAssetFieldTypes)\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null'])\n  // signature\n  .set('s', ['object', 'undefined', 'null']);\n  // .set('da', serializedDonationSignatureFieldTypes)\n","import type {\n  Donation, DonationAsset, DonationSignature,\n  SerializedDonation, SerializedDonationAsset, SerializedDonationSignature\n} from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nconst serializedEmptyObjectBase64 = 'e30';\nexport class DonationSerializer {\n  protected static readonly serializedDonationBase64Serializer = new Base64Serializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  serialize(donation: Donation): string | null {\n    try {\n      const serializedDonation = this.mapDonationToSerializedDonation(donation);\n      const serializedDonationBase64 = DonationSerializer.serializedDonationBase64Serializer.serialize(serializedDonation);\n\n      return serializedDonationBase64 === serializedEmptyObjectBase64 ? '' : serializedDonationBase64;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapDonationToSerializedDonation(donation: Donation): SerializedDonation {\n    return {\n      d: donation.data,\n      da: donation.desiredAmount?.toString(10),\n      das: donation.desiredAsset ? this.mapDonationAssetToSerializedDonationAsset(donation.desiredAsset) : undefined,\n      su: donation.successUrl?.toString(),\n      cu: donation.cancelUrl?.toString(),\n      s: donation.signature ? this.mapDonationSignatureToSerializedDonationSignature(donation.signature) : undefined\n    };\n  }\n\n  protected mapDonationAssetToSerializedDonationAsset(donationAsset: DonationAsset): SerializedDonationAsset {\n    return {\n      a: donationAsset.address,\n      i: donationAsset.id !== null ? donationAsset.id : undefined\n    };\n  }\n\n  protected mapDonationSignatureToSerializedDonationSignature(donationSignature: DonationSignature): SerializedDonationSignature {\n    return {\n      k: donationSignature.signingPublicKey,\n      cl: donationSignature.client\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type {\n  NonSerializedDonationSlice, Donation, DonationAsset, DonationSignature,\n  SerializedDonation, SerializedDonationSignature, SerializedDonationAsset,\n} from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class DonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = DonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: SerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      data: serializedDonation.d,\n      desiredAmount: serializedDonation.da ? new BigNumber(serializedDonation.da) : undefined,\n      desiredAsset: serializedDonation.das ? this.mapSerializedDonationAssetToDonationAsset(serializedDonation.das) : undefined,\n      successUrl: serializedDonation.su ? new URL(serializedDonation.su) : undefined,\n      cancelUrl: serializedDonation.cu ? new URL(serializedDonation.cu) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress,\n      signature: serializedDonation.s ? this.mapSerializedDonationSignatureToDonationSignature(serializedDonation.s) : undefined\n    };\n  }\n\n  protected mapSerializedDonationAssetToDonationAsset(serializedDonationAsset: SerializedDonationAsset): DonationAsset {\n    return {\n      address: serializedDonationAsset.a,\n      id: serializedDonationAsset.i !== undefined ? serializedDonationAsset.i : null\n    };\n  }\n\n  protected mapSerializedDonationSignatureToDonationSignature(serializedDonationSignature: SerializedDonationSignature): DonationSignature {\n    return {\n      signingPublicKey: serializedDonationSignature.k,\n      client: serializedDonationSignature.cl\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { PaymentValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { PaymentDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport type { PaymentSignature } from '../signing';\nimport { PaymentBase, PaymentType } from './paymentBase';\n\nexport interface Payment extends PaymentBase {\n  readonly type: PaymentType.Payment;\n  readonly id: string;\n  readonly amount: BigNumber;\n  readonly asset?: PaymentAsset;\n  readonly created: Date;\n  readonly expired?: Date;\n  readonly data?: PaymentData;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n  readonly signature: PaymentSignature;\n}\n\nexport type UnsignedPayment = Omit<Payment, 'signature'>;\n\ninterface PaymentData {\n  readonly [fieldName: string]: unknown;\n}\n\nexport interface PaymentAsset {\n  readonly address: string;\n  readonly decimals: number;\n  readonly id: number | null;\n}\n\nexport class Payment extends StateModel {\n  static readonly defaultDeserializer: PaymentDeserializer = new PaymentDeserializer();\n  static readonly defaultValidator: PaymentValidator = new PaymentValidator();\n\n  static validate(payment: Payment) {\n    return Payment.defaultValidator.validate(payment);\n  }\n\n  static deserialize(serializedPayment: string): Payment | null {\n    return Payment.defaultDeserializer.deserialize(serializedPayment);\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { DonationValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { DonationDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport type { DonationSignature } from '../signing';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedDonationSlice } from './serializedDonation';\n\nexport interface Donation extends PaymentBase {\n  readonly type: PaymentType.Donation;\n  readonly data?: DonationData;\n  readonly desiredAmount?: BigNumber;\n  readonly desiredAsset?: DonationAsset;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n  readonly signature?: DonationSignature;\n}\n\nexport type UnsignedDonation = Omit<Donation, 'signature'>;\n\ninterface DonationData {\n  readonly [fieldName: string]: unknown;\n}\n\nexport interface DonationAsset {\n  readonly address: string;\n  readonly id: number | null;\n}\n\nexport class Donation extends StateModel {\n  static readonly defaultDeserializer: DonationDeserializer = new DonationDeserializer();\n  static readonly defaultValidator: DonationValidator = new DonationValidator();\n\n  static validate(donation: Donation) {\n    return Donation.defaultValidator.validate(donation);\n  }\n\n  static deserialize(serializedDonation: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    return Donation.defaultDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice);\n  }\n}\n\n","import { text } from '../../utils';\n\nexport enum PaymentUrlType {\n  Base64 = 0\n}\n\nconst encodedPaymentUrlTypeMap = new Map<PaymentUrlType, string>(\n  Object.keys(PaymentUrlType)\n    .filter(value => !isNaN(+value))\n    .map(value => [+value, text.padStart(value, 2, '0')])\n);\n\nexport const getEncodedPaymentUrlType = (paymentUrlType: PaymentUrlType) => encodedPaymentUrlTypeMap.get(paymentUrlType) || '';\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ParameterizedRouteFactory = (...args: any[]) => string;\nexport type ParameterizedRoute<Factory extends ParameterizedRouteFactory> = Factory & {\n  readonly template: string;\n};\n\nexport const getParameterizedRoute = <Factory extends ParameterizedRouteFactory>(\n  factory: Factory, template: string\n): ParameterizedRoute<Factory> => {\n  (factory as Factory & { template: string }).template = template;\n\n  return factory as ParameterizedRoute<Factory>;\n};\n","export enum ServiceOperationType {\n  Payment = 1,\n  Donation = 2,\n\n  All = Payment | Donation\n}\n","import { optimization } from '../../utils';\nimport { Network, networks } from '../blockchain/network';\nimport { ServiceOperationType } from './serviceOperationType';\nimport { ServiceSigningKey } from './serviceSigningKey';\n\nexport interface Service {\n  readonly name: string;\n  readonly links: readonly string[];\n  readonly description?: string;\n  readonly iconUrl?: string;\n  readonly version: number;\n  readonly metadata: string;\n\n  readonly contractAddress: string;\n  readonly network: Network;\n  readonly allowedTokens: {\n    readonly tez: boolean;\n    readonly assets: readonly string[];\n  }\n  readonly allowedOperationType: ServiceOperationType;\n\n  readonly owner: string;\n  readonly paused: boolean;\n  readonly deleted: boolean;\n  readonly signingKeys: ReadonlyMap<ServiceSigningKey['publicKey'], ServiceSigningKey>;\n}\n\nexport const emptyService: Service = {\n  name: '',\n  description: '',\n  links: optimization.emptyArray,\n  version: 0,\n  metadata: '',\n  contractAddress: '',\n  allowedTokens: {\n    tez: true,\n    assets: optimization.emptyArray\n  },\n  allowedOperationType: ServiceOperationType.Payment,\n  owner: '',\n  paused: false,\n  deleted: false,\n  network: networks.mainnet,\n  signingKeys: optimization.emptyMap\n};\n","export enum OperationType {\n  Payment = 1,\n  Donation = 2\n}\n","export enum OperationDirection {\n  Incoming = 0,\n  Outgoing = 1\n}\n","export enum OperationStatus {\n  Pending = 0,\n  Success = 1,\n  Cancelled = 2\n}\n","\nimport { converters } from '../../utils';\nimport { StateModel } from '../core';\nimport { Operation } from './operation';\nimport { OperationDirection } from './operationDirection';\nimport { OperationType } from './operationType';\n\nexport interface DonationOperation extends Operation {\n  readonly type: OperationType.Donation;\n  readonly direction: OperationDirection.Incoming;\n  readonly payload?: DonationOperationPayload;\n}\n\nexport interface DonationOperationPayload {\n  readonly value: { readonly [fieldName: string]: unknown; } | null;\n  readonly valueString: string;\n  readonly encodedValue: string;\n}\n\nexport class DonationOperation extends StateModel {\n  static parsePayload(encodedValue: string): DonationOperationPayload {\n    const valueString = converters.bytesToString(encodedValue);\n\n    let value: DonationOperationPayload['value'] = null;\n    try { value = JSON.parse(valueString); } catch { /**/ }\n\n    return {\n      value,\n      valueString,\n      encodedValue,\n    };\n  }\n}\n","\nimport type { UnsignedDonation, EncodedDonationSignPayload } from '../../models';\n\nexport class DonationSignPayloadEncoder {\n  encode(donation: UnsignedDonation): EncodedDonationSignPayload {\n    return {\n      clientSignPayload: this.getClientSignPayload(donation)\n    };\n  }\n\n  protected getClientSignPayload(donation: UnsignedDonation): EncodedDonationSignPayload['clientSignPayload'] {\n    return (\n      (donation.successUrl ? donation.successUrl.href : '')\n      + (donation.cancelUrl ? donation.cancelUrl.href : '')\n    ) || null;\n  }\n}\n","import type { Payment } from '../../models';\n\nexport interface ClientSignPayload {\n  readonly successUrl?: string;\n  readonly cancelUrl?: string;\n  readonly data?: Payment['data'];\n}\n\n// 'Tezos Signed Message: '\nexport const tezosSignedMessagePrefixBytes = '54657a6f73205369676e6564204d6573736167653a20';\n// 'Payment Client Data: '\nexport const tezosPaymentsClientSignedMessagePrefixBytes = '5061796d656e7420436c69656e7420446174613a20';\n","import type { MichelsonType } from '@taquito/michel-codec';\n\nexport const contractPaymentInTezSignPayloadMichelsonType: MichelsonType = {\n  prim: 'pair',\n  args: [\n    {\n      prim: 'pair',\n      args: [\n        { prim: 'string' },\n        { prim: 'address' }\n      ]\n    },\n    { prim: 'mutez' }\n  ]\n};\n\nexport const contractPaymentInAssetSignPayloadMichelsonType: MichelsonType = {\n  prim: 'pair',\n  args: [\n    {\n      prim: 'pair',\n      args: [\n        {\n          prim: 'pair',\n          args: [\n            { prim: 'string' },\n            { prim: 'address' }\n          ]\n        },\n        {\n          prim: 'pair',\n          args: [\n            { prim: 'nat' },\n            { prim: 'address' }\n          ]\n        }\n      ]\n    },\n    {\n      prim: 'option',\n      args: [{ prim: 'nat' }]\n    }\n  ]\n};\n","\nimport { MichelsonType, packDataBytes } from '@taquito/michel-codec';\n\nimport type { UnsignedPayment, EncodedPaymentSignPayload } from '../../models';\nimport { converters, text } from '../../utils';\nimport { tezToMutez, tokensAmountToNat } from '../../utils/converters';\nimport { ClientSignPayload, tezosPaymentsClientSignedMessagePrefixBytes, tezosSignedMessagePrefixBytes } from './clientSignPayload';\nimport { contractPaymentInTezSignPayloadMichelsonType, contractPaymentInAssetSignPayloadMichelsonType } from './michelsonTypes';\n\nexport class PaymentSignPayloadEncoder {\n  protected static readonly contractPaymentInTezSignPayloadMichelsonType: MichelsonType = contractPaymentInTezSignPayloadMichelsonType;\n  protected static readonly contractPaymentInAssetSignPayloadMichelsonType: MichelsonType = contractPaymentInAssetSignPayloadMichelsonType;\n\n  encode(payment: UnsignedPayment): EncodedPaymentSignPayload {\n    return {\n      contractSignPayload: this.getContractSignPayload(payment),\n      clientSignPayload: this.getClientSignPayload(payment)\n    };\n  }\n\n  protected getContractSignPayload(payment: UnsignedPayment): EncodedPaymentSignPayload['contractSignPayload'] {\n    const signPayload = payment.asset\n      ? packDataBytes(\n        {\n          prim: 'Pair',\n          args: [\n            {\n              prim: 'Pair',\n              args: [\n                {\n                  prim: 'Pair',\n                  args: [\n                    { string: payment.id },\n                    { string: payment.targetAddress }\n                  ]\n                },\n                {\n                  prim: 'Pair',\n                  args: [\n                    { int: tokensAmountToNat(payment.amount, payment.asset.decimals).toString(10) },\n                    { string: payment.asset.address }\n                  ]\n                }\n              ]\n            },\n            payment.asset.id !== undefined && payment.asset.id !== null\n              ? { prim: 'Some', args: [{ int: payment.asset.id.toString() }] }\n              : { prim: 'None' }\n          ]\n        },\n        contractPaymentInAssetSignPayloadMichelsonType\n      )\n      : packDataBytes(\n        {\n          prim: 'Pair',\n          args: [\n            {\n              prim: 'Pair',\n              args: [\n                { string: payment.id },\n                { string: payment.targetAddress }\n              ]\n            },\n            { int: tezToMutez(payment.amount).toString(10) }\n          ]\n        },\n        contractPaymentInTezSignPayloadMichelsonType\n      );\n\n    return '0x' + signPayload.bytes;\n  }\n\n  protected getClientSignPayload(payment: UnsignedPayment): EncodedPaymentSignPayload['clientSignPayload'] {\n    const clientSignPayload: ClientSignPayload = {\n      data: payment.data,\n      successUrl: payment.successUrl?.href,\n      cancelUrl: payment.cancelUrl?.href\n    };\n    const serializedClientSignPayload = JSON.stringify(\n      clientSignPayload,\n      (_key, value) => value !== undefined && value !== null && value !== '' ? value : undefined\n    );\n    if (serializedClientSignPayload === '{}')\n      return null;\n\n    const serializedClientSignPayloadBytes = converters.stringToBytes(serializedClientSignPayload);\n    const signedMessageBytes = tezosSignedMessagePrefixBytes + tezosPaymentsClientSignedMessagePrefixBytes + serializedClientSignPayloadBytes;\n    const messageLength = text.padStart((signedMessageBytes.length / 2).toString(16), 8, '0');\n    const result = '0x0501' + messageLength + signedMessageBytes;\n\n    return result;\n  }\n}\n","import { b58cencode, prefix } from '@taquito/utils';\nimport sodium from 'libsodium-wrappers';\n\nimport { EncodedKeyPair, KeyPair, KeyPairGeneratorResult, KeyType } from '../../models';\nimport type { KeyPairGenerator } from './keyPairGenerator';\n\nexport class Ed25519KeyGenerator implements KeyPairGenerator {\n  private _isInitialized = false;\n\n  get isInitialized() {\n    return this._isInitialized;\n  }\n\n  generate(): KeyPairGeneratorResult {\n    if (!this.isInitialized)\n      throw new Error('Ed25519 key generator is not initialized');\n\n    const keyPair = sodium.crypto_sign_keypair('uint8array');\n    const raw: KeyPair = {\n      keyType: KeyType.Ed25519,\n      privateKey: keyPair.privateKey,\n      publicKey: keyPair.publicKey,\n    };\n\n    const encoded: EncodedKeyPair = {\n      keyType: KeyType.Ed25519,\n      privateKey: b58cencode(raw.privateKey, prefix['edsk']),\n      publicKey: b58cencode(raw.publicKey, prefix['edpk']),\n    };\n\n    return {\n      raw,\n      encoded\n    };\n  }\n\n  async initialize(): Promise<void> {\n    await sodium.ready;\n    this._isInitialized = true;\n  }\n\n  static async create(): Promise<Ed25519KeyGenerator> {\n    const instance = new Ed25519KeyGenerator();\n    await instance.initialize();\n\n    return instance;\n  }\n}\n","import { b58cencode, prefix } from '@taquito/utils';\nimport { ec } from 'elliptic';\n\nimport { EncodedKeyPair, KeyPair, KeyPairGeneratorResult, KeyType } from '../../models';\nimport type { KeyPairGenerator } from './keyPairGenerator';\n\nexport class EllipticCurveKeyGenerator implements KeyPairGenerator {\n  protected static readonly curveInfo = {\n    secp256k1: {\n      name: 'secp256k1',\n      keyType: KeyType.Secp256k1,\n      privateKeyPrefix: prefix['spsk'],\n      publicKeyPrefix: prefix['sppk'],\n    },\n    p256: {\n      name: 'p256',\n      keyType: KeyType.P256,\n      privateKeyPrefix: prefix['p2sk'],\n      publicKeyPrefix: prefix['p2pk'],\n    },\n  } as const;\n\n  protected readonly ec: ec;\n  protected readonly curveInfo: typeof EllipticCurveKeyGenerator.curveInfo[keyof typeof EllipticCurveKeyGenerator.curveInfo];\n\n  constructor(curveName: keyof typeof EllipticCurveKeyGenerator.curveInfo) {\n    this.ec = new ec(curveName);\n    this.curveInfo = EllipticCurveKeyGenerator.curveInfo[curveName];\n  }\n\n  generate(): KeyPairGeneratorResult {\n    const keyPair = this.ec.genKeyPair();\n    console.log(keyPair);\n\n    const publicBasePoint = keyPair.getPublic();\n    const publicPointX = publicBasePoint.getX().toArray();\n    const publicPointY = publicBasePoint.getY().toArray();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const firstByte = publicPointY[publicPointY.length - 1]! % 2 ? 3 : 2;\n\n    const privateKey = new Uint8Array(keyPair.getPrivate().toArray());\n    const pad = new Array(32).fill(0);\n    const publicKey = new Uint8Array([firstByte].concat(pad.concat(publicPointX).slice(-32)));\n\n    const raw: KeyPair = {\n      keyType: KeyType.P256,\n      privateKey,\n      publicKey,\n    };\n\n    const encoded: EncodedKeyPair = {\n      keyType: this.curveInfo.keyType,\n      privateKey: b58cencode(privateKey, this.curveInfo.privateKeyPrefix),\n      publicKey: b58cencode(publicKey, this.curveInfo.publicKeyPrefix),\n    };\n\n    return {\n      raw,\n      encoded\n    };\n  }\n}\n"],"names":["isBase64UrlFormatSupported","Buffer","isEncoding","decode","base64String","format","base64UrlPreprocessor","prepareValueForDecoding","from","toString","encode","value","encodedValue","prepareEncodedValue","base64value","split","replace","length","Error","stringToUint8Array","hex","integers","match","map","val","parseInt","Uint8Array","stringToBytes","bytesToString","objectToBytes","JSON","stringify","bytesToObject","parse","tokensAmountToNat","tokensAmount","decimals","BigNumber","multipliedBy","integerValue","numberToTokensAmount","div","tezToMutez","tez","mutezToTez","mutez","isArray","arg","Array","isReadonlyArray","isPlainObject","isPlainObjectLodashFunction","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","i","memoize","func","lastArgs","lastResult","arguments","apply","emptyArray","emptyObject","emptyMap","Map","emptySet","Set","zeroBigNumber","is","x","y","shallowEqual","objA","objB","_typeof","keysA","Object","keys","keysB","prototype","hasOwnProperty","call","capitalize","toLocaleUpperCase","slice","getAvatarText","maxLength","result","j","isWord","stringPad","string","isStart","fillString","String","padStart","undefined","stringLength","fillLength","filler","repeat","Math","ceil","padEnd","wait","ms","Promise","resolve","setTimeout","IconId","getInvalidLinkInfo","link","rawLink","formattedLink","displayLink","icon","Common","prepareFormattedLink","trim","prepareDisplayLink","socialMediaLinkInfoProvider","baseUrl","startsWith","telegramLinkInfoProvider","Telegram","facebookLinkInfoProvider","Facebook","twitterLinkInfoProvider","Twitter","instagramLinkInfoProvider","Instagram","gitHubLinkInfoProvider","GitHub","redditLinkInfoProvider","Reddit","emailCheckingRegEx","emailLinkInfoProvider","preparedFormattedLink","test","Email","javascriptLinkInfoProvider","urlSchemeRegEx","commonLinkInfoProvider","editLinkInfoProvider","ServiceLinkHelper","isEditMode","linkInfoProviders","provider","linkInfo","linkInfoIsValid","PaymentType","PaymentValidatorBase","payment","bail","guards","invalidPaymentObjectError","failedValidationResults","validationMethods","validationMethod","currentFailedValidationResults","concat","networksInternal","mainnet","id","name","hangzhounet","networks","networksCollection","values","networkIdRegExp","networkNameRegExp","tezosMeta","symbol","thumbnailUri","unknownAssetMeta","tokenWhitelist","network","type","contractAddress","metadata","tokenWhitelistMap","nc","filter","t","contractAddressPrefixes","implicitAddressPrefixes","addressPrefixes","tezosInfo","addressLength","KeyType","URL","NodeURL","globalThis","validateTargetAddress","targetAddress","errors","invalidTargetAddress","targetAddressHasInvalidLength","some","prefix","targetAddressIsNotNetworkAddress","validateId","invalidId","emptyId","validateAmount","amount","isBigNumber","isNaN","isFinite","invalidAmount","isZero","isNegative","amountIsNonPositive","validateDesiredAmount","desiredAmount","validatePaymentAsset","asset","invalidAsset","validateAsset","validateAssetDecimals","validateDonationAsset","validateCreatedDate","date","Date","getTime","invalidCreatedDate","validateUrl","url","invalidUrl","protocol","indexOf","invalidProtocol","validateExpiredDate","expiredDate","createdDate","minimumPaymentLifetime","invalidExpiredDate","paymentLifetimeIsShort","validateData","data","invalidData","validateAssetAddress","address","validateAssetId","assetAddress","invalidAssetAddress","assetAddressHasInvalidLength","assetAddressIsNotContractAddress","assetId","Number","invalidAssetId","assetIdIsNegative","isInteger","assetIdIsNotInteger","assetDecimals","invalidAssetDecimals","assetDecimalsNumberIsNegative","assetDecimalsNumberIsNotInteger","PaymentValidator","Payment","invalidType","successUrl","successUrlErrors","cancelUrl","cancelUrlErrors","created","expired","invalidPaymentObject","invalidSuccessUrl","successUrlHasInvalidProtocol","invalidCancelUrl","cancelUrlHasInvalidProtocol","DonationValidator","donation","Donation","desiredAsset","invalidDonationObject","StateModel","EventEmitter","listener","listeners","add","has","args","size","forEach","ObjectSerializationValidator","objectFieldTypes","_minObjectFieldsCount","count","info","every","fieldNames","getOwnPropertyNames","minObjectFieldsCount","maxObjectFieldsCount","fieldName","expectedFieldType","fieldValue","actualFieldType","expectedType","Base64Serializer","fieldTypes","objectSerializationValidator","validate","jsonString","base64","Base64Deserializer","serializedValue","serializedValueString","set","serializedPaymentFieldTypes","PaymentSerializer","serializedPayment","mapPaymentToSerializedPayment","serializedPaymentBase64Serializer","serialize","as","mapPaymentAssetToSerializedPaymentAsset","d","su","cu","c","e","s","mapPaymentSignatureToSerializedPaymentSignature","signature","paymentAsset","paymentSignature","k","signingPublicKey","contract","cl","client","PaymentDeserializer","serializedPaymentBase64","serializedPaymentBase64Deserializer","deserialize","mapSerializedPaymentToPayment","mapSerializedPaymentAssetToPaymentAsset","mapSerializedPaymentSignatureToPaymentSignature","serializedPaymentAsset","serializedPaymentSignature","serializedDonationFieldTypes","serializedEmptyObjectBase64","DonationSerializer","serializedDonation","mapDonationToSerializedDonation","serializedDonationBase64","serializedDonationBase64Serializer","da","das","mapDonationAssetToSerializedDonationAsset","mapDonationSignatureToSerializedDonationSignature","donationAsset","donationSignature","DonationDeserializer","nonSerializedDonationSlice","serializedDonationBase64Deserializer","mapSerializedDonationToDonation","mapSerializedDonationAssetToDonationAsset","mapSerializedDonationSignatureToDonationSignature","serializedDonationAsset","serializedDonationSignature","defaultValidator","defaultDeserializer","PaymentUrlType","encodedPaymentUrlTypeMap","text","getEncodedPaymentUrlType","paymentUrlType","get","getParameterizedRoute","factory","template","ServiceOperationType","emptyService","description","links","optimization","version","allowedTokens","assets","allowedOperationType","owner","paused","deleted","signingKeys","OperationType","OperationDirection","OperationStatus","DonationOperation","valueString","converters","DonationSignPayloadEncoder","clientSignPayload","getClientSignPayload","href","tezosSignedMessagePrefixBytes","tezosPaymentsClientSignedMessagePrefixBytes","contractPaymentInTezSignPayloadMichelsonType","prim","contractPaymentInAssetSignPayloadMichelsonType","PaymentSignPayloadEncoder","contractSignPayload","getContractSignPayload","signPayload","packDataBytes","bytes","serializedClientSignPayload","_key","serializedClientSignPayloadBytes","signedMessageBytes","messageLength","Ed25519KeyGenerator","_isInitialized","isInitialized","keyPair","sodium","crypto_sign_keypair","raw","keyType","Ed25519","privateKey","publicKey","encoded","b58cencode","ready","instance","initialize","EllipticCurveKeyGenerator","curveName","ec","curveInfo","genKeyPair","console","log","publicBasePoint","getPublic","publicPointX","getX","toArray","publicPointY","getY","firstByte","getPrivate","pad","fill","P256","privateKeyPrefix","publicKeyPrefix","secp256k1","Secp256k1","p256"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAMA,0BAA0B,GAAGC,aAAM,CAACC,UAAP,CAAkB,WAAlB,CAAnC;AAEO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,YAAD;MAAuBC,6EAA4B;AACvE,MAAIA,MAAM,KAAK,QAAX,IAAuBA,MAAM,KAAK,WAAtC,EACE,OAAO,EAAP;;AAEF,MAAI,CAACL,0BAAL,EAAiC;AAC/BK,IAAAA,MAAM,GAAG,QAAT;AACAD,IAAAA,YAAY,GAAGE,qBAAqB,CAACC,uBAAtB,CAA8CH,YAA9C,CAAf;AACD;;AAED,SAAOH,aAAM,CAACO,IAAP,CAAYJ,YAAZ,EAA0BC,MAA1B,EAAkCI,QAAlC,CAA2C,MAA3C,CAAP;AACD,CAVM;AAYA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD;MAAgBN,6EAA4B;AAChE,MAAIA,MAAM,KAAK,QAAX,IAAuBA,MAAM,KAAK,WAAtC,EACE,OAAO,EAAP;AAEF,MAAIL,0BAAJ,EACE,OAAOC,aAAM,CAACO,IAAP,CAAYG,KAAZ,EAAmB,MAAnB,EAA2BF,QAA3B,CAAoCJ,MAApC,CAAP;AAEF,MAAMO,YAAY,GAAGX,aAAM,CAACO,IAAP,CAAYG,KAAZ,EAAmB,MAAnB,EAA2BF,QAA3B,CAAoC,QAApC,CAArB;AACA,SAAOH,qBAAqB,CAACO,mBAAtB,CAA0CD,YAA1C,CAAP;AACD,CATM;AAWP,IAAMN,qBAAqB,GAAG;AAC5B;AACAO,EAAAA,mBAAmB,EAAE,6BAACC,WAAD;AAAA,WAAyBA,WAAW,CACtDC,KAD2C,CACrC,GADqC,EAChC,CADgC,EAE3CC,OAF2C,CAEnC,KAFmC,EAE5B,GAF4B,EAG3CA,OAH2C,CAGnC,KAHmC,EAG5B,GAH4B,CAAzB;AAAA,GAFO;AAO5BT,EAAAA,uBAAuB,EAAE,iCAACO,WAAD;AACvBA,IAAAA,WAAW,GAAGA,WAAW,CACtBE,OADW,CACH,IADG,EACG,GADH,EAEXA,OAFW,CAEH,IAFG,EAEG,GAFH,CAAd;;AAIA,YAAQF,WAAW,CAACG,MAAZ,GAAqB,CAA7B;AACE,WAAK,CAAL;AAAQ,eAAOH,WAAP;;AACR,WAAK,CAAL;AAAQ,eAAOA,WAAW,GAAG,IAArB;;AACR,WAAK,CAAL;AAAQ,eAAOA,WAAW,GAAG,GAArB;;AACR;AACE,cAAM,IAAII,KAAJ,CAAU,yBAAV,CAAN;AALJ;AAOD;AAnB2B,CAA9B;;;;;;;;AC1BO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,GAAD;;;AAChC,MAAMC,QAAQ,iBAAGD,GAAG,CAACE,KAAJ,CAAU,cAAV,CAAH,+CAAG,WAA2BC,GAA3B,CAA+B,UAAAC,GAAG;AAAA,WAAIC,QAAQ,CAACD,GAAD,EAAM,EAAN,CAAZ;AAAA,GAAlC,CAAjB;;AAGA,SAAO,IAAIE,UAAJ,CAAeL,QAAf,CAAP;AACD,CALM;AAOA,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAAChB,KAAD;AAAA,SAA2BV,aAAM,CAACO,IAAP,CAAYG,KAAZ,EAAmB,MAAnB,EAA2BF,QAA3B,CAAoC,KAApC,CAA3B;AAAA,CAAtB;AACA,IAAMmB,aAAa,GAAG,SAAhBA,aAAgB,CAACjB,KAAD;AAAA,SAA2BV,aAAM,CAACO,IAAP,CAAYW,kBAAkB,CAACR,KAAD,CAA9B,EAAuCF,QAAvC,CAAgD,MAAhD,CAA3B;AAAA,CAAtB;AAEA,IAAMoB,aAAa,GAAG,SAAhBA,aAAgB,CAAClB,KAAD;AAAA,SAA4CgB,aAAa,CAACG,IAAI,CAACC,SAAL,CAAepB,KAAf,CAAD,CAAzD;AAAA,CAAtB;AACA,IAAMqB,aAAa,GAAG,SAAhBA,aAAgB,CAA8DrB,KAA9D;AAC3B,MAAI;AACF,WAAOmB,IAAI,CAACG,KAAL,CAAWL,aAAa,CAACjB,KAAD,CAAxB,CAAP;AACD,GAFD,CAGA,gBAAM;AACJ,WAAO,IAAP;AACD;AACF,CAPM;AASA,IAAMuB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,YAAD,EAAmCC,QAAnC;AAC/B,SAAO,IAAIC,6BAAJ,CAAcF,YAAd,EAA4BG,YAA5B,UAAyC,EAAzC,EAA+CF,QAA/C,GAAyDG,YAAzD,EAAP;AACD,CAFM;AAIA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAC7B,KAAD,EAA4ByB,QAA5B;AAClC,SAAO,IAAIC,6BAAJ,CAAc1B,KAAd,EAAqB4B,YAArB,GAAoCE,GAApC,UAAwC,EAAxC,EAA8CL,QAA9C,EAAP;AACD,CAFM;AAIA,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD;AAAA,SAAwCT,iBAAiB,CAACS,GAAD,EAAM,CAAN,CAAzD;AAAA,CAAnB;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAA0CL,oBAAoB,CAACK,KAAD,EAAQ,CAAR,CAA9D;AAAA,CAAnB;;;;;;;;;;;;;;;AC9BA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD;AACrB,SAAOC,KAAK,CAACF,OAAN,CAAcC,GAAd,CAAP;AACD,CAFM;AAIA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACF,GAAD;AAC7B,SAAOC,KAAK,CAACF,OAAN,CAAcC,GAAd,CAAP;AACD,CAFM;AAIA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAA8DvC,KAA9D;AAC3B,SAAOwC,+CAA2B,CAACxC,KAAD,CAAlC;AACD,CAFM;;;;;;;;;ACXP,IAAMyC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAIC,CAAJ,EAAUC,CAAV;AAAA,SAAmBD,CAAC,KAAKC,CAAzB;AAAA,CAA7B;;AAEA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAA8BC,aAA9B,EAAsEC,IAAtE,EAA+EC,IAA/E;AAC/B,MAAID,IAAI,KAAK,IAAT,IAAiBC,IAAI,KAAK,IAA1B,IAAkCD,IAAI,CAACxC,MAAL,KAAgByC,IAAI,CAACzC,MAA3D,EAAmE;AAC/D,WAAO,KAAP;AACH;;;AAGD,MAAMA,MAAM,GAAGwC,IAAI,CAACxC,MAApB;;AACA,OAAK,IAAI0C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1C,MAApB,EAA4B0C,CAAC,EAA7B,EAAiC;AAC7B,QAAI,CAACH,aAAa,CAACC,IAAI,CAACE,CAAD,CAAL,EAAUD,IAAI,CAACC,CAAD,CAAd,CAAlB,EAAsC;AAClC,aAAO,KAAP;AACH;AACJ;;AAED,SAAO,IAAP;AACH,CAdD;AAgBA;;AACA;;AACA;;;IACaC,OAAO,GAAG,SAAVA,OAAU,CAAmCC,IAAnC;MAA6CL,oFAAgBJ;AAChF,MAAIU,QAAQ,GAAsB,IAAlC;AACA,MAAIC,UAAU,GAAY,IAA1B;AAEA,SAAQ;AACJ,QAAI,CAACR,0BAA0B,CAACC,aAAD,EAAgBM,QAAhB,EAA0BE,SAA1B,CAA/B,EAAqE;AACjE;AACA;AACAD,MAAAA,UAAU,GAAGF,IAAI,CAACI,KAAL,CAAW,IAAX,EAAiBD,SAAjB,CAAb;AACH;;AAEDF,IAAAA,QAAQ,GAAGE,SAAX;AACA,WAAOD,UAAP;AACI,GATR;AAUH;AACD;;AACA;;AACA;;ACpCA;;AACA,IAAMG,UAAU,GAAU,EAA1B;AACA,IAAMC,WAAW,GAAG,EAApB;AACA,IAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AACA,IAAMC,QAAQ,GAAa,IAAIC,GAAJ,EAA3B;AACA,IAAMC,aAAa,GAAG,IAAInC,6BAAJ,CAAc,CAAd,CAAtB;AAEA,mBAAe;AACX6B,EAAAA,UAAU,EAAVA,UADW;AAEXE,EAAAA,QAAQ,EAARA,QAFW;AAGXE,EAAAA,QAAQ,EAARA,QAHW;AAIXH,EAAAA,WAAW,EAAXA,WAJW;AAKXK,EAAAA,aAAa,EAAbA;AALW,CAAf;;ACTA,IAAMC,EAAE,GAAG,SAALA,EAAK,CAACC,CAAD,EAAaC,CAAb;AACP,SAAQD,CAAC,KAAKC,CAAP,GACDD,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAAjB,IAAuB,IAAID,CAAL,KAAa,IAAIC,CADtC;AAAA,IAGDD,CAAC,KAAKA,CAAN,IAAWC,CAAC,KAAKA,CAHvB;AAIH,CALD;;SAOwBC,aAAaC,MAAeC;AAChD,MAAIL,EAAE,CAACI,IAAD,EAAOC,IAAP,CAAN,EACI,OAAO,IAAP;AAEJ,MAAIC,4BAAOF,IAAP,MAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAArC,IAA6CE,4BAAOD,IAAP,MAAgB,QAA7D,IAAyEA,IAAI,KAAK,IAAtF,EACI,OAAO,KAAP;AAEJ,MAAME,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYL,IAAZ,CAAd;AACA,MAAMM,KAAK,GAAGF,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAd;AAEA,MAAIE,KAAK,CAAC/D,MAAN,KAAiBkE,KAAK,CAAClE,MAA3B,EACI,OAAO,KAAP;;AAEJ,OAAK,IAAI0C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,KAAK,CAAC/D,MAA1B,EAAkC0C,CAAC,EAAnC,EAAuC;AACnC;;AACA;AAEA,QAAI,CAACsB,MAAM,CAACG,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,IAArC,EAA2CE,KAAK,CAACrB,CAAD,CAAhD,CAAD,IACG,CAACc,EAAE,CAAEI,IAAY,CAACG,KAAK,CAACrB,CAAD,CAAN,CAAd,EAA4BmB,IAAY,CAACE,KAAK,CAACrB,CAAD,CAAN,CAAxC,CADV,EAGI,OAAO,KAAP;AAEJ;;AACA;AACH;;AAED,SAAO,IAAP;AACH;;AClCM,IAAM4B,UAAU,GAAG,SAAbA,UAAa,CAAC5E,KAAD;AAAA;;AAAA,SAA2BA,KAAK,IAAK,YAAAA,KAAK,CAAC,CAAD,CAAL,oDAAU6E,iBAAV,MAAgC7E,KAAK,CAAC8E,KAAN,CAAY,CAAZ,CAArE;AAAA,CAAnB;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAC/E,KAAD;MAAgBgF,gFAAY;AACvD,MAAI,CAAChF,KAAD,IAAU,CAACgF,SAAf,EACE,OAAO,EAAP;AAEF,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIjC,CAAC,GAAG,CAAR,EAAWkC,CAAC,GAAG,CAAf,EAAkBC,MAAM,GAAG,KAAhC,EAAuCnC,CAAC,GAAGhD,KAAK,CAACM,MAAjD,EAAyD0C,CAAC,EAA1D,EAA8D;AAC5D,QAAI,CAACmC,MAAD,IAAWnF,KAAK,CAACgD,CAAD,CAAL,KAAa,GAA5B,EAAiC;AAC/BmC,MAAAA,MAAM,GAAG,IAAT,CAD+B;;AAG/BF,MAAAA,MAAM,IAAIjF,KAAK,CAACgD,CAAD,CAAf;AAEA,UAAI,EAAEkC,CAAF,KAAQF,SAAZ,EACE,OAAOC,MAAP;AACH,KAPD,MAQK,IAAIE,MAAM,IAAInF,KAAK,CAACgD,CAAD,CAAL,KAAa,GAA3B,EAAgC;AACnCmC,MAAAA,MAAM,GAAG,KAAT;AACD;AACF;;AAED,SAAOF,MAAP;AACD,CArBM;;AAuBP,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAAiBC,OAAjB,EAAmCN,SAAnC;MAAsDO,iFAAa;AACnF,MAAIC,MAAM,CAACf,SAAP,CAAiBgB,QAAjB,KAA8BC,SAAlC,EACE,OAAOL,MAAM,CAACI,QAAP,CAAgBT,SAAhB,EAA2BO,UAA3B,CAAP;AAEF,MAAMI,YAAY,GAAGN,MAAM,CAAC/E,MAA5B;;AAEA,MAAI0E,SAAS,IAAIW,YAAb,IAA6BJ,UAAU,IAAI,EAA/C,EACE,OAAOF,MAAP;AAEF,MAAMO,UAAU,GAAGZ,SAAS,GAAGW,YAA/B;AACA,MAAIE,MAAM,GAAGN,UAAU,CAACO,MAAX,CAAkBC,IAAI,CAACC,IAAL,CAAUJ,UAAU,GAAGL,UAAU,CAACjF,MAAlC,CAAlB,CAAb;AAEA,MAAIuF,MAAM,CAACvF,MAAP,GAAgBsF,UAApB,EACEC,MAAM,GAAGA,MAAM,CAACf,KAAP,CAAa,CAAb,EAAgBc,UAAhB,CAAT;AAEF,SAAON,OAAO,GAAGO,MAAM,GAAGR,MAAZ,GAAqBA,MAAM,GAAGQ,MAA5C;AACD,CAhBD;;AAkBO,IAAMJ,QAAQ,GAAG,SAAXA,QAAW,CAACJ,MAAD,EAAiBL,SAAjB;AAAA,MAAoCO,UAApC,uEAAiD,GAAjD;AAAA,SAAyDC,MAAM,CAACf,SAAP,CAAiBgB,QAAjB,KAA8BC,SAA9B,GAC7EL,MAAM,CAACI,QAAP,CAAgBT,SAAhB,EAA2BO,UAA3B,CAD6E,GAE7EH,SAAS,CAACC,MAAD,EAAS,IAAT,EAAeL,SAAf,EAA0BO,UAA1B,CAFW;AAAA,CAAjB;AAIA,IAAMU,MAAM,GAAG,SAATA,MAAS,CAACZ,MAAD,EAAiBL,SAAjB;AAAA,MAAoCO,UAApC,uEAAiD,GAAjD;AAAA,SAAyDC,MAAM,CAACf,SAAP,CAAiBwB,MAAjB,KAA4BP,SAA5B,GAC3EL,MAAM,CAACY,MAAP,CAAcjB,SAAd,EAAyBO,UAAzB,CAD2E,GAE3EH,SAAS,CAACC,MAAD,EAAS,KAAT,EAAgBL,SAAhB,EAA2BO,UAA3B,CAFS;AAAA,CAAf;;;;;;;;;;ICrCDW,IAAI,GAAG,SAAPA,IAAO,CAACC,EAAD;AAAA,SAAgB,IAAIC,OAAJ,CAAkB,UAAAC,OAAO;AAAA,WAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAd;AAAA,GAAzB,CAAhB;AAAA;;;;;;;ACRDI;;AAAZ,WAAYA;AACVA,EAAAA,4BAAA,WAAA;AACAA,EAAAA,2BAAA,UAAA;AACAA,EAAAA,8BAAA,aAAA;AACAA,EAAAA,8BAAA,aAAA;AACAA,EAAAA,6BAAA,YAAA;AACAA,EAAAA,+BAAA,cAAA;AACAA,EAAAA,4BAAA,WAAA;AACAA,EAAAA,4BAAA,WAAA;AACD,CATD,EAAYA,cAAM,KAANA,cAAM,KAAA,CAAlB;;AAkBA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD;AAAA,SAA6B;AACtDC,IAAAA,OAAO,EAAED,IAD6C;AAEtDE,IAAAA,aAAa,EAAE,GAFuC;AAGtDC,IAAAA,WAAW,EAAE,cAHyC;AAItDC,IAAAA,IAAI,EAAEN,cAAM,CAACO;AAJyC,GAA7B;AAAA,CAA3B;;AASA,IAAMC,oBAAoB,GAAG9D,OAAO,CAAC,UAACwD,IAAD;AAAA,SAAkBA,IAAI,CAACO,IAAL,EAAlB;AAAA,CAAD,CAApC;AACA,IAAMC,kBAAkB,GAAGhE,OAAO,CAAC,UAACwD,IAAD;AAAA,SAAkBA,IAAI,CAACO,IAAL,GAAY3G,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAlB;AAAA,CAAD,CAAlC;;AAEA,IAAM6G,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACT,IAAD,EAAeU,OAAf,EAAgCN,IAAhC;AAClC,MAAI,CAACJ,IAAI,CAACW,UAAL,CAAgBD,OAAhB,CAAL,EACE,OAAO,KAAP;AAEF,MAAMR,aAAa,GAAGI,oBAAoB,CAACN,IAAD,CAA1C;AACA,MAAIE,aAAa,KAAKQ,OAAtB,EACE,OAAO,KAAP;AAEF,SAAO;AACLT,IAAAA,OAAO,EAAED,IADJ;AAELE,IAAAA,aAAa,EAAbA,aAFK;AAGLC,IAAAA,WAAW,EAAEK,kBAAkB,CAACR,IAAD,CAAlB,CAAyBpG,OAAzB,CAAiC8G,OAAjC,EAA0C,EAA1C,CAHR;AAILN,IAAAA,IAAI,EAAJA;AAJK,GAAP;AAMD,CAdD;;AAgBA,IAAMQ,wBAAwB,GAAqB,SAA7CA,wBAA6C,CAAAZ,IAAI;AAAA,SAAIS,2BAA2B,CAACT,IAAD,EAAO,eAAP,EAAwBF,cAAM,CAACe,QAA/B,CAA/B;AAAA,CAAvD;;AACA,IAAMC,wBAAwB,GAAqB,SAA7CA,wBAA6C,CAAAd,IAAI;AAAA,SAAIS,2BAA2B,CAACT,IAAD,EAAO,uBAAP,EAAgCF,cAAM,CAACiB,QAAvC,CAA/B;AAAA,CAAvD;;AACA,IAAMC,uBAAuB,GAAqB,SAA5CA,uBAA4C,CAAAhB,IAAI;AAAA,SAAIS,2BAA2B,CAACT,IAAD,EAAO,sBAAP,EAA+BF,cAAM,CAACmB,OAAtC,CAA/B;AAAA,CAAtD;;AACA,IAAMC,yBAAyB,GAAqB,SAA9CA,yBAA8C,CAAAlB,IAAI;AAAA,SAAIS,2BAA2B,CAACT,IAAD,EAAO,wBAAP,EAAiCF,cAAM,CAACqB,SAAxC,CAA/B;AAAA,CAAxD;;AACA,IAAMC,sBAAsB,GAAqB,SAA3CA,sBAA2C,CAAApB,IAAI;AAAA,SAAIS,2BAA2B,CAACT,IAAD,EAAO,qBAAP,EAA8BF,cAAM,CAACuB,MAArC,CAA/B;AAAA,CAArD;;AACA,IAAMC,sBAAsB,GAAqB,SAA3CA,sBAA2C,CAAAtB,IAAI;AAAA,SAAIS,2BAA2B,CAACT,IAAD,EAAO,yBAAP,EAAkCF,cAAM,CAACyB,MAAzC,CAA/B;AAAA,CAArD;;;AAGA,IAAMC,kBAAkB,GAAG,qBAA3B;;AACA,IAAMC,qBAAqB,GAAqB,SAA1CA,qBAA0C,CAAAzB,IAAI;AAClD,MAAM0B,qBAAqB,GAAGpB,oBAAoB,CAACN,IAAD,CAAlD;AAEA,SAAOwB,kBAAkB,CAACG,IAAnB,CAAwBD,qBAAxB,KAAkD;AACvDzB,IAAAA,OAAO,EAAED,IAD8C;AAEvDE,IAAAA,aAAa,mBAAYwB,qBAAZ,CAF0C;AAGvDvB,IAAAA,WAAW,EAAEK,kBAAkB,CAACR,IAAD,CAHwB;AAIvDI,IAAAA,IAAI,EAAEN,cAAM,CAAC8B;AAJ0C,GAAzD;AAMD,CATD;;AAWA,IAAMC,0BAA0B,GAAqB,SAA/CA,0BAA+C,CAAA7B,IAAI;AAAA,SAAIA,IAAI,CAACW,UAAL,CAAgB,YAAhB,IAAgCZ,kBAAkB,CAACC,IAAD,CAAlD,GAA2D,KAA/D;AAAA,CAAzD;;;AAGA,IAAM8B,cAAc,GAAG,wBAAvB;;AACA,IAAMC,sBAAsB,GAAqB,SAA3CA,sBAA2C,CAAA/B,IAAI;AACnD,MAAME,aAAa,GAAGI,oBAAoB,CAACN,IAAD,CAA1C;AAEA,SAAO8B,cAAc,CAACH,IAAf,CAAoBzB,aAApB,KAAsC;AAC3CD,IAAAA,OAAO,EAAED,IADkC;AAE3CE,IAAAA,aAAa,EAAbA,aAF2C;AAG3CC,IAAAA,WAAW,EAAEK,kBAAkB,CAACR,IAAD,CAHY;AAI3CI,IAAAA,IAAI,EAAEN,cAAM,CAACO;AAJ8B,GAA7C;AAMD,CATD;;AAWA,IAAM2B,oBAAoB,GAAqB,SAAzCA,oBAAyC,CAAAhC,IAAI;AACjD,MAAME,aAAa,GAAGI,oBAAoB,CAACN,IAAD,CAA1C;AAEA,SAAO;AACLC,IAAAA,OAAO,EAAED,IADJ;AAELE,IAAAA,aAAa,EAAbA,aAFK;AAGLC,IAAAA,WAAW,EAAEK,kBAAkB,CAACR,IAAD,CAH1B;AAILI,IAAAA,IAAI,EAAEN,cAAM,CAACO;AAJR,GAAP;AAMD,CATD;;IAWa4B,iBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBE,yBAAYjC,IAAZ;UAA0BkC,iFAAa;;mDACdD,iBAAiB,CAACE;;;;AAAzC,4DAA4D;AAAA,cAAjDC,QAAiD;AAC1D,cAAMC,QAAQ,GAAGD,QAAQ,CAACpC,IAAD,CAAzB;AAEA,cAAIqC,QAAJ,EACE,OAAO,KAAKC,eAAL,CAAqBD,QAArB,IAAiCA,QAAjC,GAA4C,IAAnD;AACH;;;;;;;AAED,UAAIH,UAAJ,EACE,OAAOF,oBAAoB,CAAChC,IAAD,CAA3B;AAEF,aAAO,IAAP;AACD;AA5BH;AAAA;AAAA,WA8BE,yBAAgBqC,QAAhB;AACE,aAAOA,QAAQ,CAACnC,aAAT,KAA2B,GAAlC;AACD;AAhCH;;AAAA;AAAA;;oCAAa+B,wCAEsD;AAE/DJ,0BAF+D;AAI/DjB,wBAJ+D,EAK/DE,wBAL+D,EAM/DE,uBAN+D,EAO/DE,yBAP+D,EAQ/DE,sBAR+D,EAS/DK,qBAT+D,EAU/DH,sBAV+D,EAW/DS,sBAX+D;;AChGvDQ;;AAAZ,WAAYA;AACVA,EAAAA,uCAAA,YAAA;AACAA,EAAAA,wCAAA,aAAA;AACD,CAHD,EAAYA,mBAAW,KAAXA,mBAAW,KAAA,CAAvB;;;;;;;ICKsBC,oBAAtB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WAIE,kBAASC,OAAT;UAA4BC,2EAAO;AACjC,UAAI,CAACC,aAAA,CAAqBF,OAArB,CAAL,EACE,OAAO,CAAC,KAAKG,yBAAN,CAAP;AAEF,UAAIC,uBAAJ;;mDAC+B,KAAKC;;;;AAApC,4DAAuD;AAAA,cAA5CC,gBAA4C;AACrD,cAAMC,8BAA8B,GAAGD,gBAAgB,CAACN,OAAD,CAAvD;;AACA,cAAIO,8BAAJ,EAAoC;AAClC,gBAAI,CAACN,IAAL,EACE,OAAOM,8BAAP;AAEFH,YAAAA,uBAAuB,GAAG,CAACA,uBAAuB,IAAI,EAA5B,EAAgCI,MAAhC,CAAuCD,8BAAvC,CAA1B;AACD;AACF;;;;;;;AAED,aAAOH,uBAAP;AACD;AApBH;;AAAA;AAAA;;ACLA,IAAMK,gBAAgB,GAAG;AACvBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,EAAE,EAAE,iBADG;AAEPC,IAAAA,IAAI,EAAE;AAFC,GADc;AAKvBC,EAAAA,WAAW,EAAE;AACXF,IAAAA,EAAE,EAAE,iBADO;AAEXC,IAAAA,IAAI,EAAE;AAFK;AALU,CAAzB;IA8BaE,QAAQ,GAAaL;IACrBM,kBAAkB,GAAG3F,MAAM,CAAC4F,MAAP,CAAcP,gBAAd;IAErBQ,eAAe,GAAG;IAClBC,iBAAiB,GAAGD;;ICRpBE,SAAS,GAAkB;AACtCC,EAAAA,MAAM,EAAE,KAD8B;AAEtCR,EAAAA,IAAI,EAAE,OAFgC;AAGtCrI,EAAAA,QAAQ,EAAE,CAH4B;AAItC8I,EAAAA,YAAY,EAAE;AAJwB;IAO3BC,gBAAgB,GAAkB;AAC7CV,EAAAA,IAAI,EAAE,SADuC;AAE7CQ,EAAAA,MAAM,EAAE,SAFqC;AAG7C7I,EAAAA,QAAQ,EAAE,CAHmC;AAI7C8I,EAAAA,YAAY,EAAE;AAJ+B;IAOlCE,cAAc,GAAqB;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,OAAO,EAAEV,QAAQ,CAACD,WADpB;AAEEY,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,eAAe,EAAE,sCAHnB;AAIEC,EAAAA,QAAQ,EAAE;AACRpJ,IAAAA,QAAQ,EAAE,CADF;AAER6I,IAAAA,MAAM,EAAE,MAFA;AAGRR,IAAAA,IAAI,EAAE,aAHE;AAIRS,IAAAA,YAAY,EAAE;AAJN;AAJZ,CAxB8C,EAmC9C;AACEG,EAAAA,OAAO,EAAEV,QAAQ,CAACD,WADpB;AAEEY,EAAAA,IAAI,EAAE,KAFR;AAGEC,EAAAA,eAAe,EAAE,sCAHnB;AAIEf,EAAAA,EAAE,EAAE,CAJN;AAKEgB,EAAAA,QAAQ,EAAE;AACRpJ,IAAAA,QAAQ,EAAE,CADF;AAER6I,IAAAA,MAAM,EAAE,MAFA;AAGRR,IAAAA,IAAI,EAAE,aAHE;AAIRS,IAAAA,YAAY,EAAE;AAJN;AALZ,CAnC8C;IAiDnCO,iBAAiB,GAAuE,IAAIpH,GAAJ,CACnGuG,kBAAkB,CAACrJ,GAAnB,CAAuB,UAAAmK,EAAE;AAAA,SAAI,CAACA,EAAD,EAAK,IAAIrH,GAAJ,CAAQ+G,cAAc,CAACO,MAAf,CAAsB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACP,OAAF,KAAcK,EAAlB;AAAA,GAAvB,EAA6CnK,GAA7C,CAAiD,UAAAqK,CAAC;AAAA,WAAI,CAACA,CAAC,CAACL,eAAH,EAAoBK,CAApB,CAAJ;AAAA,GAAlD,CAAR,CAAL,CAAJ;AAAA,CAAzB,CADmG;;ACzFrG,IAAMC,uBAAuB,GAAG,CAAC,IAAD,CAAhC;AACA,IAAMC,uBAAuB,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAhC;AACA,IAAMC,eAAe,aAAOF,uBAAP,EAAmCC,uBAAnC,CAArB;IAEaE,SAAS,GAAG;AACvBC,EAAAA,aAAa,EAAE,EADQ;AAEvBJ,EAAAA,uBAAuB,EAAvBA,uBAFuB;AAGvBC,EAAAA,uBAAuB,EAAvBA,uBAHuB;AAIvBC,EAAAA,eAAe,EAAfA;AAJuB;;ACJbG;;AAAZ,WAAYA;AACVA,EAAAA,kBAAA,YAAA;AACAA,EAAAA,oBAAA,cAAA;AACAA,EAAAA,eAAA,SAAA;AACD,CAJD,EAAYA,eAAO,KAAPA,eAAO,KAAA,CAAnB;;ACAA;AAKO,IAAMC,GAAG,GAAGC,OAAO,IAAKC,UAAkB,CAACF,GAA3C;;;;;;;ACOA,IAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCC,aADmC,EAEnCC,MAFmC;AAInC,MAAI,OAAOD,aAAP,KAAyB,QAA7B,EACE,OAAO,CAACC,MAAM,CAACC,oBAAR,CAAP;AAEF,MAAIF,aAAa,CAACtL,MAAd,KAAyB+K,SAAS,CAACC,aAAvC,EACE,OAAO,CAACO,MAAM,CAACE,6BAAR,CAAP;AAEF,MAAI,CAACV,SAAS,CAACD,eAAV,CAA0BY,IAA1B,CAA+B,UAAAC,MAAM;AAAA,WAAIL,aAAa,CAACxE,UAAd,CAAyB6E,MAAzB,CAAJ;AAAA,GAArC,CAAL,EACE,OAAO,CAACJ,MAAM,CAACK,gCAAR,CAAP;AACH,CAZM;AAcA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACxBtC,EADwB,EAExBgC,MAFwB;AAIxB,MAAI,OAAOhC,EAAP,KAAc,QAAlB,EACE,OAAO,CAACgC,MAAM,CAACO,SAAR,CAAP;AAEF,MAAIvC,EAAE,KAAK,EAAX,EACE,OAAO,CAACgC,MAAM,CAACQ,OAAR,CAAP;AACH,CATM;AAWA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAC5BC,MAD4B,EAE5BV,MAF4B;AAI5B,MAAI,CAACnK,6BAAS,CAAC8K,WAAV,CAAsBD,MAAtB,CAAD,IAAkCA,MAAM,CAACE,KAAP,EAAlC,IAAoD,CAACF,MAAM,CAACG,QAAP,EAAzD,EACE,OAAO,CAACb,MAAM,CAACc,aAAR,CAAP;AAEF,MAAIJ,MAAM,CAACK,MAAP,MAAmBL,MAAM,CAACM,UAAP,EAAvB,EACE,OAAO,CAAChB,MAAM,CAACiB,mBAAR,CAAP;AACH,CATM;AAWA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCC,aADmC,EAEnCnB,MAFmC;AAInC,SAAOmB,aAAa,KAAKtH,SAAlB,GAA8BA,SAA9B,GAA0C4G,cAAc,CAACU,aAAD,EAAgBnB,MAAhB,CAA/D;AACD,CALM;AAOA,IAAMoB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAClCC,KADkC,EAElCrB,MAFkC;AASlC,MAAIqB,KAAK,KAAKxH,SAAd,EACE;AAEF,MAAI,CAAC0D,aAAA,CAAqB8D,KAArB,CAAL,EACE,OAAO,CAACrB,MAAM,CAACsB,YAAR,CAAP;AAEF,SAAOC,aAAa,CAACF,KAAD,EAAQrB,MAAR,CAAb,IAAgCwB,qBAAqB,CAACH,KAAK,CAACzL,QAAP,EAAiBoK,MAAjB,CAA5D;AACD,CAhBM;AAkBA,IAAMyB,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCJ,KADmC,EAEnCrB,MAFmC;AAQnC,MAAIqB,KAAK,KAAKxH,SAAd,EACE;AAEF,MAAI,CAAC0D,aAAA,CAAqB8D,KAArB,CAAL,EACE,OAAO,CAACrB,MAAM,CAACsB,YAAR,CAAP;AAEF,SAAOC,aAAa,CAACF,KAAD,EAAQrB,MAAR,CAApB;AACD,CAfM;AAiBA,IAAM0B,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCC,IADiC,EAEjC3B,MAFiC;AAIjC,MAAI,EAAE2B,IAAI,YAAYC,IAAlB,KAA2BhB,KAAK,CAACe,IAAI,CAACE,OAAL,EAAD,CAApC,EACE,OAAO,CAAC7B,MAAM,CAAC8B,kBAAR,CAAP;AACH,CANM;AAQA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CACzBC,GADyB,EAEzBhC,MAFyB;AAIzB,MAAIgC,GAAG,KAAKnI,SAAZ,EACE;AAEF,MAAI,EAAEmI,GAAG,YAAYrC,GAAjB,CAAJ,EACE,OAAO,CAACK,MAAM,CAACiC,UAAR,CAAP;AAEF,MAAID,GAAG,CAACE,QAAJ,CAAaC,OAAb,CAAqB,YAArB,IAAqC,CAAC,CAA1C,EACE,OAAO,CAACnC,MAAM,CAACoC,eAAR,CAAP;AACH,CAZM;AAcA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCC,WADiC,EAEjCC,WAFiC,EAGjCC,sBAHiC,EAIjCxC,MAJiC;AAMjC,MAAIsC,WAAW,KAAKzI,SAApB,EACE;AAEF,MAAI,EAAEyI,WAAW,YAAYV,IAAzB,KAAkChB,KAAK,CAAC0B,WAAW,CAACT,OAAZ,EAAD,CAA3C,EACE,OAAO,CAAC7B,MAAM,CAACyC,kBAAR,CAAP;;AAEF,MAAIH,WAAW,CAACT,OAAZ,KAAwBU,WAAW,CAACV,OAAZ,EAAxB,GAAgDW,sBAApD,EAA4E;AAC1E,WAAO,CAACxC,MAAM,CAAC0C,sBAAR,CAAP;AACD;AACF,CAfM;AAiBA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAC1BC,IAD0B,EAE1B5C,MAF0B;AAI1B,MAAI4C,IAAI,KAAK/I,SAAb,EACE;AAEF,MAAI,CAAC0D,aAAA,CAAqBqF,IAArB,CAAL,EACE,OAAO,CAAC5C,MAAM,CAAC6C,WAAR,CAAP;AACH,CATM;;AAWP,IAAMtB,aAAa,GAAG,SAAhBA,aAAgB,CACpBF,KADoB,EAEpBrB,MAFoB;AAOpB,SAAO8C,oBAAoB,CAACzB,KAAK,CAAC0B,OAAP,EAAgB/C,MAAhB,CAApB,IAA+CgD,eAAe,CAAC3B,KAAK,CAACrD,EAAP,EAAWgC,MAAX,CAArE;AACD,CARD;;AAUA,IAAM8C,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC3BG,YAD2B,EAE3BjD,MAF2B;AAI3B,MAAI,OAAOiD,YAAP,KAAwB,QAA5B,EACE,OAAO,CAACjD,MAAM,CAACkD,mBAAR,CAAP;AAEF,MAAID,YAAY,CAACxO,MAAb,KAAwB+K,SAAS,CAACC,aAAtC,EACE,OAAO,CAACO,MAAM,CAACmD,4BAAR,CAAP;AAEF,MAAI,CAAC3D,SAAS,CAACH,uBAAV,CAAkCc,IAAlC,CAAuC,UAAAC,MAAM;AAAA,WAAI6C,YAAY,CAAC1H,UAAb,CAAwB6E,MAAxB,CAAJ;AAAA,GAA7C,CAAL,EACE,OAAO,CAACJ,MAAM,CAACoD,gCAAR,CAAP;AACH,CAZD;;AAcA,IAAMJ,eAAe,GAAG,SAAlBA,eAAkB,CACtBK,OADsB,EAEtBrD,MAFsB;AAItB,MAAIqD,OAAO,KAAK,IAAhB,EACE;AAEF,MAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+BC,MAAM,CAAC1C,KAAP,CAAayC,OAAb,CAA/B,IAAwD,CAACC,MAAM,CAACzC,QAAP,CAAgBwC,OAAhB,CAA7D,EACE,OAAO,CAACrD,MAAM,CAACuD,cAAR,CAAP;AAEF,MAAIF,OAAO,GAAG,CAAd,EACE,OAAO,CAACrD,MAAM,CAACwD,iBAAR,CAAP;AAEF,MAAI,CAACF,MAAM,CAACG,SAAP,CAAiBJ,OAAjB,CAAL,EACE,OAAO,CAACrD,MAAM,CAAC0D,mBAAR,CAAP;AACH,CAfD;;AAiBA,IAAMlC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAC5BmC,aAD4B,EAE5B3D,MAF4B;AAI5B,MAAI,OAAO2D,aAAP,KAAyB,QAAzB,IAAqCL,MAAM,CAAC1C,KAAP,CAAa+C,aAAb,CAArC,IAAoE,CAACL,MAAM,CAACzC,QAAP,CAAgB8C,aAAhB,CAAzE,EACE,OAAO,CAAC3D,MAAM,CAAC4D,oBAAR,CAAP;AAEF,MAAID,aAAa,GAAG,CAApB,EACE,OAAO,CAAC3D,MAAM,CAAC6D,6BAAR,CAAP;AAEF,MAAI,CAACP,MAAM,CAACG,SAAP,CAAiBE,aAAjB,CAAL,EACE,OAAO,CAAC3D,MAAM,CAAC8D,+BAAR,CAAP;AACH,CAZD;;;;;IC5KaC,gBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,gHAgC4G,CACxG,UAAA1G,OAAO;AAAA,aAAIA,OAAO,CAACyB,IAAR,KAAiB3B,mBAAW,CAAC6G,OAA7B,GAAuC,CAACD,gBAAgB,CAAC/D,MAAjB,CAAwBiE,WAAzB,CAAvC,GAA+EpK,SAAnF;AAAA,KADiG,EAExG,UAAAwD,OAAO;AAAA,aAAIyC,qBAAqB,CAACzC,OAAO,CAAC0C,aAAT,EAAwBgE,gBAAgB,CAAC/D,MAAzC,CAAzB;AAAA,KAFiG,EAGxG,UAAA3C,OAAO;AAAA,aAAIiD,UAAU,CAACjD,OAAO,CAACW,EAAT,EAAa+F,gBAAgB,CAAC/D,MAA9B,CAAd;AAAA,KAHiG,EAIxG,UAAA3C,OAAO;AAAA,aAAIoD,cAAc,CAACpD,OAAO,CAACqD,MAAT,EAAiBqD,gBAAgB,CAAC/D,MAAlC,CAAlB;AAAA,KAJiG,EAKxG,UAAA3C,OAAO;AAAA,aAAI+D,oBAAoB,CAAC/D,OAAO,CAACgE,KAAT,EAAgB0C,gBAAgB,CAAC/D,MAAjC,CAAxB;AAAA,KALiG,EAMxG,UAAA3C,OAAO;AAAA,aAAIsF,YAAY,CAACtF,OAAO,CAACuF,IAAT,EAAemB,gBAAgB,CAAC/D,MAAhC,CAAhB;AAAA,KANiG,EAOxG,UAAA3C,OAAO;AAAA,aAAI0E,WAAW,CAAC1E,OAAO,CAAC6G,UAAT,EAAqBH,gBAAgB,CAACI,gBAAtC,CAAf;AAAA,KAPiG,EAQxG,UAAA9G,OAAO;AAAA,aAAI0E,WAAW,CAAC1E,OAAO,CAAC+G,SAAT,EAAoBL,gBAAgB,CAACM,eAArC,CAAf;AAAA,KARiG,EASxG,UAAAhH,OAAO;AAAA,aAAIqE,mBAAmB,CAACrE,OAAO,CAACiH,OAAT,EAAkBP,gBAAgB,CAAC/D,MAAnC,CAAvB;AAAA,KATiG,EAUxG,UAAA3C,OAAO;AAAA,aAAIgF,mBAAmB,CAAChF,OAAO,CAACkH,OAAT,EAAkBlH,OAAO,CAACiH,OAA1B,EAAmCP,gBAAgB,CAACvB,sBAApD,EAA4EuB,gBAAgB,CAAC/D,MAA7F,CAAvB;AAAA,KAViG,CAhC5G;;AAAA,wHA6CiD+D,gBAAgB,CAAC/D,MAAjB,CAAwBwE,oBA7CzE;;AAAA;AAAA;;AAAA;AAAA,EAAsCpH,oBAAtC;;oCAAa2G,4BACc;AACvBS,EAAAA,oBAAoB,EAAE,oCADC;AAEvBP,EAAAA,WAAW,EAAE,yBAFU;AAGvBhE,EAAAA,oBAAoB,EAAE,2BAHC;AAIvBI,EAAAA,gCAAgC,EAAE,yCAJX;AAKvBH,EAAAA,6BAA6B,EAAE,uCALR;AAMvBK,EAAAA,SAAS,EAAE,eANY;AAOvBC,EAAAA,OAAO,EAAE,aAPc;AAQvBM,EAAAA,aAAa,EAAE,mBARQ;AASvBG,EAAAA,mBAAmB,EAAE,sCATE;AAUvB4B,EAAAA,WAAW,EAAE,yBAVU;AAWvBvB,EAAAA,YAAY,EAAE,kBAXS;AAYvB4B,EAAAA,mBAAmB,EAAE,0BAZE;AAavBE,EAAAA,gCAAgC,EAAE,yCAbX;AAcvBD,EAAAA,4BAA4B,EAAE,sCAdP;AAevBI,EAAAA,cAAc,EAAE,qBAfO;AAgBvBC,EAAAA,iBAAiB,EAAE,sBAhBI;AAiBvBE,EAAAA,mBAAmB,EAAE,4BAjBE;AAkBvBE,EAAAA,oBAAoB,EAAE,qCAlBC;AAmBvBC,EAAAA,6BAA6B,EAAE,sCAnBR;AAoBvBC,EAAAA,+BAA+B,EAAE,4CApBV;AAqBvBW,EAAAA,iBAAiB,EAAE,wBArBI;AAsBvBC,EAAAA,4BAA4B,EAAE,qCAtBP;AAuBvBC,EAAAA,gBAAgB,EAAE,uBAvBK;AAwBvBC,EAAAA,2BAA2B,EAAE,oCAxBN;AAyBvB9C,EAAAA,kBAAkB,EAAE,yBAzBG;AA0BvBW,EAAAA,kBAAkB,EAAE,yBA1BG;AA2BvBC,EAAAA,sBAAsB,EAAE;AA3BD;;oCADdqB,4CA8B8B;;oCA9B9BA,sCA+CgC;AACzC9B,EAAAA,UAAU,EAAE8B,gBAAgB,CAAC/D,MAAjB,CAAwByE,iBADK;AAEzCrC,EAAAA,eAAe,EAAE2B,gBAAgB,CAAC/D,MAAjB,CAAwB0E;AAFA;;oCA/ChCX,qCAoD+B;AACxC9B,EAAAA,UAAU,EAAE8B,gBAAgB,CAAC/D,MAAjB,CAAwB2E,gBADI;AAExCvC,EAAAA,eAAe,EAAE2B,gBAAgB,CAAC/D,MAAjB,CAAwB4E;AAFD;;;;;ICvD/BC,iBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,gHAuB8G,CAC1G,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAAChG,IAAT,KAAkB3B,mBAAW,CAAC4H,QAA9B,GAAyC,CAACF,iBAAiB,CAAC7E,MAAlB,CAAyBiE,WAA1B,CAAzC,GAAkFpK,SAAtF;AAAA,KADkG,EAE1G,UAAAiL,QAAQ;AAAA,aAAInC,YAAY,CAACmC,QAAQ,CAAClC,IAAV,EAAgBiC,iBAAiB,CAAC7E,MAAlC,CAAhB;AAAA,KAFkG,EAG1G,UAAA8E,QAAQ;AAAA,aAAIhF,qBAAqB,CAACgF,QAAQ,CAAC/E,aAAV,EAAyB8E,iBAAiB,CAAC7E,MAA3C,CAAzB;AAAA,KAHkG,EAI1G,UAAA8E,QAAQ;AAAA,aAAI5D,qBAAqB,CAAC4D,QAAQ,CAAC3D,aAAV,EAAyB0D,iBAAiB,CAAC7E,MAA3C,CAAzB;AAAA,KAJkG,EAK1G,UAAA8E,QAAQ;AAAA,aAAIrD,qBAAqB,CAACqD,QAAQ,CAACE,YAAV,EAAwBH,iBAAiB,CAAC7E,MAA1C,CAAzB;AAAA,KALkG,EAM1G,UAAA8E,QAAQ;AAAA,aAAI/C,WAAW,CAAC+C,QAAQ,CAACZ,UAAV,EAAsBW,iBAAiB,CAACV,gBAAxC,CAAf;AAAA,KANkG,EAO1G,UAAAW,QAAQ;AAAA,aAAI/C,WAAW,CAAC+C,QAAQ,CAACV,SAAV,EAAqBS,iBAAiB,CAACR,eAAvC,CAAf;AAAA,KAPkG,CAvB9G;;AAAA,wHAiCiDQ,iBAAiB,CAAC7E,MAAlB,CAAyBiF,qBAjC1E;;AAAA;AAAA;;AAAA;AAAA,EAAuC7H,oBAAvC;;oCAAayH,6BACc;AACvBI,EAAAA,qBAAqB,EAAE,qCADA;AAEvBhB,EAAAA,WAAW,EAAE,0BAFU;AAGvBpB,EAAAA,WAAW,EAAE,0BAHU;AAIvB/B,EAAAA,aAAa,EAAE,2BAJQ;AAKvBG,EAAAA,mBAAmB,EAAE,8CALE;AAMvBhB,EAAAA,oBAAoB,EAAE,2BANC;AAOvBI,EAAAA,gCAAgC,EAAE,yCAPX;AAQvBH,EAAAA,6BAA6B,EAAE,uCARR;AASvBoB,EAAAA,YAAY,EAAE,0BATS;AAUvB4B,EAAAA,mBAAmB,EAAE,kCAVE;AAWvBE,EAAAA,gCAAgC,EAAE,iDAXX;AAYvBD,EAAAA,4BAA4B,EAAE,8CAZP;AAavBI,EAAAA,cAAc,EAAE,qBAbO;AAcvBC,EAAAA,iBAAiB,EAAE,sBAdI;AAevBE,EAAAA,mBAAmB,EAAE,4BAfE;AAgBvBe,EAAAA,iBAAiB,EAAE,wBAhBI;AAiBvBC,EAAAA,4BAA4B,EAAE,qCAjBP;AAkBvBC,EAAAA,gBAAgB,EAAE,uBAlBK;AAmBvBC,EAAAA,2BAA2B,EAAE;AAnBN;;oCADdC,uCAmCgC;AACzC5C,EAAAA,UAAU,EAAE4C,iBAAiB,CAAC7E,MAAlB,CAAyByE,iBADI;AAEzCrC,EAAAA,eAAe,EAAEyC,iBAAiB,CAAC7E,MAAlB,CAAyB0E;AAFD;;oCAnChCG,sCAwC+B;AACxC5C,EAAAA,UAAU,EAAE4C,iBAAiB,CAAC7E,MAAlB,CAAyB2E,gBADG;AAExCvC,EAAAA,eAAe,EAAEyC,iBAAiB,CAAC7E,MAAlB,CAAyB4E;AAFF;;IC9CtBM,UAAtB,iDACI;;;AAEC,CAHL;;ICMaC,YAAb;AAAA;AAAA;;AAAA,2DACmD,IAAIpN,GAAJ,EADnD;AAAA;;AAAA;AAAA;AAAA,WAGI,qBAAYqN,QAAZ;AACI,WAAKC,SAAL,CAAeC,GAAf,CAAmBF,QAAnB;AACA,aAAO,IAAP;AACH;AANL;AAAA;AAAA,WAQI,wBAAeA,QAAf;AACI,UAAI,KAAKC,SAAL,CAAeE,GAAf,CAAmBH,QAAnB,CAAJ,EACI,KAAKC,SAAL,WAAsBD,QAAtB;AACJ,aAAO,IAAP;AACH;AAZL;AAAA;AAAA,WAcI;AACI,WAAKC,SAAL,GAAiB,IAAItN,GAAJ,EAAjB;AACA,aAAO,IAAP;AACH;AAjBL;AAAA;AAAA,WAmBI;wCAAQyN;AAAAA,QAAAA;;;AACJ,UAAI,CAAC,KAAKH,SAAL,CAAeI,IAApB,EACI;;AAEJ,UAAI,KAAKJ,SAAL,CAAeI,IAAf,KAAwB,CAA5B,EAA+B;AAAA;;AAC3B,sCAAKJ,SAAL,CAAehH,MAAf,GAAwBnH,IAAxB,IAA+B/C,KAA/B,8BAAwCqR,IAAxC;AACH,OAFD,MAEO;AACH;AACA,+CAAI,KAAKH,SAAT,EAAoBK,OAApB,CAA4B,UAAAN,QAAQ;AAAA,iBAAIA,QAAQ,MAAR,SAAYI,IAAZ,CAAJ;AAAA,SAApC;AACH;AACJ;AA7BL;;AAAA;AAAA;;;;;;;;ICJaG,4BAAb;AAGE,wCACqBC,gBADrB;;;AACqB,yBAAA,GAAAA,gBAAA;AAEpB;;AANH;AAAA;AAAA,SAQE;AACE,UAAI,CAAC,KAAKC,qBAAV,EAAiC;AAC/B,YAAIC,KAAK,GAAG,CAAZ;;AAD+B,mDAEZ,KAAKF,gBAFO;AAAA;;AAAA;AAE/B,8DAA0C;AAAA,gBAA/BG,IAA+B;AACxC,gBAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,GAA8BA,IAAI,CAAC,CAAD,CAAJ,KAAY,WAA1C,GAAwDA,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAR,CAAc,UAAAlH,IAAI;AAAA,qBAAIA,IAAI,KAAK,WAAb;AAAA,aAAlB,CAA5D,EACEgH,KAAK;AACR;AAL8B;AAAA;AAAA;AAAA;AAAA;;AAO/B,aAAKD,qBAAL,GAA6BC,KAA7B;AACD;;AAED,aAAO,KAAKD,qBAAZ;AACD;AApBH;AAAA;AAAA,SAsBE;AACE,aAAO,KAAKD,gBAAL,CAAsBH,IAA7B;AACD;AAxBH;AAAA;AAAA,WA0BE,kBAAStR,KAAT;AACE,UAAI,CAACA,KAAL,EACE,OAAO,KAAP;AAEF,UAAM8R,UAAU,GAAGxN,MAAM,CAACyN,mBAAP,CAA2B/R,KAA3B,CAAnB;;AAGA,UAAI8R,UAAU,CAACxR,MAAX,GAAoB,KAAK0R,oBAAzB,IAAiDF,UAAU,CAACxR,MAAX,GAAoB,KAAK2R,oBAA9E,EACE,OAAO,KAAP;;kDAE2C,KAAKR;;;;;;cAAtCS;cAAWC;;AACrB,cAAMC,UAAU,GAAGpS,KAAK,CAACkS,SAAD,CAAxB;AACA,cAAMG,eAAe,GAAGD,UAAU,KAAK,IAAf,GAAsB,MAAtB,+BAAsCA,UAAtC,CAAxB;;AAEA,cAAI/P,KAAK,CAACF,OAAN,CAAcgQ,iBAAd,IACA,CAACA,iBAAiB,CAACnG,IAAlB,CAAuB,UAAAsG,YAAY;AAAA,mBAAID,eAAe,KAAKC,YAAxB;AAAA,WAAnC,CADD,GAEAD,eAAe,KAAKF,iBAFxB,EAGE;AACA;AAAA,iBAAO;AAAP;AACD;;;AATH,+DAAoE;AAAA;;AAAA;AAUnE;;;;;;;AAED,aAAO,IAAP;AACD;AAjDH;;AAAA;AAAA;;ICEaI,gBAAb;AAGE,4BAAYC,UAAZ;;;AACE,SAAKC,4BAAL,GAAoC,IAAIjB,4BAAJ,CAAiCgB,UAAjC,CAApC;AACD;;AALH;AAAA;AAAA,WAOE,mBAAUxS,KAAV;AACE,UAAI;AACF,YAAI,CAAC,KAAKyS,4BAAL,CAAkCC,QAAlC,CAA2C1S,KAA3C,CAAL,EACE,OAAO,IAAP;AAEF,YAAM2S,UAAU,GAAGxR,IAAI,CAACC,SAAL,CAAepB,KAAf,CAAnB;AACA,eAAO4S,MAAA,CAAcD,UAAd,EAA0B,WAA1B,CAAP;AACD,OAND,CAOA,gBAAM;AACJ,eAAO,IAAP;AACD;AACF;AAlBH;;AAAA;AAAA;;ICAaE,kBAAb;AAGE,8BAAYL,UAAZ;;;AACE,SAAKC,4BAAL,GAAoC,IAAIjB,4BAAJ,CAAiCgB,UAAjC,CAApC;AACD;;AALH;AAAA;AAAA,WAOE,qBAAYM,eAAZ;AACE,UAAI;AACF,YAAI9S,KAAJ;;AAEA,YAAI8S,eAAJ,EAAqB;AACnB,cAAMC,qBAAqB,GAAGH,MAAA,CAAcE,eAAd,EAA+B,WAA/B,CAA9B;AACA9S,UAAAA,KAAK,GAAGmB,IAAI,CAACG,KAAL,CAAWyR,qBAAX,CAAR;AACD,SAHD,MAKE/S,KAAK,GAAG,EAAR;;AAEF,eAAO,KAAKyS,4BAAL,CAAkCC,QAAlC,CAA2C1S,KAA3C,IACHA,KADG,GAEH,IAFJ;AAGD,OAbD,CAcA,gBAAM;AACJ,eAAO,IAAP;AACD;AACF;AAzBH;;AAAA;AAAA;;ACCI,IAAI0D,GAAJ;AAAA,CAEDsP,GAFC,CAEG,GAFH,EAEQ,QAFR;AAAA,CAIDA,GAJC,CAIG,GAJH,EAIQ,QAJR;AAAA,CAMDA,GANC,CAMG,GANH,EAMQ,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CANR;;AAUA,IAAItP,GAAJ;AAAA,CAEDsP,GAFC,CAEG,GAFH,EAEQ,QAFR;AAAA,CAIDA,GAJC,CAIG,IAJH,EAIS,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CAJT;AAAA,CAMDA,GANC,CAMG,GANH,EAMQ,QANR;;AAQG,IAAMC,2BAA2B,GAEpC,IAAIvP,GAAJ;AAAA,CAEDsP,GAFC,CAEG,GAFH,EAEQ,QAFR;AAAA,CAIDA,GAJC,CAIG,GAJH,EAIQ,QAJR;AAAA,CAMDA,GANC,CAMG,GANH,EAMQ,QANR;AAAA,CAQDA,GARC,CAQG,IARH,EAQS,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CART;AAUF;AAVE,CAWDA,GAXC,CAWG,GAXH,EAWQ,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CAXR;AAAA,CAaDA,GAbC,CAaG,IAbH,EAaS,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CAbT;AAAA,CAeDA,GAfC,CAeG,IAfH,EAeS,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CAfT;AAAA,CAiBDA,GAjBC,CAiBG,GAjBH,EAiBQ,QAjBR;AAAA,CAmBDA,GAnBC,CAmBG,GAnBH,EAmBQ,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CAnBR;AAAA,CAqBDA,GArBC,CAqBG,GArBH,EAqBQ,QArBR,CAFG;;IChBME,iBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WAKE,mBAAUhK,OAAV;AACE,UAAI;AACF,YAAMiK,iBAAiB,GAAG,KAAKC,6BAAL,CAAmClK,OAAnC,CAA1B;AACA,eAAOgK,iBAAiB,CAACG,iCAAlB,CAAoDC,SAApD,CAA8DH,iBAA9D,CAAP;AACD,OAHD,CAIA,gBAAM;AACJ,eAAO,IAAP;AACD;AACF;AAbH;AAAA;AAAA,WAeY,uCAA8BjK,OAA9B;;;AACR,aAAO;AACLlG,QAAAA,CAAC,EAAEkG,OAAO,CAACW,EADN;AAELnH,QAAAA,CAAC,EAAEwG,OAAO,CAACqD,MAAR,CAAezM,QAAf,CAAwB,EAAxB,CAFE;AAGLmL,QAAAA,CAAC,EAAE/B,OAAO,CAAC0C,aAHN;AAIL2H,QAAAA,EAAE,EAAErK,OAAO,CAACgE,KAAR,GAAgB,KAAKsG,uCAAL,CAA6CtK,OAAO,CAACgE,KAArD,CAAhB,GAA8ExH,SAJ7E;AAKL+N,QAAAA,CAAC,EAAEvK,OAAO,CAACuF,IALN;AAMLiF,QAAAA,EAAE,yBAAExK,OAAO,CAAC6G,UAAV,wDAAE,oBAAoBjQ,QAApB,EANC;AAOL6T,QAAAA,EAAE,wBAAEzK,OAAO,CAAC+G,SAAV,uDAAE,mBAAmBnQ,QAAnB,EAPC;AAQL8T,QAAAA,CAAC,EAAE1K,OAAO,CAACiH,OAAR,CAAgBzC,OAAhB,EARE;AASLmG,QAAAA,CAAC,sBAAE3K,OAAO,CAACkH,OAAV,qDAAE,iBAAiB1C,OAAjB,EATE;AAULoG,QAAAA,CAAC,EAAE,KAAKC,+CAAL,CAAqD7K,OAAO,CAAC8K,SAA7D;AAVE,OAAP;AAYD;AA5BH;AAAA;AAAA,WA8BY,iDAAwCC,YAAxC;AACR,aAAO;AACLvR,QAAAA,CAAC,EAAEuR,YAAY,CAACrF,OADX;AAEL6E,QAAAA,CAAC,EAAEQ,YAAY,CAACxS,QAFX;AAGLuB,QAAAA,CAAC,EAAEiR,YAAY,CAACpK,EAAb,KAAoB,IAApB,GAA2BoK,YAAY,CAACpK,EAAxC,GAA6CnE;AAH3C,OAAP;AAKD;AApCH;AAAA;AAAA,WAsCY,yDAAgDwO,gBAAhD;AACR,aAAO;AACLC,QAAAA,CAAC,EAAED,gBAAgB,CAACE,gBADf;AAELR,QAAAA,CAAC,EAAEM,gBAAgB,CAACG,QAFf;AAGLC,QAAAA,EAAE,EAAEJ,gBAAgB,CAACK;AAHhB,OAAP;AAKD;AA5CH;;AAAA;AAAA;;oCAAarB,wDACmD,IAAIX,gBAAJ,CAC5DU,2BAD4D;;ICGnDuB,mBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WAKE,qBAAYC,uBAAZ;AACE,UAAI;AACF,YAAMtB,iBAAiB,GAAGqB,mBAAmB,CAACE,mCAApB,CAAwDC,WAAxD,CAAoEF,uBAApE,CAA1B;AAEA,eAAOtB,iBAAiB,GAAG,KAAKyB,6BAAL,CAAmCzB,iBAAnC,CAAH,GAA2D,IAAnF;AACD,OAJD,CAKA,gBAAM;AACJ,eAAO,IAAP;AACD;AACF;AAdH;AAAA;AAAA,WAgBY,uCAA8BA,iBAA9B;AACR,aAAO;AACLxI,QAAAA,IAAI,EAAE3B,mBAAW,CAAC6G,OADb;AAELhG,QAAAA,EAAE,EAAEsJ,iBAAiB,CAACnQ,CAFjB;AAGLuJ,QAAAA,MAAM,EAAE,IAAI7K,6BAAJ,CAAcyR,iBAAiB,CAACzQ,CAAhC,CAHH;AAILkJ,QAAAA,aAAa,EAAEuH,iBAAiB,CAAClI,CAJ5B;AAKLiC,QAAAA,KAAK,EAAEiG,iBAAiB,CAACI,EAAlB,GAAuB,KAAKsB,uCAAL,CAA6C1B,iBAAiB,CAACI,EAA/D,CAAvB,GAA4F7N,SAL9F;AAML+I,QAAAA,IAAI,EAAE0E,iBAAiB,CAACM,CANnB;AAOL1D,QAAAA,UAAU,EAAEoD,iBAAiB,CAACO,EAAlB,GAAuB,IAAIlI,GAAJ,CAAQ2H,iBAAiB,CAACO,EAA1B,CAAvB,GAAuDhO,SAP9D;AAQLuK,QAAAA,SAAS,EAAEkD,iBAAiB,CAACQ,EAAlB,GAAuB,IAAInI,GAAJ,CAAQ2H,iBAAiB,CAACQ,EAA1B,CAAvB,GAAuDjO,SAR7D;AASLyK,QAAAA,OAAO,EAAE,IAAI1C,IAAJ,CAAS0F,iBAAiB,CAACS,CAA3B,CATJ;AAULxD,QAAAA,OAAO,EAAE+C,iBAAiB,CAACU,CAAlB,GAAsB,IAAIpG,IAAJ,CAAS0F,iBAAiB,CAACU,CAA3B,CAAtB,GAAsDnO,SAV1D;AAYLsO,QAAAA,SAAS,EAAE,KAAKc,+CAAL,CAAqD3B,iBAAiB,CAACW,CAAvE;AAZN,OAAP;AAcD;AA/BH;AAAA;AAAA,WAiCY,iDAAwCiB,sBAAxC;AACR,aAAO;AACLnG,QAAAA,OAAO,EAAEmG,sBAAsB,CAACrS,CAD3B;AAELjB,QAAAA,QAAQ,EAAEsT,sBAAsB,CAACtB,CAF5B;AAGL5J,QAAAA,EAAE,EAAEkL,sBAAsB,CAAC/R,CAAvB,KAA6B0C,SAA7B,GAAyCqP,sBAAsB,CAAC/R,CAAhE,GAAoE;AAHnE,OAAP;AAKD;AAvCH;AAAA;AAAA,WAyCY,yDAAgDgS,0BAAhD;AACR,aAAO;AACLZ,QAAAA,gBAAgB,EAAEY,0BAA0B,CAACb,CADxC;AAELE,QAAAA,QAAQ,EAAEW,0BAA0B,CAACpB,CAFhC;AAGLW,QAAAA,MAAM,EAAES,0BAA0B,CAACV;AAH9B,OAAP;AAKD;AA/CH;;AAAA;AAAA;;oCAAaE,4DACqD,IAAI3B,kBAAJ,CAC9DI,2BAD8D;;ACP9D,IAAIvP,GAAJ;AAAA,CAEDsP,GAFC,CAEG,GAFH,EAEQ,QAFR;AAAA,CAIDA,GAJC,CAIG,GAJH,EAIQ,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CAJR;;AAQA,IAAItP,GAAJ;AAAA,CAEDsP,GAFC,CAEG,IAFH,EAES,QAFT;AAAA,CAIDA,GAJC,CAIG,GAJH,EAIQ,QAJR;;AAMG,IAAMiC,4BAA4B,GAErC,IAAIvR,GAAJ;AAAA,CAEDsP,GAFC,CAEG,GAFH,EAEQ,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CAFR;AAAA,CAIDA,GAJC,CAIG,IAJH,EAIS,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CAJT;AAAA,CAMDA,GANC,CAMG,KANH,EAMU,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CANV;AAQF;AARE,CASDA,GATC,CASG,IATH,EASS,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CATT;AAAA,CAWDA,GAXC,CAWG,IAXH,EAWS,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CAXT;AAAA,CAaDA,GAbC,CAaG,GAbH,EAaQ,CAAC,QAAD,EAAW,WAAX,EAAwB,MAAxB,CAbR,CAFG;;ACZP,IAAMkC,2BAA2B,GAAG,KAApC;IACaC,kBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WAKE,mBAAUxE,QAAV;AACE,UAAI;AACF,YAAMyE,kBAAkB,GAAG,KAAKC,+BAAL,CAAqC1E,QAArC,CAA3B;AACA,YAAM2E,wBAAwB,GAAGH,kBAAkB,CAACI,kCAAnB,CAAsDjC,SAAtD,CAAgE8B,kBAAhE,CAAjC;AAEA,eAAOE,wBAAwB,KAAKJ,2BAA7B,GAA2D,EAA3D,GAAgEI,wBAAvE;AACD,OALD,CAMA,gBAAM;AACJ,eAAO,IAAP;AACD;AACF;AAfH;AAAA;AAAA,WAiBY,yCAAgC3E,QAAhC;;;AACR,aAAO;AACL8C,QAAAA,CAAC,EAAE9C,QAAQ,CAAClC,IADP;AAEL+G,QAAAA,EAAE,2BAAE7E,QAAQ,CAAC3D,aAAX,0DAAE,sBAAwBlN,QAAxB,CAAiC,EAAjC,CAFC;AAGL2V,QAAAA,GAAG,EAAE9E,QAAQ,CAACE,YAAT,GAAwB,KAAK6E,yCAAL,CAA+C/E,QAAQ,CAACE,YAAxD,CAAxB,GAAgGnL,SAHhG;AAILgO,QAAAA,EAAE,0BAAE/C,QAAQ,CAACZ,UAAX,yDAAE,qBAAqBjQ,QAArB,EAJC;AAKL6T,QAAAA,EAAE,yBAAEhD,QAAQ,CAACV,SAAX,wDAAE,oBAAoBnQ,QAApB,EALC;AAMLgU,QAAAA,CAAC,EAAEnD,QAAQ,CAACqD,SAAT,GAAqB,KAAK2B,iDAAL,CAAuDhF,QAAQ,CAACqD,SAAhE,CAArB,GAAkGtO;AANhG,OAAP;AAQD;AA1BH;AAAA;AAAA,WA4BY,mDAA0CkQ,aAA1C;AACR,aAAO;AACLlT,QAAAA,CAAC,EAAEkT,aAAa,CAAChH,OADZ;AAEL5L,QAAAA,CAAC,EAAE4S,aAAa,CAAC/L,EAAd,KAAqB,IAArB,GAA4B+L,aAAa,CAAC/L,EAA1C,GAA+CnE;AAF7C,OAAP;AAID;AAjCH;AAAA;AAAA,WAmCY,2DAAkDmQ,iBAAlD;AACR,aAAO;AACL1B,QAAAA,CAAC,EAAE0B,iBAAiB,CAACzB,gBADhB;AAELE,QAAAA,EAAE,EAAEuB,iBAAiB,CAACtB;AAFjB,OAAP;AAID;AAxCH;;AAAA;AAAA;;oCAAaY,0DACoD,IAAI5C,gBAAJ,CAC7D0C,4BAD6D;;ICEpDa,oBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WAKE,qBAAYR,wBAAZ,EAA8CS,0BAA9C;AACE,UAAI;AACF,YAAMX,kBAAkB,GAAGU,oBAAoB,CAACE,oCAArB,CAA0DrB,WAA1D,CAAsEW,wBAAtE,CAA3B;AAEA,eAAOF,kBAAkB,GAAG,KAAKa,+BAAL,CAAqCb,kBAArC,EAAyDW,0BAAzD,CAAH,GAA0F,IAAnH;AACD,OAJD,CAKA,gBAAM;AACJ,eAAO,IAAP;AACD;AACF;AAdH;AAAA;AAAA,WAgBY,yCAAgCX,kBAAhC,EAAwEW,0BAAxE;AACR,aAAO;AACLpL,QAAAA,IAAI,EAAE3B,mBAAW,CAAC4H,QADb;AAELnC,QAAAA,IAAI,EAAE2G,kBAAkB,CAAC3B,CAFpB;AAGLzG,QAAAA,aAAa,EAAEoI,kBAAkB,CAACI,EAAnB,GAAwB,IAAI9T,6BAAJ,CAAc0T,kBAAkB,CAACI,EAAjC,CAAxB,GAA+D9P,SAHzE;AAILmL,QAAAA,YAAY,EAAEuE,kBAAkB,CAACK,GAAnB,GAAyB,KAAKS,yCAAL,CAA+Cd,kBAAkB,CAACK,GAAlE,CAAzB,GAAkG/P,SAJ3G;AAKLqK,QAAAA,UAAU,EAAEqF,kBAAkB,CAAC1B,EAAnB,GAAwB,IAAIlI,GAAJ,CAAQ4J,kBAAkB,CAAC1B,EAA3B,CAAxB,GAAyDhO,SALhE;AAMLuK,QAAAA,SAAS,EAAEmF,kBAAkB,CAACzB,EAAnB,GAAwB,IAAInI,GAAJ,CAAQ4J,kBAAkB,CAACzB,EAA3B,CAAxB,GAAyDjO,SAN/D;AAOLkG,QAAAA,aAAa,EAAEmK,0BAA0B,CAACnK,aAPrC;AAQLoI,QAAAA,SAAS,EAAEoB,kBAAkB,CAACtB,CAAnB,GAAuB,KAAKqC,iDAAL,CAAuDf,kBAAkB,CAACtB,CAA1E,CAAvB,GAAsGpO;AAR5G,OAAP;AAUD;AA3BH;AAAA;AAAA,WA6BY,mDAA0C0Q,uBAA1C;AACR,aAAO;AACLxH,QAAAA,OAAO,EAAEwH,uBAAuB,CAAC1T,CAD5B;AAELmH,QAAAA,EAAE,EAAEuM,uBAAuB,CAACpT,CAAxB,KAA8B0C,SAA9B,GAA0C0Q,uBAAuB,CAACpT,CAAlE,GAAsE;AAFrE,OAAP;AAID;AAlCH;AAAA;AAAA,WAoCY,2DAAkDqT,2BAAlD;AACR,aAAO;AACLjC,QAAAA,gBAAgB,EAAEiC,2BAA2B,CAAClC,CADzC;AAELI,QAAAA,MAAM,EAAE8B,2BAA2B,CAAC/B;AAF/B,OAAP;AAID;AAzCH;;AAAA;AAAA;;oCAAawB,8DACsD,IAAIjD,kBAAJ,CAC/DoC,4BAD+D;;;;;ICsBtDpF,OAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAIE,kBAAgB3G,OAAhB;AACE,aAAO2G,OAAO,CAACyG,gBAAR,CAAyB5D,QAAzB,CAAkCxJ,OAAlC,CAAP;AACD;AANH;AAAA;AAAA,WAQE,qBAAmBiK,iBAAnB;AACE,aAAOtD,OAAO,CAAC0G,mBAAR,CAA4B5B,WAA5B,CAAwCxB,iBAAxC,CAAP;AACD;AAVH;;AAAA;AAAA,EAA6BpC,UAA7B;;oCAAalB,gCACgD,IAAI2E,mBAAJ;;oCADhD3E,6BAE0C,IAAID,gBAAJ;;;;;ICL1CgB,QAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAIE,kBAAgBD,QAAhB;AACE,aAAOC,QAAQ,CAAC0F,gBAAT,CAA0B5D,QAA1B,CAAmC/B,QAAnC,CAAP;AACD;AANH;AAAA;AAAA,WAQE,qBAAmByE,kBAAnB,EAA+CW,0BAA/C;AACE,aAAOnF,QAAQ,CAAC2F,mBAAT,CAA6B5B,WAA7B,CAAyCS,kBAAzC,EAA6DW,0BAA7D,CAAP;AACD;AAVH;;AAAA;AAAA,EAA8BhF,UAA9B;;oCAAaH,iCACiD,IAAIkF,oBAAJ;;oCADjDlF,8BAE2C,IAAIF,iBAAJ;;AC/B5C8F;;AAAZ,WAAYA;AACVA,EAAAA,4CAAA,WAAA;AACD,CAFD,EAAYA,sBAAc,KAAdA,sBAAc,KAAA,CAA1B;;AAIA,IAAMC,wBAAwB,GAAG,IAAI/S,GAAJ,CAC/BY,MAAM,CAACC,IAAP,CAAYiS,sBAAZ,EACGxL,MADH,CACU,UAAAhL,KAAK;AAAA,SAAI,CAACyM,KAAK,CAAC,CAACzM,KAAF,CAAV;AAAA,CADf,EAEGY,GAFH,CAEO,UAAAZ,KAAK;AAAA,SAAI,CAAC,CAACA,KAAF,EAAS0W,QAAA,CAAc1W,KAAd,EAAqB,CAArB,EAAwB,GAAxB,CAAT,CAAJ;AAAA,CAFZ,CAD+B,CAAjC;IAMa2W,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,cAAD;AAAA,SAAoCH,wBAAwB,CAACI,GAAzB,CAA6BD,cAA7B,KAAgD,EAApF;AAAA;;ICN3BE,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCC,OADmC,EACjBC,QADiB;AAGlCD,EAAAA,OAA0C,CAACC,QAA3C,GAAsDA,QAAtD;AAED,SAAOD,OAAP;AACD;;ACZWE;;AAAZ,WAAYA;AACVA,EAAAA,yDAAA,YAAA;AACAA,EAAAA,0DAAA,aAAA;AAEAA,EAAAA,qDAAA,QAAA;AACD,CALD,EAAYA,4BAAoB,KAApBA,4BAAoB,KAAA,CAAhC;;IC2BaC,YAAY,GAAY;AACnCpN,EAAAA,IAAI,EAAE,EAD6B;AAEnCqN,EAAAA,WAAW,EAAE,EAFsB;AAGnCC,EAAAA,KAAK,EAAEC,YAAY,CAAC9T,UAHe;AAInC+T,EAAAA,OAAO,EAAE,CAJ0B;AAKnCzM,EAAAA,QAAQ,EAAE,EALyB;AAMnCD,EAAAA,eAAe,EAAE,EANkB;AAOnC2M,EAAAA,aAAa,EAAE;AACbvV,IAAAA,GAAG,EAAE,IADQ;AAEbwV,IAAAA,MAAM,EAAEH,YAAY,CAAC9T;AAFR,GAPoB;AAWnCkU,EAAAA,oBAAoB,EAAER,4BAAoB,CAACpH,OAXR;AAYnC6H,EAAAA,KAAK,EAAE,EAZ4B;AAanCC,EAAAA,MAAM,EAAE,KAb2B;AAcnCC,EAAAA,OAAO,EAAE,KAd0B;AAenClN,EAAAA,OAAO,EAAEV,QAAQ,CAACJ,OAfiB;AAgBnCiO,EAAAA,WAAW,EAAER,YAAY,CAAC5T;AAhBS;;AC3BzBqU;;AAAZ,WAAYA;AACVA,EAAAA,2CAAA,YAAA;AACAA,EAAAA,4CAAA,aAAA;AACD,CAHD,EAAYA,qBAAa,KAAbA,qBAAa,KAAA,CAAzB;;ACAYC;;AAAZ,WAAYA;AACVA,EAAAA,sDAAA,aAAA;AACAA,EAAAA,sDAAA,aAAA;AACD,CAHD,EAAYA,0BAAkB,KAAlBA,0BAAkB,KAAA,CAA9B;;ACAYC;;AAAZ,WAAYA;AACVA,EAAAA,+CAAA,YAAA;AACAA,EAAAA,+CAAA,YAAA;AACAA,EAAAA,iDAAA,cAAA;AACD,CAJD,EAAYA,uBAAe,KAAfA,uBAAe,KAAA,CAA3B;;;;;ICmBaC,iBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,sBAAoBhY,YAApB;AACE,UAAMiY,WAAW,GAAGC,aAAA,CAAyBlY,YAAzB,CAApB;AAEA,UAAID,KAAK,GAAsC,IAA/C;;AACA,UAAI;AAAEA,QAAAA,KAAK,GAAGmB,IAAI,CAACG,KAAL,CAAW4W,WAAX,CAAR;AAAkC,OAAxC,CAAyC,gBAAM;AAAE;AAAM;;AAEvD,aAAO;AACLlY,QAAAA,KAAK,EAALA,KADK;AAELkY,QAAAA,WAAW,EAAXA,WAFK;AAGLjY,QAAAA,YAAY,EAAZA;AAHK,OAAP;AAKD;AAZH;;AAAA;AAAA,EAAuC8Q,UAAvC;;IChBaqH,0BAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,gBAAOzH,QAAP;AACE,aAAO;AACL0H,QAAAA,iBAAiB,EAAE,KAAKC,oBAAL,CAA0B3H,QAA1B;AADd,OAAP;AAGD;AALH;AAAA;AAAA,WAOY,8BAAqBA,QAArB;AACR,aACE,CAACA,QAAQ,CAACZ,UAAT,GAAsBY,QAAQ,CAACZ,UAAT,CAAoBwI,IAA1C,GAAiD,EAAlD,KACG5H,QAAQ,CAACV,SAAT,GAAqBU,QAAQ,CAACV,SAAT,CAAmBsI,IAAxC,GAA+C,EADlD,CADK,IAGF,IAHL;AAID;AAZH;;AAAA;AAAA;;ACKA;AACO,IAAMC,6BAA6B,GAAG,8CAAtC;;AAEA,IAAMC,2CAA2C,GAAG,4CAApD;;ACTA,IAAMC,4CAA4C,GAAkB;AACzEC,EAAAA,IAAI,EAAE,MADmE;AAEzEtH,EAAAA,IAAI,EAAE,CACJ;AACEsH,IAAAA,IAAI,EAAE,MADR;AAEEtH,IAAAA,IAAI,EAAE,CACJ;AAAEsH,MAAAA,IAAI,EAAE;AAAR,KADI,EAEJ;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAFI;AAFR,GADI,EAQJ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GARI;AAFmE,CAApE;AAcA,IAAMC,8CAA8C,GAAkB;AAC3ED,EAAAA,IAAI,EAAE,MADqE;AAE3EtH,EAAAA,IAAI,EAAE,CACJ;AACEsH,IAAAA,IAAI,EAAE,MADR;AAEEtH,IAAAA,IAAI,EAAE,CACJ;AACEsH,MAAAA,IAAI,EAAE,MADR;AAEEtH,MAAAA,IAAI,EAAE,CACJ;AAAEsH,QAAAA,IAAI,EAAE;AAAR,OADI,EAEJ;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAFI;AAFR,KADI,EAQJ;AACEA,MAAAA,IAAI,EAAE,MADR;AAEEtH,MAAAA,IAAI,EAAE,CACJ;AAAEsH,QAAAA,IAAI,EAAE;AAAR,OADI,EAEJ;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAFI;AAFR,KARI;AAFR,GADI,EAoBJ;AACEA,IAAAA,IAAI,EAAE,QADR;AAEEtH,IAAAA,IAAI,EAAE,CAAC;AAAEsH,MAAAA,IAAI,EAAE;AAAR,KAAD;AAFR,GApBI;AAFqE,CAAtE;;ICPME,yBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WAIE,gBAAO3P,OAAP;AACE,aAAO;AACL4P,QAAAA,mBAAmB,EAAE,KAAKC,sBAAL,CAA4B7P,OAA5B,CADhB;AAELmP,QAAAA,iBAAiB,EAAE,KAAKC,oBAAL,CAA0BpP,OAA1B;AAFd,OAAP;AAID;AATH;AAAA;AAAA,WAWY,gCAAuBA,OAAvB;AACR,UAAM8P,WAAW,GAAG9P,OAAO,CAACgE,KAAR,GAChB+L,yBAAa,CACb;AACEN,QAAAA,IAAI,EAAE,MADR;AAEEtH,QAAAA,IAAI,EAAE,CACJ;AACEsH,UAAAA,IAAI,EAAE,MADR;AAEEtH,UAAAA,IAAI,EAAE,CACJ;AACEsH,YAAAA,IAAI,EAAE,MADR;AAEEtH,YAAAA,IAAI,EAAE,CACJ;AAAEhM,cAAAA,MAAM,EAAE6D,OAAO,CAACW;AAAlB,aADI,EAEJ;AAAExE,cAAAA,MAAM,EAAE6D,OAAO,CAAC0C;AAAlB,aAFI;AAFR,WADI,EAQJ;AACE+M,YAAAA,IAAI,EAAE,MADR;AAEEtH,YAAAA,IAAI,EAAE,CACJ;AAAE,qBAAK9P,iBAAiB,CAAC2H,OAAO,CAACqD,MAAT,EAAiBrD,OAAO,CAACgE,KAAR,CAAczL,QAA/B,CAAjB,CAA0D3B,QAA1D,CAAmE,EAAnE;AAAP,aADI,EAEJ;AAAEuF,cAAAA,MAAM,EAAE6D,OAAO,CAACgE,KAAR,CAAc0B;AAAxB,aAFI;AAFR,WARI;AAFR,SADI,EAoBJ1F,OAAO,CAACgE,KAAR,CAAcrD,EAAd,KAAqBnE,SAArB,IAAkCwD,OAAO,CAACgE,KAAR,CAAcrD,EAAd,KAAqB,IAAvD,GACI;AAAE8O,UAAAA,IAAI,EAAE,MAAR;AAAgBtH,UAAAA,IAAI,EAAE,CAAC;AAAE,mBAAKnI,OAAO,CAACgE,KAAR,CAAcrD,EAAd,CAAiB/J,QAAjB;AAAP,WAAD;AAAtB,SADJ,GAEI;AAAE6Y,UAAAA,IAAI,EAAE;AAAR,SAtBA;AAFR,OADa,EA4BbC,8CA5Ba,CADG,GA+BhBK,yBAAa,CACb;AACEN,QAAAA,IAAI,EAAE,MADR;AAEEtH,QAAAA,IAAI,EAAE,CACJ;AACEsH,UAAAA,IAAI,EAAE,MADR;AAEEtH,UAAAA,IAAI,EAAE,CACJ;AAAEhM,YAAAA,MAAM,EAAE6D,OAAO,CAACW;AAAlB,WADI,EAEJ;AAAExE,YAAAA,MAAM,EAAE6D,OAAO,CAAC0C;AAAlB,WAFI;AAFR,SADI,EAQJ;AAAE,iBAAK7J,UAAU,CAACmH,OAAO,CAACqD,MAAT,CAAV,CAA2BzM,QAA3B,CAAoC,EAApC;AAAP,SARI;AAFR,OADa,EAcb4Y,4CAda,CA/BjB;AAgDA,aAAO,OAAOM,WAAW,CAACE,KAA1B;AACD;AA7DH;AAAA;AAAA,WA+DY,8BAAqBhQ,OAArB;;;AACR,UAAMmP,iBAAiB,GAAsB;AAC3C5J,QAAAA,IAAI,EAAEvF,OAAO,CAACuF,IAD6B;AAE3CsB,QAAAA,UAAU,yBAAE7G,OAAO,CAAC6G,UAAV,wDAAE,oBAAoBwI,IAFW;AAG3CtI,QAAAA,SAAS,wBAAE/G,OAAO,CAAC+G,SAAV,uDAAE,mBAAmBsI;AAHa,OAA7C;AAKA,UAAMY,2BAA2B,GAAGhY,IAAI,CAACC,SAAL,CAClCiX,iBADkC,EAElC,UAACe,IAAD,EAAOpZ,KAAP;AAAA,eAAiBA,KAAK,KAAK0F,SAAV,IAAuB1F,KAAK,KAAK,IAAjC,IAAyCA,KAAK,KAAK,EAAnD,GAAwDA,KAAxD,GAAgE0F,SAAjF;AAAA,OAFkC,CAApC;AAIA,UAAIyT,2BAA2B,KAAK,IAApC,EACE,OAAO,IAAP;AAEF,UAAME,gCAAgC,GAAGlB,aAAA,CAAyBgB,2BAAzB,CAAzC;AACA,UAAMG,kBAAkB,GAAGd,6BAA6B,GAAGC,2CAAhC,GAA8EY,gCAAzG;AACA,UAAME,aAAa,GAAG7C,QAAA,CAAc,CAAC4C,kBAAkB,CAAChZ,MAAnB,GAA4B,CAA7B,EAAgCR,QAAhC,CAAyC,EAAzC,CAAd,EAA4D,CAA5D,EAA+D,GAA/D,CAAtB;AACA,UAAMmF,MAAM,GAAG,WAAWsU,aAAX,GAA2BD,kBAA1C;AAEA,aAAOrU,MAAP;AACD;AAlFH;;AAAA;AAAA;;oCAAa4T,2EAC6EH;;oCAD7EG,6EAE+ED;;ICL/EY,mBAAb;AAAA;AAAA;;AAAA,gEAC2B,KAD3B;AAAA;;AAAA;AAAA;AAAA,SAGE;AACE,aAAO,KAAKC,cAAZ;AACD;AALH;AAAA;AAAA,WAOE;AACE,UAAI,CAAC,KAAKC,aAAV,EACE,MAAM,IAAInZ,KAAJ,CAAU,0CAAV,CAAN;AAEF,UAAMoZ,OAAO,GAAGC,0BAAM,CAACC,mBAAP,CAA2B,YAA3B,CAAhB;AACA,UAAMC,GAAG,GAAY;AACnBC,QAAAA,OAAO,EAAExO,eAAO,CAACyO,OADE;AAEnBC,QAAAA,UAAU,EAAEN,OAAO,CAACM,UAFD;AAGnBC,QAAAA,SAAS,EAAEP,OAAO,CAACO;AAHA,OAArB;AAMA,UAAMC,OAAO,GAAmB;AAC9BJ,QAAAA,OAAO,EAAExO,eAAO,CAACyO,OADa;AAE9BC,QAAAA,UAAU,EAAEG,gBAAU,CAACN,GAAG,CAACG,UAAL,EAAiBhO,YAAM,CAAC,MAAD,CAAvB,CAFQ;AAG9BiO,QAAAA,SAAS,EAAEE,gBAAU,CAACN,GAAG,CAACI,SAAL,EAAgBjO,YAAM,CAAC,MAAD,CAAtB;AAHS,OAAhC;AAMA,aAAO;AACL6N,QAAAA,GAAG,EAAHA,GADK;AAELK,QAAAA,OAAO,EAAPA;AAFK,OAAP;AAID;AA5BH;AAAA;AAAA;AAAA,yHA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACQP,0BAAM,CAACS,KADf;;AAAA;AAEE,qBAAKZ,cAAL,GAAsB,IAAtB;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA9BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qHAmCE;AAAA;AAAA;AAAA;AAAA;AAAA;AACQa,gBAAAA,QADR,GACmB,IAAId,mBAAJ,EADnB;AAAA;AAAA,uBAEQc,QAAQ,CAACC,UAAT,EAFR;;AAAA;AAAA,kDAISD,QAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAnCF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;ICAaE,yBAAb;AAmBE,qCAAYC,SAAZ;;;AACE,SAAKC,EAAL,GAAU,IAAIA,WAAJ,CAAOD,SAAP,CAAV;AACA,SAAKE,SAAL,GAAiBH,yBAAyB,CAACG,SAA1B,CAAoCF,SAApC,CAAjB;AACD;;AAtBH;AAAA;AAAA,WAwBE;AACE,UAAMd,OAAO,GAAG,KAAKe,EAAL,CAAQE,UAAR,EAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYnB,OAAZ;AAEA,UAAMoB,eAAe,GAAGpB,OAAO,CAACqB,SAAR,EAAxB;AACA,UAAMC,YAAY,GAAGF,eAAe,CAACG,IAAhB,GAAuBC,OAAvB,EAArB;AACA,UAAMC,YAAY,GAAGL,eAAe,CAACM,IAAhB,GAAuBF,OAAvB,EAArB;;AAEA,UAAMG,SAAS,GAAGF,YAAY,CAACA,YAAY,CAAC9a,MAAb,GAAsB,CAAvB,CAAZ,GAAyC,CAAzC,GAA6C,CAA7C,GAAiD,CAAnE;AAEA,UAAM2Z,UAAU,GAAG,IAAIlZ,UAAJ,CAAe4Y,OAAO,CAAC4B,UAAR,GAAqBJ,OAArB,EAAf,CAAnB;AACA,UAAMK,GAAG,GAAG,IAAInZ,KAAJ,CAAU,EAAV,EAAcoZ,IAAd,CAAmB,CAAnB,CAAZ;AACA,UAAMvB,SAAS,GAAG,IAAInZ,UAAJ,CAAe,CAACua,SAAD,EAAY5R,MAAZ,CAAmB8R,GAAG,CAAC9R,MAAJ,CAAWuR,YAAX,EAAyBnW,KAAzB,CAA+B,CAAC,EAAhC,CAAnB,CAAf,CAAlB;AAEA,UAAMgV,GAAG,GAAY;AACnBC,QAAAA,OAAO,EAAExO,eAAO,CAACmQ,IADE;AAEnBzB,QAAAA,UAAU,EAAVA,UAFmB;AAGnBC,QAAAA,SAAS,EAATA;AAHmB,OAArB;AAMA,UAAMC,OAAO,GAAmB;AAC9BJ,QAAAA,OAAO,EAAE,KAAKY,SAAL,CAAeZ,OADM;AAE9BE,QAAAA,UAAU,EAAEG,gBAAU,CAACH,UAAD,EAAa,KAAKU,SAAL,CAAegB,gBAA5B,CAFQ;AAG9BzB,QAAAA,SAAS,EAAEE,gBAAU,CAACF,SAAD,EAAY,KAAKS,SAAL,CAAeiB,eAA3B;AAHS,OAAhC;AAMA,aAAO;AACL9B,QAAAA,GAAG,EAAHA,GADK;AAELK,QAAAA,OAAO,EAAPA;AAFK,OAAP;AAID;AAtDH;;AAAA;AAAA;;oCAAaK,wCAC2B;AACpCqB,EAAAA,SAAS,EAAE;AACT/R,IAAAA,IAAI,EAAE,WADG;AAETiQ,IAAAA,OAAO,EAAExO,eAAO,CAACuQ,SAFR;AAGTH,IAAAA,gBAAgB,EAAE1P,YAAM,CAAC,MAAD,CAHf;AAIT2P,IAAAA,eAAe,EAAE3P,YAAM,CAAC,MAAD;AAJd,GADyB;AAOpC8P,EAAAA,IAAI,EAAE;AACJjS,IAAAA,IAAI,EAAE,MADF;AAEJiQ,IAAAA,OAAO,EAAExO,eAAO,CAACmQ,IAFb;AAGJC,IAAAA,gBAAgB,EAAE1P,YAAM,CAAC,MAAD,CAHpB;AAIJ2P,IAAAA,eAAe,EAAE3P,YAAM,CAAC,MAAD;AAJnB;AAP8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}