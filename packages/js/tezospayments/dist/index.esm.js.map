{"version":3,"file":"index.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/paymentUrlFactories/paymentUrlFactory.ts","../src/paymentUrlFactories/base64PaymentUrlFactory.ts","../src/signers/tezosPaymentsSigner.ts","../src/models.ts","../src/signers/apiSecretKeySigner.ts","../src/signers/walletSigner.ts","../src/signers/customSigner.ts","../src/validation/tezosPaymentsOptionsValidator.ts","../src/tezosPayments.ts","../src/index.ts"],"sourcesContent":["export default {\n  defaultNetworkName: 'mainnet',\n  paymentAppBaseUrl: 'https://payment.tezospayments.com'\n} as const;\n","import { guards } from '@tezospayments/common';\n\nconst getErrorMessageByValidationErrors = (validationErrors: readonly string[], brief = '') => validationErrors\n  .reduce((result, error, index) => `${result}\\n\\t${index + 1}. ${error};`, brief);\n\nexport abstract class TezosPaymentsError extends Error {\n  readonly name: string;\n\n  constructor(message?: string) {\n    super(message);\n\n    this.name = this.constructor.name;\n  }\n}\n\nexport class InvalidTezosPaymentsOptionsError extends TezosPaymentsError {\n  constructor(message?: string);\n  constructor(validationErrors: readonly string[]);\n  constructor(messageOrValidationErrors: (string | undefined) | readonly string[]) {\n    super(\n      guards.isReadonlyArray(messageOrValidationErrors)\n        ? InvalidTezosPaymentsOptionsError.getMessage(messageOrValidationErrors)\n        : messageOrValidationErrors\n    );\n  }\n\n  private static getMessage(validationErrors: readonly string[]): string {\n    return getErrorMessageByValidationErrors(validationErrors, 'options are invalid, see details below:');\n  }\n}\n\nexport class InvalidPaymentCreateParametersError extends TezosPaymentsError {\n}\n\nexport class InvalidPaymentError extends TezosPaymentsError {\n  constructor(message?: string);\n  constructor(validationErrors: readonly string[]);\n  constructor(messageOrValidationErrors: (string | undefined) | readonly string[]) {\n    super(\n      guards.isReadonlyArray(messageOrValidationErrors)\n        ? InvalidPaymentError.getMessage(messageOrValidationErrors)\n        : messageOrValidationErrors\n    );\n  }\n\n  private static getMessage(validationErrors: readonly string[]): string {\n    return getErrorMessageByValidationErrors(validationErrors, 'payment is invalid, see details below:');\n  }\n}\n\nexport class UnsupportedPaymentUrlTypeError extends TezosPaymentsError {\n}\n\nexport class PaymentUrlError extends TezosPaymentsError {\n}\n\nexport class DonationUrlError extends TezosPaymentsError {\n}\n","import { CustomNetwork, Donation, Network, Payment, PaymentUrlType } from '@tezospayments/common';\n\nexport abstract class PaymentUrlFactory {\n  constructor(readonly urlType: PaymentUrlType) {\n  }\n\n  abstract createPaymentUrl(paymentOrDonation: Payment | Donation, network: Network | CustomNetwork): string | Promise<string>;\n}\n","import {\n  native, PaymentUrlType,\n  PaymentSerializer, CustomNetwork, Network, Payment, Donation, DonationSerializer, PaymentType, getEncodedPaymentUrlType\n} from '@tezospayments/common';\n\nimport constants from '../constants';\nimport { DonationUrlError, PaymentUrlError } from '../errors';\nimport { PaymentUrlFactory } from './paymentUrlFactory';\n\nexport class Base64PaymentUrlFactory extends PaymentUrlFactory {\n  static readonly baseUrl = constants.paymentAppBaseUrl;\n\n  protected readonly paymentSerializer: PaymentSerializer = new PaymentSerializer();\n  protected readonly donationSerializer: DonationSerializer = new DonationSerializer();\n\n  constructor(readonly baseUrl: string = Base64PaymentUrlFactory.baseUrl) {\n    super(PaymentUrlType.Base64);\n  }\n\n  createPaymentUrl(paymentOrDonation: Payment | Donation, network: Network | CustomNetwork): string {\n    return paymentOrDonation.type === PaymentType.Payment\n      ? this.createPaymentUrlInternal(paymentOrDonation, network)\n      : this.createDonationUrlInternal(paymentOrDonation, network);\n  }\n\n  protected createPaymentUrlInternal(payment: Payment, network: Network | CustomNetwork): string {\n    const serializedPaymentBase64 = this.paymentSerializer.serialize(payment);\n    if (!serializedPaymentBase64)\n      throw new PaymentUrlError('It\\'s impossible to serialize the payment');\n\n    try {\n      const url = new native.URL(this.baseUrl);\n\n      return this.createUrl(url, serializedPaymentBase64, network);\n    } catch (error: unknown) {\n      throw new PaymentUrlError('It\\'s impossible to create an URL for the payment');\n    }\n  }\n\n  protected createDonationUrlInternal(donation: Donation, network: Network | CustomNetwork): string {\n    const serializedDonationBase64 = this.donationSerializer.serialize(donation);\n    if (!serializedDonationBase64 && serializedDonationBase64 !== '')\n      throw new DonationUrlError('It\\'s impossible to serialize the donation');\n\n    try {\n      const url = new native.URL(`${donation.targetAddress}/donation`, this.baseUrl);\n\n      return this.createUrl(url, serializedDonationBase64, network);\n    } catch (error: unknown) {\n      throw new DonationUrlError('It\\'s impossible to create an URL for the donation');\n    }\n  }\n\n  protected createUrl(baseUrl: native.URL, serializedPaymentOrDonationBase64: string, network: Network | CustomNetwork) {\n    if (serializedPaymentOrDonationBase64 !== '')\n      baseUrl.hash = getEncodedPaymentUrlType(this.urlType) + serializedPaymentOrDonationBase64;\n    if (network.name !== constants.defaultNetworkName)\n      baseUrl.searchParams.append('network', network.name);\n\n    return baseUrl.href;\n  }\n}\n","import { UnsignedPayment, PaymentSignature } from '@tezospayments/common';\n\nimport type { SigningType } from '../models';\n\nexport abstract class TezosPaymentsSigner {\n  constructor(readonly signingType: SigningType) {\n  }\n\n  abstract sign(payment: UnsignedPayment): PaymentSignature | Promise<PaymentSignature>;\n}\n","export type Payment = import('@tezospayments/common').Payment & {\n  readonly url: string;\n};\n\nexport enum SigningType {\n  ApiSecretKey = 0,\n  Wallet = 1,\n  Custom = 2,\n}\n","import { InMemorySigner } from '@taquito/signer';\n\nimport { PaymentSignPayloadEncoder, PaymentSignature, UnsignedPayment } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class ApiSecretKeySigner extends TezosPaymentsSigner {\n  protected readonly paymentSignPayloadEncoder: PaymentSignPayloadEncoder = new PaymentSignPayloadEncoder();\n  protected readonly inMemorySigner: InMemorySigner;\n\n  constructor(readonly apiSecretKey: string) {\n    super(SigningType.ApiSecretKey);\n\n    this.inMemorySigner = new InMemorySigner(this.apiSecretKey);\n  }\n\n  async sign(payment: UnsignedPayment): Promise<PaymentSignature> {\n    const signPayload = this.paymentSignPayloadEncoder.encode(payment);\n    const contractSigningPromise = this.inMemorySigner.sign(signPayload.contractSignPayload);\n    const signingPromises = signPayload.clientSignPayload\n      ? [contractSigningPromise, this.inMemorySigner.sign(signPayload.clientSignPayload)] as const\n      : [contractSigningPromise] as const;\n\n    const signatures = await Promise.all(signingPromises);\n\n    return {\n      signingPublicKey: await this.inMemorySigner.publicKey(),\n      contract: signatures[0].prefixSig,\n      client: signatures[1]?.prefixSig,\n    };\n  }\n}\n","import { UnsignedPayment, PaymentSignature, PaymentSignPayloadEncoder } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class WalletSigner extends TezosPaymentsSigner {\n  protected readonly paymentSignPayloadEncoder: PaymentSignPayloadEncoder = new PaymentSignPayloadEncoder();\n\n  constructor(readonly signingPublicKey: string, readonly walletSignCallback: (dataBytes: string) => Promise<string>) {\n    super(SigningType.Wallet);\n  }\n\n  async sign(payment: UnsignedPayment): Promise<PaymentSignature> {\n    const signPayload = this.paymentSignPayloadEncoder.encode(payment);\n    const walletContractSignPayload = signPayload.contractSignPayload.substring(2);\n\n    const contractSigningPromise = this.walletSignCallback(walletContractSignPayload);\n    const signingPromises = signPayload.clientSignPayload\n      ? [contractSigningPromise, this.walletSignCallback(signPayload.clientSignPayload)] as const\n      : [contractSigningPromise] as const;\n\n    const signatures = await Promise.all(signingPromises);\n\n    return {\n      signingPublicKey: this.signingPublicKey,\n      contract: signatures[0],\n      client: signatures[1],\n    };\n  }\n}\n","import type { UnsignedPayment, PaymentSignature } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class CustomSigner extends TezosPaymentsSigner {\n  constructor(readonly customSigning: (payment: UnsignedPayment) => PaymentSignature | Promise<PaymentSignature>) {\n    super(SigningType.Custom);\n  }\n\n  sign(payment: UnsignedPayment): PaymentSignature | Promise<PaymentSignature> {\n    return this.customSigning(payment);\n  }\n}\n","import { CustomNetwork, DeepReadonly, FailedValidationResults, Network, networkIdRegExp, networkNameRegExp, PaymentUrlType, tezosInfo } from '@tezospayments/common';\n\nimport type { TezosPaymentsApiSigningOptions, TezosPaymentsCustomSigningOptions, TezosPaymentsOptions, TezosPaymentsWalletSigningOptions } from '../options';\n\nexport class TezosPaymentsOptionsValidator {\n  static readonly errors = {\n    // serviceContractAddress\n    invalidServiceContractAddressType: 'Type of the serviceContractAddress option is invalid',\n    serviceContractAddressHasInvalidLength: 'The serviceContractAddress option has an invalid address',\n    serviceContractAddressIsNotContractAddress: 'The serviceContractAddress option isn\\'t a contract address',\n    // signing\n    invalidSigningOption: 'The signing option is invalid',\n    // signing.apiSecretKey\n    invalidApiSecretKeyType: 'The API secret key has an invalid type, it should be a string',\n    emptyApiSecretKey: 'The API secret key is empty',\n    // signing.wallet\n    invalidWalletSigningOption: 'The \"signing.wallet\" option is invalid',\n    invalidWalletSigningPublicKey: 'The wallet signing public key has an invalid type, it should be a string',\n    emptyWalletSigningPublicKey: 'The wallet signing public key is empty',\n    invalidWalletSignFunctionType: 'The wallet sign function has an invalid type, it should be a function',\n    // signing.custom\n    invalidCustomSigningOption: 'The \"signing.custom\" option has an invalid type, it should be a function',\n    // network\n    emptyNetworkName: 'The network name is empty',\n    invalidNetwork: 'The network is invalid',\n    invalidNetworkName: 'The network name is invalid',\n    invalidNetworkId: 'The network id is invalid',\n    // defaultPaymentParameters\n    invalidDefaultPaymentParameters: 'The default payment parameters are invalid',\n    // defaultPaymentParameters.urlType\n    invalidUrlType: 'The url type is invalid'\n  } as const;\n\n  validateOptions(options: DeepReadonly<TezosPaymentsOptions>): FailedValidationResults {\n    return [\n      this.validateServiceContractAddress(options.serviceContractAddress),\n      this.validateNetwork(options.network),\n      this.validateSigningOptions(options.signing),\n      this.validateDefaultPaymentParameters(options.defaultPaymentParameters)\n    ].reduce(\n      (result, currentErrors) => currentErrors ? (result || []).concat(currentErrors) : result,\n      undefined\n    );\n  }\n\n  validateServiceContractAddress(serviceContractAddress: string): FailedValidationResults {\n    if (!serviceContractAddress || typeof serviceContractAddress !== 'string')\n      return [TezosPaymentsOptionsValidator.errors.invalidServiceContractAddressType];\n\n    if (serviceContractAddress.length !== tezosInfo.addressLength)\n      return [TezosPaymentsOptionsValidator.errors.serviceContractAddressHasInvalidLength];\n\n    if (!tezosInfo.contractAddressPrefixes.some(prefix => serviceContractAddress.startsWith(prefix)))\n      return [TezosPaymentsOptionsValidator.errors.serviceContractAddressIsNotContractAddress];\n  }\n\n  validateNetwork(network: Network | CustomNetwork | undefined | null): FailedValidationResults {\n    if (network === undefined || network === null)\n      return;\n\n    if (typeof network !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidNetwork];\n\n    if (network.name === undefined || network.name === '')\n      return [TezosPaymentsOptionsValidator.errors.emptyNetworkName];\n\n    if (typeof network.name !== 'string' || !networkNameRegExp.test(network.name))\n      return [TezosPaymentsOptionsValidator.errors.invalidNetworkName];\n\n    if (network.id && (typeof network.id !== 'string' || !networkIdRegExp.test(network.id)))\n      return [TezosPaymentsOptionsValidator.errors.invalidNetworkId];\n  }\n\n  validateSigningOptions(signingOptions: TezosPaymentsOptions['signing']): FailedValidationResults {\n    if (typeof signingOptions !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidSigningOption];\n\n    if (!('apiSecretKey' in signingOptions) && !('wallet' in signingOptions) && !('custom' in signingOptions))\n      return [TezosPaymentsOptionsValidator.errors.invalidSigningOption];\n\n    if ('apiSecretKey' in signingOptions)\n      return this.validateApiSecretKeySigningOptions(signingOptions);\n\n    if ('wallet' in signingOptions)\n      return this.validateWalletSigningOptions(signingOptions);\n\n    if ('custom' in signingOptions)\n      return this.validateCustomSigningOptions(signingOptions);\n  }\n\n  validateApiSecretKeySigningOptions(signingOptions: TezosPaymentsApiSigningOptions): FailedValidationResults {\n    if (typeof signingOptions.apiSecretKey !== 'string')\n      return [TezosPaymentsOptionsValidator.errors.invalidApiSecretKeyType];\n    if (!signingOptions.apiSecretKey)\n      return [TezosPaymentsOptionsValidator.errors.emptyApiSecretKey];\n  }\n\n  validateWalletSigningOptions(signingOptions: TezosPaymentsWalletSigningOptions): FailedValidationResults {\n    if (typeof signingOptions.wallet !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidWalletSigningOption];\n\n    if (typeof signingOptions.wallet.signingPublicKey !== 'string')\n      return [TezosPaymentsOptionsValidator.errors.invalidWalletSigningPublicKey];\n    if (!signingOptions.wallet.signingPublicKey)\n      return [TezosPaymentsOptionsValidator.errors.emptyWalletSigningPublicKey];\n\n    if (typeof signingOptions.wallet.sign !== 'function')\n      return [TezosPaymentsOptionsValidator.errors.invalidWalletSignFunctionType];\n  }\n\n  validateCustomSigningOptions(signingOptions: TezosPaymentsCustomSigningOptions): FailedValidationResults {\n    if (typeof signingOptions.custom !== 'function')\n      return [TezosPaymentsOptionsValidator.errors.invalidCustomSigningOption];\n  }\n\n  validateDefaultPaymentParameters(defaultPaymentParameters: TezosPaymentsOptions['defaultPaymentParameters']): FailedValidationResults {\n    if (defaultPaymentParameters === undefined)\n      return;\n\n    if (typeof defaultPaymentParameters !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidDefaultPaymentParameters];\n\n    if ('urlType' in defaultPaymentParameters && defaultPaymentParameters.urlType !== PaymentUrlType.Base64)\n      return [TezosPaymentsOptionsValidator.errors.invalidUrlType];\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { nanoid } from 'nanoid';\n\nimport {\n  native, networks, PaymentUrlType, DeepReadonly, FailedValidationResults,\n  UnsignedPayment as CommonUnsignedPaymentModel, Payment as CommonPaymentModel,\n  PaymentType, PaymentValidator, Mutable, Network, CustomNetwork\n} from '@tezospayments/common';\n\nimport { InvalidPaymentCreateParametersError, InvalidPaymentError, InvalidTezosPaymentsOptionsError, UnsupportedPaymentUrlTypeError } from './errors';\nimport { Payment } from './models';\nimport type { DefaultPaymentParameters, PaymentCreateParameters, TezosPaymentsOptions } from './options';\nimport { Base64PaymentUrlFactory, PaymentUrlFactory } from './paymentUrlFactories';\nimport { ApiSecretKeySigner, CustomSigner, TezosPaymentsSigner, WalletSigner } from './signers';\nimport { TezosPaymentsOptionsValidator } from './validation';\n\nexport class TezosPayments {\n  static readonly defaultPaymentParameters: DeepReadonly<DefaultPaymentParameters> = {\n    urlType: PaymentUrlType.Base64\n  };\n\n  protected readonly optionsValidator = new TezosPaymentsOptionsValidator();\n  protected readonly paymentValidator = new PaymentValidator();\n  protected readonly serviceContractAddress: string;\n  protected readonly signer: TezosPaymentsSigner;\n  protected readonly network: Network | CustomNetwork;\n  protected readonly defaultPaymentParameters: DeepReadonly<DefaultPaymentParameters>;\n\n  private paymentUrlFactories: Map<PaymentUrlType, PaymentUrlFactory> = new Map();\n\n  constructor(options: DeepReadonly<TezosPaymentsOptions>) {\n    const errors = this.optionsValidator.validateOptions(options);\n    if (errors)\n      throw new InvalidTezosPaymentsOptionsError(errors);\n\n    this.serviceContractAddress = options.serviceContractAddress;\n    this.network = options.network || networks.mainnet;\n    this.defaultPaymentParameters = options.defaultPaymentParameters\n      ? {\n        urlType: options.defaultPaymentParameters.urlType || TezosPayments.defaultPaymentParameters.urlType\n      }\n      : TezosPayments.defaultPaymentParameters;\n\n    this.signer = this.createSigner(options.signing);\n    this.getPaymentUrlFactory(this.defaultPaymentParameters.urlType);\n  }\n\n  async createPayment(createParameters: PaymentCreateParameters): Promise<Payment> {\n    if (!createParameters)\n      throw new InvalidPaymentCreateParametersError(createParameters);\n\n    let errors: FailedValidationResults;\n    if (createParameters.urlType) {\n      errors = this.optionsValidator.validateDefaultPaymentParameters(createParameters);\n      if (errors)\n        throw new InvalidPaymentError(errors);\n    }\n\n    const unsignedPayment = this.createPaymentByCreateParameters(createParameters);\n    errors = this.paymentValidator.validate(unsignedPayment, true);\n    if (errors)\n      throw new InvalidPaymentError(errors);\n\n    const signedPayment = await this.getSignedPayment(unsignedPayment);\n    errors = this.paymentValidator.validate(signedPayment, true);\n    if (errors)\n      throw new InvalidPaymentError(errors);\n\n    const paymentUrl = await this.getPaymentUrl(signedPayment, createParameters.urlType);\n    const payment = this.applyPaymentUrl(signedPayment, paymentUrl);\n\n    return payment;\n  }\n\n  protected getPaymentUrl(payment: CommonPaymentModel, urlType = this.defaultPaymentParameters.urlType): string | Promise<string> {\n    return this.getPaymentUrlFactory(urlType).createPaymentUrl(payment, this.network);\n  }\n\n  protected applyPaymentUrl(payment: CommonPaymentModel, url: string): Payment {\n    (payment as Mutable<Payment>).url = url;\n\n    return (payment as Payment);\n  }\n\n  protected getPaymentUrlFactory(paymentUrlType: PaymentUrlType): PaymentUrlFactory {\n    let paymentUrlFactory = this.paymentUrlFactories.get(paymentUrlType);\n    if (!paymentUrlFactory) {\n      paymentUrlFactory = this.createPaymentUrlFactory(paymentUrlType);\n      this.paymentUrlFactories.set(paymentUrlType, paymentUrlFactory);\n    }\n\n    return paymentUrlFactory;\n  }\n\n  protected async getSignedPayment(unsignedPayment: CommonUnsignedPaymentModel): Promise<CommonPaymentModel> {\n    (unsignedPayment as Mutable<CommonPaymentModel>).signature = await this.signer.sign(unsignedPayment);\n\n    return unsignedPayment as CommonPaymentModel;\n  }\n\n  protected createSigner(signingOptions: TezosPaymentsOptions['signing']): TezosPaymentsSigner {\n    if ('apiSecretKey' in signingOptions)\n      return new ApiSecretKeySigner(signingOptions.apiSecretKey);\n    if ('wallet' in signingOptions)\n      return new WalletSigner(signingOptions.wallet.signingPublicKey, signingOptions.wallet.sign);\n\n    return new CustomSigner(signingOptions.custom);\n  }\n\n  protected createPaymentUrlFactory(paymentUrlType: PaymentUrlType): PaymentUrlFactory {\n    switch (paymentUrlType) {\n      case PaymentUrlType.Base64:\n        return new Base64PaymentUrlFactory();\n      default:\n        throw new UnsupportedPaymentUrlTypeError(`This payment url type is not supported: ${paymentUrlType}`);\n    }\n  }\n\n  protected createPaymentByCreateParameters(createParameters: PaymentCreateParameters): CommonUnsignedPaymentModel {\n    // TODO: check decimals\n    // TODO: floor amount to decimals count: new BigNumber(amount).toFixed(asset.decimals)\n    const payment: Mutable<CommonUnsignedPaymentModel> = {\n      type: PaymentType.Payment,\n      id: createParameters.id || nanoid(),\n      targetAddress: this.serviceContractAddress,\n      amount: new BigNumber(createParameters.amount),\n      data: createParameters.data,\n      created: createParameters.created ? new Date(createParameters.created) : new Date(),\n    };\n\n    if (createParameters.asset)\n      payment.asset = createParameters.asset;\n    if (createParameters.expired)\n      payment.expired = new Date(createParameters.expired);\n    if (createParameters.successUrl)\n      payment.successUrl = new native.URL(createParameters.successUrl);\n    if (createParameters.cancelUrl)\n      payment.cancelUrl = new native.URL(createParameters.cancelUrl);\n\n    return payment;\n  }\n}\n","import constants from './constants';\nimport * as errors from './errors';\nimport * as paymentUrlFactories from './paymentUrlFactories';\nimport * as signers from './signers';\n\nexport { PaymentUrlType } from '@tezospayments/common';\nexport type { PaymentAsset } from '@tezospayments/common';\n\nexport type { Payment } from './models';\nexport { SigningType } from './models';\n\nexport type { TezosPaymentsOptions, PaymentCreateParameters } from './options';\nexport { TezosPayments } from './tezosPayments';\n\nexport const internal = {\n  constants,\n  errors,\n  paymentUrlFactories,\n  signers\n};\n"],"names":["defaultNetworkName","paymentAppBaseUrl","getErrorMessageByValidationErrors","validationErrors","brief","reduce","result","error","index","TezosPaymentsError","Error","constructor","message","name","InvalidTezosPaymentsOptionsError","messageOrValidationErrors","guards","isReadonlyArray","getMessage","InvalidPaymentCreateParametersError","InvalidPaymentError","UnsupportedPaymentUrlTypeError","PaymentUrlError","DonationUrlError","PaymentUrlFactory","urlType","Base64PaymentUrlFactory","baseUrl","PaymentUrlType","Base64","PaymentSerializer","DonationSerializer","createPaymentUrl","paymentOrDonation","network","type","PaymentType","Payment","createPaymentUrlInternal","createDonationUrlInternal","payment","serializedPaymentBase64","paymentSerializer","serialize","url","native","URL","createUrl","donation","serializedDonationBase64","donationSerializer","targetAddress","serializedPaymentOrDonationBase64","hash","getEncodedPaymentUrlType","constants","searchParams","append","href","TezosPaymentsSigner","signingType","SigningType","ApiSecretKeySigner","apiSecretKey","ApiSecretKey","PaymentSignPayloadEncoder","inMemorySigner","InMemorySigner","sign","signPayload","paymentSignPayloadEncoder","encode","contractSigningPromise","contractSignPayload","signingPromises","clientSignPayload","signatures","Promise","all","signingPublicKey","publicKey","contract","prefixSig","client","WalletSigner","walletSignCallback","Wallet","walletContractSignPayload","substring","CustomSigner","customSigning","Custom","TezosPaymentsOptionsValidator","validateOptions","options","validateServiceContractAddress","serviceContractAddress","validateNetwork","validateSigningOptions","signing","validateDefaultPaymentParameters","defaultPaymentParameters","currentErrors","concat","undefined","errors","invalidServiceContractAddressType","length","tezosInfo","addressLength","serviceContractAddressHasInvalidLength","contractAddressPrefixes","some","prefix","startsWith","serviceContractAddressIsNotContractAddress","invalidNetwork","emptyNetworkName","networkNameRegExp","test","invalidNetworkName","id","networkIdRegExp","invalidNetworkId","signingOptions","invalidSigningOption","validateApiSecretKeySigningOptions","validateWalletSigningOptions","validateCustomSigningOptions","invalidApiSecretKeyType","emptyApiSecretKey","wallet","invalidWalletSigningOption","invalidWalletSigningPublicKey","emptyWalletSigningPublicKey","invalidWalletSignFunctionType","custom","invalidCustomSigningOption","invalidDefaultPaymentParameters","invalidUrlType","TezosPayments","PaymentValidator","Map","optionsValidator","networks","mainnet","signer","createSigner","getPaymentUrlFactory","createPayment","createParameters","unsignedPayment","createPaymentByCreateParameters","paymentValidator","validate","signedPayment","getSignedPayment","paymentUrl","getPaymentUrl","applyPaymentUrl","paymentUrlType","paymentUrlFactory","paymentUrlFactories","get","createPaymentUrlFactory","set","signature","nanoid","amount","BigNumber","data","created","Date","asset","expired","successUrl","cancelUrl","internal","signers"],"mappings":"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"}