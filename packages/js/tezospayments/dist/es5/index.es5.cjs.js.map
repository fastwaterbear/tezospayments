{"version":3,"file":"index.es5.cjs.js","sources":["../../src/constants.ts","../../src/errors.ts","../../src/paymentUrlFactories/paymentUrlFactory.ts","../../src/paymentUrlFactories/base64PaymentUrlFactory.ts","../../src/signers/tezosPaymentsSigner.ts","../../src/models.ts","../../src/signers/apiSecretKeySigner.ts","../../src/signers/walletSigner.ts","../../src/signers/customSigner.ts","../../src/validation/tezosPaymentsOptionsValidator.ts","../../src/tezosPayments.ts","../../src/index.ts"],"sourcesContent":["export default {\n  defaultNetworkName: 'mainnet',\n  paymentAppBaseUrl: 'https://payment.tezospayments.com'\n} as const;\n","import { guards } from '@tezospayments/common';\n\nconst getErrorMessageByValidationErrors = (validationErrors: readonly string[], brief = '') => validationErrors\n  .reduce((result, error, index) => `${result}\\n\\t${index + 1}. ${error};`, brief);\n\nexport abstract class TezosPaymentsError extends Error {\n  readonly name: string;\n\n  constructor(message?: string) {\n    super(message);\n\n    this.name = this.constructor.name;\n  }\n}\n\nexport class InvalidTezosPaymentsOptionsError extends TezosPaymentsError {\n  constructor(message?: string);\n  constructor(validationErrors: readonly string[]);\n  constructor(messageOrValidationErrors: (string | undefined) | readonly string[]) {\n    super(\n      guards.isReadonlyArray(messageOrValidationErrors)\n        ? InvalidTezosPaymentsOptionsError.getMessage(messageOrValidationErrors)\n        : messageOrValidationErrors\n    );\n  }\n\n  private static getMessage(validationErrors: readonly string[]): string {\n    return getErrorMessageByValidationErrors(validationErrors, 'options are invalid, see details below:');\n  }\n}\n\nexport class InvalidPaymentCreateParametersError extends TezosPaymentsError {\n}\n\nexport class InvalidPaymentError extends TezosPaymentsError {\n  constructor(message?: string);\n  constructor(validationErrors: readonly string[]);\n  constructor(messageOrValidationErrors: (string | undefined) | readonly string[]) {\n    super(\n      guards.isReadonlyArray(messageOrValidationErrors)\n        ? InvalidPaymentError.getMessage(messageOrValidationErrors)\n        : messageOrValidationErrors\n    );\n  }\n\n  private static getMessage(validationErrors: readonly string[]): string {\n    return getErrorMessageByValidationErrors(validationErrors, 'payment is invalid, see details below:');\n  }\n}\n\nexport class UnsupportedPaymentUrlTypeError extends TezosPaymentsError {\n}\n\nexport class PaymentUrlError extends TezosPaymentsError {\n}\n\nexport class DonationUrlError extends TezosPaymentsError {\n}\n","import { CustomNetwork, Donation, Network, Payment, PaymentUrlType } from '@tezospayments/common';\n\nexport abstract class PaymentUrlFactory {\n  constructor(readonly urlType: PaymentUrlType) {\n  }\n\n  abstract createPaymentUrl(paymentOrDonation: Payment | Donation, network: Network | CustomNetwork): string | Promise<string>;\n}\n","import {\n  native, PaymentUrlType,\n  PaymentSerializer, CustomNetwork, Network, Payment, Donation, DonationSerializer, PaymentType, getEncodedPaymentUrlType\n} from '@tezospayments/common';\n\nimport constants from '../constants';\nimport { DonationUrlError, PaymentUrlError } from '../errors';\nimport { PaymentUrlFactory } from './paymentUrlFactory';\n\nexport class Base64PaymentUrlFactory extends PaymentUrlFactory {\n  static readonly baseUrl = constants.paymentAppBaseUrl;\n\n  protected readonly paymentSerializer: PaymentSerializer = new PaymentSerializer();\n  protected readonly donationSerializer: DonationSerializer = new DonationSerializer();\n\n  constructor(readonly baseUrl: string = Base64PaymentUrlFactory.baseUrl) {\n    super(PaymentUrlType.Base64);\n  }\n\n  createPaymentUrl(paymentOrDonation: Payment | Donation, network: Network | CustomNetwork): string {\n    return paymentOrDonation.type === PaymentType.Payment\n      ? this.createPaymentUrlInternal(paymentOrDonation, network)\n      : this.createDonationUrlInternal(paymentOrDonation, network);\n  }\n\n  protected createPaymentUrlInternal(payment: Payment, network: Network | CustomNetwork): string {\n    const serializedPaymentBase64 = this.paymentSerializer.serialize(payment);\n    if (!serializedPaymentBase64)\n      throw new PaymentUrlError('It\\'s impossible to serialize the payment');\n\n    try {\n      const url = new native.URL(this.baseUrl);\n\n      return this.createUrl(url, serializedPaymentBase64, network);\n    } catch (error: unknown) {\n      throw new PaymentUrlError('It\\'s impossible to create an URL for the payment');\n    }\n  }\n\n  protected createDonationUrlInternal(donation: Donation, network: Network | CustomNetwork): string {\n    const serializedDonationBase64 = this.donationSerializer.serialize(donation);\n    if (!serializedDonationBase64 && serializedDonationBase64 !== '')\n      throw new DonationUrlError('It\\'s impossible to serialize the donation');\n\n    try {\n      const url = new native.URL(`${donation.targetAddress}/donation`, this.baseUrl);\n\n      return this.createUrl(url, serializedDonationBase64, network);\n    } catch (error: unknown) {\n      throw new DonationUrlError('It\\'s impossible to create an URL for the donation');\n    }\n  }\n\n  protected createUrl(baseUrl: native.URL, serializedPaymentOrDonationBase64: string, network: Network | CustomNetwork) {\n    if (serializedPaymentOrDonationBase64 !== '')\n      baseUrl.hash = getEncodedPaymentUrlType(this.urlType) + serializedPaymentOrDonationBase64;\n    if (network.name !== constants.defaultNetworkName)\n      baseUrl.searchParams.append('network', network.name);\n\n    return baseUrl.href;\n  }\n}\n","import { UnsignedPayment, PaymentSignature } from '@tezospayments/common';\n\nimport type { SigningType } from '../models';\n\nexport abstract class TezosPaymentsSigner {\n  constructor(readonly signingType: SigningType) {\n  }\n\n  abstract sign(payment: UnsignedPayment): PaymentSignature | Promise<PaymentSignature>;\n}\n","export type Payment = import('@tezospayments/common').Payment & {\n  readonly url: string;\n};\n\nexport enum SigningType {\n  ApiSecretKey = 0,\n  Wallet = 1,\n  Custom = 2,\n}\n","import { InMemorySigner } from '@taquito/signer';\n\nimport { PaymentSignPayloadEncoder, PaymentSignature, UnsignedPayment } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class ApiSecretKeySigner extends TezosPaymentsSigner {\n  protected readonly paymentSignPayloadEncoder: PaymentSignPayloadEncoder = new PaymentSignPayloadEncoder();\n  protected readonly inMemorySigner: InMemorySigner;\n\n  constructor(readonly apiSecretKey: string) {\n    super(SigningType.ApiSecretKey);\n\n    this.inMemorySigner = new InMemorySigner(this.apiSecretKey);\n  }\n\n  async sign(payment: UnsignedPayment): Promise<PaymentSignature> {\n    const signPayload = this.paymentSignPayloadEncoder.encode(payment);\n    const contractSigningPromise = this.inMemorySigner.sign(signPayload.contractSignPayload);\n    const signingPromises = signPayload.clientSignPayload\n      ? [contractSigningPromise, this.inMemorySigner.sign(signPayload.clientSignPayload)] as const\n      : [contractSigningPromise] as const;\n\n    const signatures = await Promise.all(signingPromises);\n\n    return {\n      signingPublicKey: await this.inMemorySigner.publicKey(),\n      contract: signatures[0].prefixSig,\n      client: signatures[1]?.prefixSig,\n    };\n  }\n}\n","import { UnsignedPayment, PaymentSignature, PaymentSignPayloadEncoder } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class WalletSigner extends TezosPaymentsSigner {\n  protected readonly paymentSignPayloadEncoder: PaymentSignPayloadEncoder = new PaymentSignPayloadEncoder();\n\n  constructor(readonly signingPublicKey: string, readonly walletSignCallback: (dataBytes: string) => Promise<string>) {\n    super(SigningType.Wallet);\n  }\n\n  async sign(payment: UnsignedPayment): Promise<PaymentSignature> {\n    const signPayload = this.paymentSignPayloadEncoder.encode(payment);\n    const walletContractSignPayload = signPayload.contractSignPayload.substring(2);\n\n    const contractSigningPromise = this.walletSignCallback(walletContractSignPayload);\n    const signingPromises = signPayload.clientSignPayload\n      ? [contractSigningPromise, this.walletSignCallback(signPayload.clientSignPayload)] as const\n      : [contractSigningPromise] as const;\n\n    const signatures = await Promise.all(signingPromises);\n\n    return {\n      signingPublicKey: this.signingPublicKey,\n      contract: signatures[0],\n      client: signatures[1],\n    };\n  }\n}\n","import type { UnsignedPayment, PaymentSignature } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class CustomSigner extends TezosPaymentsSigner {\n  constructor(readonly customSigning: (payment: UnsignedPayment) => PaymentSignature | Promise<PaymentSignature>) {\n    super(SigningType.Custom);\n  }\n\n  sign(payment: UnsignedPayment): PaymentSignature | Promise<PaymentSignature> {\n    return this.customSigning(payment);\n  }\n}\n","import { CustomNetwork, DeepReadonly, FailedValidationResults, Network, networkIdRegExp, networkNameRegExp, PaymentUrlType, tezosInfo } from '@tezospayments/common';\n\nimport type { TezosPaymentsApiSigningOptions, TezosPaymentsCustomSigningOptions, TezosPaymentsOptions, TezosPaymentsWalletSigningOptions } from '../options';\n\nexport class TezosPaymentsOptionsValidator {\n  static readonly errors = {\n    // serviceContractAddress\n    invalidServiceContractAddressType: 'Type of the serviceContractAddress option is invalid',\n    serviceContractAddressHasInvalidLength: 'The serviceContractAddress option has an invalid address',\n    serviceContractAddressIsNotContractAddress: 'The serviceContractAddress option isn\\'t a contract address',\n    // signing\n    invalidSigningOption: 'The signing option is invalid',\n    // signing.apiSecretKey\n    invalidApiSecretKeyType: 'The API secret key has an invalid type, it should be a string',\n    emptyApiSecretKey: 'The API secret key is empty',\n    // signing.wallet\n    invalidWalletSigningOption: 'The \"signing.wallet\" option is invalid',\n    invalidWalletSigningPublicKey: 'The wallet signing public key has an invalid type, it should be a string',\n    emptyWalletSigningPublicKey: 'The wallet signing public key is empty',\n    invalidWalletSignFunctionType: 'The wallet sign function has an invalid type, it should be a function',\n    // signing.custom\n    invalidCustomSigningOption: 'The \"signing.custom\" option has an invalid type, it should be a function',\n    // network\n    emptyNetworkName: 'The network name is empty',\n    invalidNetwork: 'The network is invalid',\n    invalidNetworkName: 'The network name is invalid',\n    invalidNetworkId: 'The network id is invalid',\n    // defaultPaymentParameters\n    invalidDefaultPaymentParameters: 'The default payment parameters are invalid',\n    // defaultPaymentParameters.urlType\n    invalidUrlType: 'The url type is invalid'\n  } as const;\n\n  validateOptions(options: DeepReadonly<TezosPaymentsOptions>): FailedValidationResults {\n    return [\n      this.validateServiceContractAddress(options.serviceContractAddress),\n      this.validateNetwork(options.network),\n      this.validateSigningOptions(options.signing),\n      this.validateDefaultPaymentParameters(options.defaultPaymentParameters)\n    ].reduce(\n      (result, currentErrors) => currentErrors ? (result || []).concat(currentErrors) : result,\n      undefined\n    );\n  }\n\n  validateServiceContractAddress(serviceContractAddress: string): FailedValidationResults {\n    if (!serviceContractAddress || typeof serviceContractAddress !== 'string')\n      return [TezosPaymentsOptionsValidator.errors.invalidServiceContractAddressType];\n\n    if (serviceContractAddress.length !== tezosInfo.addressLength)\n      return [TezosPaymentsOptionsValidator.errors.serviceContractAddressHasInvalidLength];\n\n    if (!tezosInfo.contractAddressPrefixes.some(prefix => serviceContractAddress.startsWith(prefix)))\n      return [TezosPaymentsOptionsValidator.errors.serviceContractAddressIsNotContractAddress];\n  }\n\n  validateNetwork(network: Network | CustomNetwork | undefined | null): FailedValidationResults {\n    if (network === undefined || network === null)\n      return;\n\n    if (typeof network !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidNetwork];\n\n    if (network.name === undefined || network.name === '')\n      return [TezosPaymentsOptionsValidator.errors.emptyNetworkName];\n\n    if (typeof network.name !== 'string' || !networkNameRegExp.test(network.name))\n      return [TezosPaymentsOptionsValidator.errors.invalidNetworkName];\n\n    if (network.id && (typeof network.id !== 'string' || !networkIdRegExp.test(network.id)))\n      return [TezosPaymentsOptionsValidator.errors.invalidNetworkId];\n  }\n\n  validateSigningOptions(signingOptions: TezosPaymentsOptions['signing']): FailedValidationResults {\n    if (typeof signingOptions !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidSigningOption];\n\n    if (!('apiSecretKey' in signingOptions) && !('wallet' in signingOptions) && !('custom' in signingOptions))\n      return [TezosPaymentsOptionsValidator.errors.invalidSigningOption];\n\n    if ('apiSecretKey' in signingOptions)\n      return this.validateApiSecretKeySigningOptions(signingOptions);\n\n    if ('wallet' in signingOptions)\n      return this.validateWalletSigningOptions(signingOptions);\n\n    if ('custom' in signingOptions)\n      return this.validateCustomSigningOptions(signingOptions);\n  }\n\n  validateApiSecretKeySigningOptions(signingOptions: TezosPaymentsApiSigningOptions): FailedValidationResults {\n    if (typeof signingOptions.apiSecretKey !== 'string')\n      return [TezosPaymentsOptionsValidator.errors.invalidApiSecretKeyType];\n    if (!signingOptions.apiSecretKey)\n      return [TezosPaymentsOptionsValidator.errors.emptyApiSecretKey];\n  }\n\n  validateWalletSigningOptions(signingOptions: TezosPaymentsWalletSigningOptions): FailedValidationResults {\n    if (typeof signingOptions.wallet !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidWalletSigningOption];\n\n    if (typeof signingOptions.wallet.signingPublicKey !== 'string')\n      return [TezosPaymentsOptionsValidator.errors.invalidWalletSigningPublicKey];\n    if (!signingOptions.wallet.signingPublicKey)\n      return [TezosPaymentsOptionsValidator.errors.emptyWalletSigningPublicKey];\n\n    if (typeof signingOptions.wallet.sign !== 'function')\n      return [TezosPaymentsOptionsValidator.errors.invalidWalletSignFunctionType];\n  }\n\n  validateCustomSigningOptions(signingOptions: TezosPaymentsCustomSigningOptions): FailedValidationResults {\n    if (typeof signingOptions.custom !== 'function')\n      return [TezosPaymentsOptionsValidator.errors.invalidCustomSigningOption];\n  }\n\n  validateDefaultPaymentParameters(defaultPaymentParameters: TezosPaymentsOptions['defaultPaymentParameters']): FailedValidationResults {\n    if (defaultPaymentParameters === undefined)\n      return;\n\n    if (typeof defaultPaymentParameters !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidDefaultPaymentParameters];\n\n    if ('urlType' in defaultPaymentParameters && defaultPaymentParameters.urlType !== PaymentUrlType.Base64)\n      return [TezosPaymentsOptionsValidator.errors.invalidUrlType];\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { nanoid } from 'nanoid';\n\nimport {\n  native, networks, PaymentUrlType, DeepReadonly, FailedValidationResults,\n  UnsignedPayment as CommonUnsignedPaymentModel, Payment as CommonPaymentModel,\n  PaymentType, PaymentValidator, Mutable, Network, CustomNetwork\n} from '@tezospayments/common';\n\nimport { InvalidPaymentCreateParametersError, InvalidPaymentError, InvalidTezosPaymentsOptionsError, UnsupportedPaymentUrlTypeError } from './errors';\nimport { Payment } from './models';\nimport type { DefaultPaymentParameters, PaymentCreateParameters, TezosPaymentsOptions } from './options';\nimport { Base64PaymentUrlFactory, PaymentUrlFactory } from './paymentUrlFactories';\nimport { ApiSecretKeySigner, CustomSigner, TezosPaymentsSigner, WalletSigner } from './signers';\nimport { TezosPaymentsOptionsValidator } from './validation';\n\nexport class TezosPayments {\n  static readonly defaultPaymentParameters: DeepReadonly<DefaultPaymentParameters> = {\n    urlType: PaymentUrlType.Base64\n  };\n\n  protected readonly optionsValidator = new TezosPaymentsOptionsValidator();\n  protected readonly paymentValidator = new PaymentValidator();\n  protected readonly serviceContractAddress: string;\n  protected readonly signer: TezosPaymentsSigner;\n  protected readonly network: Network | CustomNetwork;\n  protected readonly defaultPaymentParameters: DeepReadonly<DefaultPaymentParameters>;\n\n  private paymentUrlFactories: Map<PaymentUrlType, PaymentUrlFactory> = new Map();\n\n  constructor(options: DeepReadonly<TezosPaymentsOptions>) {\n    const errors = this.optionsValidator.validateOptions(options);\n    if (errors)\n      throw new InvalidTezosPaymentsOptionsError(errors);\n\n    this.serviceContractAddress = options.serviceContractAddress;\n    this.network = options.network || networks.mainnet;\n    this.defaultPaymentParameters = options.defaultPaymentParameters\n      ? {\n        urlType: options.defaultPaymentParameters.urlType || TezosPayments.defaultPaymentParameters.urlType\n      }\n      : TezosPayments.defaultPaymentParameters;\n\n    this.signer = this.createSigner(options.signing);\n    this.getPaymentUrlFactory(this.defaultPaymentParameters.urlType);\n  }\n\n  async createPayment(createParameters: PaymentCreateParameters): Promise<Payment> {\n    if (!createParameters)\n      throw new InvalidPaymentCreateParametersError(createParameters);\n\n    let errors: FailedValidationResults;\n    if (createParameters.urlType) {\n      errors = this.optionsValidator.validateDefaultPaymentParameters(createParameters);\n      if (errors)\n        throw new InvalidPaymentError(errors);\n    }\n\n    const unsignedPayment = this.createPaymentByCreateParameters(createParameters);\n    errors = this.paymentValidator.validate(unsignedPayment, true);\n    if (errors)\n      throw new InvalidPaymentError(errors);\n\n    const signedPayment = await this.getSignedPayment(unsignedPayment);\n    errors = this.paymentValidator.validate(signedPayment, true);\n    if (errors)\n      throw new InvalidPaymentError(errors);\n\n    const paymentUrl = await this.getPaymentUrl(signedPayment, createParameters.urlType);\n    const payment = this.applyPaymentUrl(signedPayment, paymentUrl);\n\n    return payment;\n  }\n\n  protected getPaymentUrl(payment: CommonPaymentModel, urlType = this.defaultPaymentParameters.urlType): string | Promise<string> {\n    return this.getPaymentUrlFactory(urlType).createPaymentUrl(payment, this.network);\n  }\n\n  protected applyPaymentUrl(payment: CommonPaymentModel, url: string): Payment {\n    (payment as Mutable<Payment>).url = url;\n\n    return (payment as Payment);\n  }\n\n  protected getPaymentUrlFactory(paymentUrlType: PaymentUrlType): PaymentUrlFactory {\n    let paymentUrlFactory = this.paymentUrlFactories.get(paymentUrlType);\n    if (!paymentUrlFactory) {\n      paymentUrlFactory = this.createPaymentUrlFactory(paymentUrlType);\n      this.paymentUrlFactories.set(paymentUrlType, paymentUrlFactory);\n    }\n\n    return paymentUrlFactory;\n  }\n\n  protected async getSignedPayment(unsignedPayment: CommonUnsignedPaymentModel): Promise<CommonPaymentModel> {\n    (unsignedPayment as Mutable<CommonPaymentModel>).signature = await this.signer.sign(unsignedPayment);\n\n    return unsignedPayment as CommonPaymentModel;\n  }\n\n  protected createSigner(signingOptions: TezosPaymentsOptions['signing']): TezosPaymentsSigner {\n    if ('apiSecretKey' in signingOptions)\n      return new ApiSecretKeySigner(signingOptions.apiSecretKey);\n    if ('wallet' in signingOptions)\n      return new WalletSigner(signingOptions.wallet.signingPublicKey, signingOptions.wallet.sign);\n\n    return new CustomSigner(signingOptions.custom);\n  }\n\n  protected createPaymentUrlFactory(paymentUrlType: PaymentUrlType): PaymentUrlFactory {\n    switch (paymentUrlType) {\n      case PaymentUrlType.Base64:\n        return new Base64PaymentUrlFactory();\n      default:\n        throw new UnsupportedPaymentUrlTypeError(`This payment url type is not supported: ${paymentUrlType}`);\n    }\n  }\n\n  protected createPaymentByCreateParameters(createParameters: PaymentCreateParameters): CommonUnsignedPaymentModel {\n    // TODO: check decimals\n    // TODO: floor amount to decimals count: new BigNumber(amount).toFixed(asset.decimals)\n    const payment: Mutable<CommonUnsignedPaymentModel> = {\n      type: PaymentType.Payment,\n      id: createParameters.id || nanoid(),\n      targetAddress: this.serviceContractAddress,\n      amount: new BigNumber(createParameters.amount),\n      data: createParameters.data,\n      created: createParameters.created ? new Date(createParameters.created) : new Date(),\n    };\n\n    if (createParameters.asset)\n      payment.asset = createParameters.asset;\n    if (createParameters.expired)\n      payment.expired = new Date(createParameters.expired);\n    if (createParameters.successUrl)\n      payment.successUrl = new native.URL(createParameters.successUrl);\n    if (createParameters.cancelUrl)\n      payment.cancelUrl = new native.URL(createParameters.cancelUrl);\n\n    return payment;\n  }\n}\n","import constants from './constants';\nimport * as errors from './errors';\nimport * as paymentUrlFactories from './paymentUrlFactories';\nimport * as signers from './signers';\n\nexport { PaymentUrlType } from '@tezospayments/common';\nexport type { PaymentAsset } from '@tezospayments/common';\n\nexport type { Payment } from './models';\nexport { SigningType } from './models';\n\nexport type { TezosPaymentsOptions, PaymentCreateParameters } from './options';\nexport { TezosPayments } from './tezosPayments';\n\nexport const internal = {\n  constants,\n  errors,\n  paymentUrlFactories,\n  signers\n};\n"],"names":["defaultNetworkName","paymentAppBaseUrl","getErrorMessageByValidationErrors","validationErrors","brief","reduce","result","error","index","TezosPaymentsError","message","name","constructor","Error","InvalidTezosPaymentsOptionsError","messageOrValidationErrors","guards","isReadonlyArray","getMessage","InvalidPaymentCreateParametersError","InvalidPaymentError","UnsupportedPaymentUrlTypeError","PaymentUrlError","DonationUrlError","PaymentUrlFactory","urlType","Base64PaymentUrlFactory","baseUrl","PaymentUrlType","Base64","PaymentSerializer","DonationSerializer","paymentOrDonation","network","type","PaymentType","Payment","createPaymentUrlInternal","createDonationUrlInternal","payment","serializedPaymentBase64","paymentSerializer","serialize","url","native","URL","createUrl","donation","serializedDonationBase64","donationSerializer","targetAddress","serializedPaymentOrDonationBase64","hash","getEncodedPaymentUrlType","constants","searchParams","append","href","TezosPaymentsSigner","signingType","SigningType","ApiSecretKeySigner","apiSecretKey","ApiSecretKey","PaymentSignPayloadEncoder","inMemorySigner","InMemorySigner","signPayload","paymentSignPayloadEncoder","encode","contractSigningPromise","sign","contractSignPayload","signingPromises","clientSignPayload","Promise","all","signatures","publicKey","prefixSig","signingPublicKey","contract","client","WalletSigner","walletSignCallback","Wallet","walletContractSignPayload","substring","CustomSigner","customSigning","Custom","TezosPaymentsOptionsValidator","options","validateServiceContractAddress","serviceContractAddress","validateNetwork","validateSigningOptions","signing","validateDefaultPaymentParameters","defaultPaymentParameters","currentErrors","concat","undefined","errors","invalidServiceContractAddressType","length","tezosInfo","addressLength","serviceContractAddressHasInvalidLength","contractAddressPrefixes","some","prefix","startsWith","serviceContractAddressIsNotContractAddress","_typeof","invalidNetwork","emptyNetworkName","networkNameRegExp","test","invalidNetworkName","id","networkIdRegExp","invalidNetworkId","signingOptions","invalidSigningOption","validateApiSecretKeySigningOptions","validateWalletSigningOptions","validateCustomSigningOptions","invalidApiSecretKeyType","emptyApiSecretKey","wallet","invalidWalletSigningOption","invalidWalletSigningPublicKey","emptyWalletSigningPublicKey","invalidWalletSignFunctionType","custom","invalidCustomSigningOption","invalidDefaultPaymentParameters","invalidUrlType","TezosPayments","PaymentValidator","Map","optionsValidator","validateOptions","networks","mainnet","signer","createSigner","getPaymentUrlFactory","createParameters","unsignedPayment","createPaymentByCreateParameters","paymentValidator","validate","getSignedPayment","signedPayment","getPaymentUrl","paymentUrl","applyPaymentUrl","createPaymentUrl","paymentUrlType","paymentUrlFactory","paymentUrlFactories","get","createPaymentUrlFactory","set","signature","nanoid","amount","BigNumber","data","created","Date","asset","expired","successUrl","cancelUrl","internal","signers"],"mappings":"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"}