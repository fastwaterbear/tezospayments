{"version":3,"file":"index.esnext.esm.js","sources":["../../src/constants.ts","../../src/errors.ts","../../src/paymentUrlFactories/paymentUrlFactory.ts","../../src/paymentUrlFactories/base64PaymentUrlFactory.ts","../../src/signers/tezosPaymentsSigner.ts","../../src/models.ts","../../src/signers/apiSecretKeySigner.ts","../../src/signers/walletSigner.ts","../../src/signers/customSigner.ts","../../src/validation/tezosPaymentsOptionsValidator.ts","../../src/tezosPayments.ts","../../src/index.ts"],"sourcesContent":["export default {\n  defaultNetworkName: 'mainnet',\n  paymentAppBaseUrl: 'https://payment.tezospayments.com'\n} as const;\n","import { guards } from '@tezospayments/common';\n\nconst getErrorMessageByValidationErrors = (validationErrors: readonly string[], brief = '') => validationErrors\n  .reduce((result, error, index) => `${result}\\n\\t${index + 1}. ${error};`, brief);\n\nexport abstract class TezosPaymentsError extends Error {\n  readonly name: string;\n\n  constructor(message?: string) {\n    super(message);\n\n    this.name = this.constructor.name;\n  }\n}\n\nexport class InvalidTezosPaymentsOptionsError extends TezosPaymentsError {\n  constructor(message?: string);\n  constructor(validationErrors: readonly string[]);\n  constructor(messageOrValidationErrors: (string | undefined) | readonly string[]) {\n    super(\n      guards.isReadonlyArray(messageOrValidationErrors)\n        ? InvalidTezosPaymentsOptionsError.getMessage(messageOrValidationErrors)\n        : messageOrValidationErrors\n    );\n  }\n\n  private static getMessage(validationErrors: readonly string[]): string {\n    return getErrorMessageByValidationErrors(validationErrors, 'options are invalid, see details below:');\n  }\n}\n\nexport class InvalidPaymentCreateParametersError extends TezosPaymentsError {\n}\n\nexport class InvalidPaymentError extends TezosPaymentsError {\n  constructor(message?: string);\n  constructor(validationErrors: readonly string[]);\n  constructor(messageOrValidationErrors: (string | undefined) | readonly string[]) {\n    super(\n      guards.isReadonlyArray(messageOrValidationErrors)\n        ? InvalidPaymentError.getMessage(messageOrValidationErrors)\n        : messageOrValidationErrors\n    );\n  }\n\n  private static getMessage(validationErrors: readonly string[]): string {\n    return getErrorMessageByValidationErrors(validationErrors, 'payment is invalid, see details below:');\n  }\n}\n\nexport class UnsupportedPaymentUrlTypeError extends TezosPaymentsError {\n}\n\nexport class PaymentUrlError extends TezosPaymentsError {\n}\n\nexport class DonationUrlError extends TezosPaymentsError {\n}\n","import { CustomNetwork, Donation, Network, Payment, PaymentUrlType } from '@tezospayments/common';\n\nexport abstract class PaymentUrlFactory {\n  constructor(readonly urlType: PaymentUrlType) {\n  }\n\n  abstract createPaymentUrl(paymentOrDonation: Payment | Donation, network: Network | CustomNetwork): string | Promise<string>;\n}\n","import {\n  native, PaymentUrlType,\n  PaymentSerializer, CustomNetwork, Network, Payment, Donation, DonationSerializer, PaymentType, getEncodedPaymentUrlType\n} from '@tezospayments/common';\n\nimport constants from '../constants';\nimport { DonationUrlError, PaymentUrlError } from '../errors';\nimport { PaymentUrlFactory } from './paymentUrlFactory';\n\nexport class Base64PaymentUrlFactory extends PaymentUrlFactory {\n  static readonly baseUrl = constants.paymentAppBaseUrl;\n\n  protected readonly paymentSerializer: PaymentSerializer = new PaymentSerializer();\n  protected readonly donationSerializer: DonationSerializer = new DonationSerializer();\n\n  constructor(readonly baseUrl: string = Base64PaymentUrlFactory.baseUrl) {\n    super(PaymentUrlType.Base64);\n  }\n\n  createPaymentUrl(paymentOrDonation: Payment | Donation, network: Network | CustomNetwork): string {\n    return paymentOrDonation.type === PaymentType.Payment\n      ? this.createPaymentUrlInternal(paymentOrDonation, network)\n      : this.createDonationUrlInternal(paymentOrDonation, network);\n  }\n\n  protected createPaymentUrlInternal(payment: Payment, network: Network | CustomNetwork): string {\n    const serializedPaymentBase64 = this.paymentSerializer.serialize(payment);\n    if (!serializedPaymentBase64)\n      throw new PaymentUrlError('It\\'s impossible to serialize the payment');\n\n    try {\n      const url = new native.URL(this.baseUrl);\n\n      return this.createUrl(url, serializedPaymentBase64, network);\n    } catch (error: unknown) {\n      throw new PaymentUrlError('It\\'s impossible to create an URL for the payment');\n    }\n  }\n\n  protected createDonationUrlInternal(donation: Donation, network: Network | CustomNetwork): string {\n    const serializedDonationBase64 = this.donationSerializer.serialize(donation);\n    if (!serializedDonationBase64 && serializedDonationBase64 !== '')\n      throw new DonationUrlError('It\\'s impossible to serialize the donation');\n\n    try {\n      const url = new native.URL(`${donation.targetAddress}/donation`, this.baseUrl);\n\n      return this.createUrl(url, serializedDonationBase64, network);\n    } catch (error: unknown) {\n      throw new DonationUrlError('It\\'s impossible to create an URL for the donation');\n    }\n  }\n\n  protected createUrl(baseUrl: native.URL, serializedPaymentOrDonationBase64: string, network: Network | CustomNetwork) {\n    if (serializedPaymentOrDonationBase64 !== '')\n      baseUrl.hash = getEncodedPaymentUrlType(this.urlType) + serializedPaymentOrDonationBase64;\n    if (network.name !== constants.defaultNetworkName)\n      baseUrl.searchParams.append('network', network.name);\n\n    return baseUrl.href;\n  }\n}\n","import { UnsignedPayment, PaymentSignature } from '@tezospayments/common';\n\nimport type { SigningType } from '../models';\n\nexport abstract class TezosPaymentsSigner {\n  constructor(readonly signingType: SigningType) {\n  }\n\n  abstract sign(payment: UnsignedPayment): PaymentSignature | Promise<PaymentSignature>;\n}\n","export type Payment = import('@tezospayments/common').Payment & {\n  readonly url: string;\n};\n\nexport enum SigningType {\n  ApiSecretKey = 0,\n  Wallet = 1,\n  Custom = 2,\n}\n","import { InMemorySigner } from '@taquito/signer';\n\nimport { PaymentSignPayloadEncoder, PaymentSignature, UnsignedPayment } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class ApiSecretKeySigner extends TezosPaymentsSigner {\n  protected readonly paymentSignPayloadEncoder: PaymentSignPayloadEncoder = new PaymentSignPayloadEncoder();\n  protected readonly inMemorySigner: InMemorySigner;\n\n  constructor(readonly apiSecretKey: string) {\n    super(SigningType.ApiSecretKey);\n\n    this.inMemorySigner = new InMemorySigner(this.apiSecretKey);\n  }\n\n  async sign(payment: UnsignedPayment): Promise<PaymentSignature> {\n    const signPayload = this.paymentSignPayloadEncoder.encode(payment);\n    const contractSigningPromise = this.inMemorySigner.sign(signPayload.contractSignPayload);\n    const signingPromises = signPayload.clientSignPayload\n      ? [contractSigningPromise, this.inMemorySigner.sign(signPayload.clientSignPayload)] as const\n      : [contractSigningPromise] as const;\n\n    const signatures = await Promise.all(signingPromises);\n\n    return {\n      signingPublicKey: await this.inMemorySigner.publicKey(),\n      contract: signatures[0].prefixSig,\n      client: signatures[1]?.prefixSig,\n    };\n  }\n}\n","import { UnsignedPayment, PaymentSignature, PaymentSignPayloadEncoder } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class WalletSigner extends TezosPaymentsSigner {\n  protected readonly paymentSignPayloadEncoder: PaymentSignPayloadEncoder = new PaymentSignPayloadEncoder();\n\n  constructor(readonly signingPublicKey: string, readonly walletSignCallback: (dataBytes: string) => Promise<string>) {\n    super(SigningType.Wallet);\n  }\n\n  async sign(payment: UnsignedPayment): Promise<PaymentSignature> {\n    const signPayload = this.paymentSignPayloadEncoder.encode(payment);\n    const walletContractSignPayload = signPayload.contractSignPayload.substring(2);\n\n    const contractSigningPromise = this.walletSignCallback(walletContractSignPayload);\n    const signingPromises = signPayload.clientSignPayload\n      ? [contractSigningPromise, this.walletSignCallback(signPayload.clientSignPayload)] as const\n      : [contractSigningPromise] as const;\n\n    const signatures = await Promise.all(signingPromises);\n\n    return {\n      signingPublicKey: this.signingPublicKey,\n      contract: signatures[0],\n      client: signatures[1],\n    };\n  }\n}\n","import type { UnsignedPayment, PaymentSignature } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class CustomSigner extends TezosPaymentsSigner {\n  constructor(readonly customSigning: (payment: UnsignedPayment) => PaymentSignature | Promise<PaymentSignature>) {\n    super(SigningType.Custom);\n  }\n\n  sign(payment: UnsignedPayment): PaymentSignature | Promise<PaymentSignature> {\n    return this.customSigning(payment);\n  }\n}\n","import { CustomNetwork, DeepReadonly, FailedValidationResults, Network, networkIdRegExp, networkNameRegExp, PaymentUrlType, tezosInfo } from '@tezospayments/common';\n\nimport type { TezosPaymentsApiSigningOptions, TezosPaymentsCustomSigningOptions, TezosPaymentsOptions, TezosPaymentsWalletSigningOptions } from '../options';\n\nexport class TezosPaymentsOptionsValidator {\n  static readonly errors = {\n    // serviceContractAddress\n    invalidServiceContractAddressType: 'Type of the serviceContractAddress option is invalid',\n    serviceContractAddressHasInvalidLength: 'The serviceContractAddress option has an invalid address',\n    serviceContractAddressIsNotContractAddress: 'The serviceContractAddress option isn\\'t a contract address',\n    // signing\n    invalidSigningOption: 'The signing option is invalid',\n    // signing.apiSecretKey\n    invalidApiSecretKeyType: 'The API secret key has an invalid type, it should be a string',\n    emptyApiSecretKey: 'The API secret key is empty',\n    // signing.wallet\n    invalidWalletSigningOption: 'The \"signing.wallet\" option is invalid',\n    invalidWalletSigningPublicKey: 'The wallet signing public key has an invalid type, it should be a string',\n    emptyWalletSigningPublicKey: 'The wallet signing public key is empty',\n    invalidWalletSignFunctionType: 'The wallet sign function has an invalid type, it should be a function',\n    // signing.custom\n    invalidCustomSigningOption: 'The \"signing.custom\" option has an invalid type, it should be a function',\n    // network\n    emptyNetworkName: 'The network name is empty',\n    invalidNetwork: 'The network is invalid',\n    invalidNetworkName: 'The network name is invalid',\n    invalidNetworkId: 'The network id is invalid',\n    // defaultPaymentParameters\n    invalidDefaultPaymentParameters: 'The default payment parameters are invalid',\n    // defaultPaymentParameters.urlType\n    invalidUrlType: 'The url type is invalid'\n  } as const;\n\n  validateOptions(options: DeepReadonly<TezosPaymentsOptions>): FailedValidationResults {\n    return [\n      this.validateServiceContractAddress(options.serviceContractAddress),\n      this.validateNetwork(options.network),\n      this.validateSigningOptions(options.signing),\n      this.validateDefaultPaymentParameters(options.defaultPaymentParameters)\n    ].reduce(\n      (result, currentErrors) => currentErrors ? (result || []).concat(currentErrors) : result,\n      undefined\n    );\n  }\n\n  validateServiceContractAddress(serviceContractAddress: string): FailedValidationResults {\n    if (!serviceContractAddress || typeof serviceContractAddress !== 'string')\n      return [TezosPaymentsOptionsValidator.errors.invalidServiceContractAddressType];\n\n    if (serviceContractAddress.length !== tezosInfo.addressLength)\n      return [TezosPaymentsOptionsValidator.errors.serviceContractAddressHasInvalidLength];\n\n    if (!tezosInfo.contractAddressPrefixes.some(prefix => serviceContractAddress.startsWith(prefix)))\n      return [TezosPaymentsOptionsValidator.errors.serviceContractAddressIsNotContractAddress];\n  }\n\n  validateNetwork(network: Network | CustomNetwork | undefined | null): FailedValidationResults {\n    if (network === undefined || network === null)\n      return;\n\n    if (typeof network !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidNetwork];\n\n    if (network.name === undefined || network.name === '')\n      return [TezosPaymentsOptionsValidator.errors.emptyNetworkName];\n\n    if (typeof network.name !== 'string' || !networkNameRegExp.test(network.name))\n      return [TezosPaymentsOptionsValidator.errors.invalidNetworkName];\n\n    if (network.id && (typeof network.id !== 'string' || !networkIdRegExp.test(network.id)))\n      return [TezosPaymentsOptionsValidator.errors.invalidNetworkId];\n  }\n\n  validateSigningOptions(signingOptions: TezosPaymentsOptions['signing']): FailedValidationResults {\n    if (typeof signingOptions !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidSigningOption];\n\n    if (!('apiSecretKey' in signingOptions) && !('wallet' in signingOptions) && !('custom' in signingOptions))\n      return [TezosPaymentsOptionsValidator.errors.invalidSigningOption];\n\n    if ('apiSecretKey' in signingOptions)\n      return this.validateApiSecretKeySigningOptions(signingOptions);\n\n    if ('wallet' in signingOptions)\n      return this.validateWalletSigningOptions(signingOptions);\n\n    if ('custom' in signingOptions)\n      return this.validateCustomSigningOptions(signingOptions);\n  }\n\n  validateApiSecretKeySigningOptions(signingOptions: TezosPaymentsApiSigningOptions): FailedValidationResults {\n    if (typeof signingOptions.apiSecretKey !== 'string')\n      return [TezosPaymentsOptionsValidator.errors.invalidApiSecretKeyType];\n    if (!signingOptions.apiSecretKey)\n      return [TezosPaymentsOptionsValidator.errors.emptyApiSecretKey];\n  }\n\n  validateWalletSigningOptions(signingOptions: TezosPaymentsWalletSigningOptions): FailedValidationResults {\n    if (typeof signingOptions.wallet !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidWalletSigningOption];\n\n    if (typeof signingOptions.wallet.signingPublicKey !== 'string')\n      return [TezosPaymentsOptionsValidator.errors.invalidWalletSigningPublicKey];\n    if (!signingOptions.wallet.signingPublicKey)\n      return [TezosPaymentsOptionsValidator.errors.emptyWalletSigningPublicKey];\n\n    if (typeof signingOptions.wallet.sign !== 'function')\n      return [TezosPaymentsOptionsValidator.errors.invalidWalletSignFunctionType];\n  }\n\n  validateCustomSigningOptions(signingOptions: TezosPaymentsCustomSigningOptions): FailedValidationResults {\n    if (typeof signingOptions.custom !== 'function')\n      return [TezosPaymentsOptionsValidator.errors.invalidCustomSigningOption];\n  }\n\n  validateDefaultPaymentParameters(defaultPaymentParameters: TezosPaymentsOptions['defaultPaymentParameters']): FailedValidationResults {\n    if (defaultPaymentParameters === undefined)\n      return;\n\n    if (typeof defaultPaymentParameters !== 'object')\n      return [TezosPaymentsOptionsValidator.errors.invalidDefaultPaymentParameters];\n\n    if ('urlType' in defaultPaymentParameters && defaultPaymentParameters.urlType !== PaymentUrlType.Base64)\n      return [TezosPaymentsOptionsValidator.errors.invalidUrlType];\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { nanoid } from 'nanoid';\n\nimport {\n  native, networks, PaymentUrlType, DeepReadonly, FailedValidationResults,\n  UnsignedPayment as CommonUnsignedPaymentModel, Payment as CommonPaymentModel,\n  PaymentType, PaymentValidator, Mutable, Network, CustomNetwork\n} from '@tezospayments/common';\n\nimport { InvalidPaymentCreateParametersError, InvalidPaymentError, InvalidTezosPaymentsOptionsError, UnsupportedPaymentUrlTypeError } from './errors';\nimport { Payment } from './models';\nimport type { DefaultPaymentParameters, PaymentCreateParameters, TezosPaymentsOptions } from './options';\nimport { Base64PaymentUrlFactory, PaymentUrlFactory } from './paymentUrlFactories';\nimport { ApiSecretKeySigner, CustomSigner, TezosPaymentsSigner, WalletSigner } from './signers';\nimport { TezosPaymentsOptionsValidator } from './validation';\n\nexport class TezosPayments {\n  static readonly defaultPaymentParameters: DeepReadonly<DefaultPaymentParameters> = {\n    urlType: PaymentUrlType.Base64\n  };\n\n  protected readonly optionsValidator = new TezosPaymentsOptionsValidator();\n  protected readonly paymentValidator = new PaymentValidator();\n  protected readonly serviceContractAddress: string;\n  protected readonly signer: TezosPaymentsSigner;\n  protected readonly network: Network | CustomNetwork;\n  protected readonly defaultPaymentParameters: DeepReadonly<DefaultPaymentParameters>;\n\n  private paymentUrlFactories: Map<PaymentUrlType, PaymentUrlFactory> = new Map();\n\n  constructor(options: DeepReadonly<TezosPaymentsOptions>) {\n    const errors = this.optionsValidator.validateOptions(options);\n    if (errors)\n      throw new InvalidTezosPaymentsOptionsError(errors);\n\n    this.serviceContractAddress = options.serviceContractAddress;\n    this.network = options.network || networks.mainnet;\n    this.defaultPaymentParameters = options.defaultPaymentParameters\n      ? {\n        urlType: options.defaultPaymentParameters.urlType || TezosPayments.defaultPaymentParameters.urlType\n      }\n      : TezosPayments.defaultPaymentParameters;\n\n    this.signer = this.createSigner(options.signing);\n    this.getPaymentUrlFactory(this.defaultPaymentParameters.urlType);\n  }\n\n  async createPayment(createParameters: PaymentCreateParameters): Promise<Payment> {\n    if (!createParameters)\n      throw new InvalidPaymentCreateParametersError(createParameters);\n\n    let errors: FailedValidationResults;\n    if (createParameters.urlType) {\n      errors = this.optionsValidator.validateDefaultPaymentParameters(createParameters);\n      if (errors)\n        throw new InvalidPaymentError(errors);\n    }\n\n    const unsignedPayment = this.createPaymentByCreateParameters(createParameters);\n    errors = this.paymentValidator.validate(unsignedPayment, true);\n    if (errors)\n      throw new InvalidPaymentError(errors);\n\n    const signedPayment = await this.getSignedPayment(unsignedPayment);\n    errors = this.paymentValidator.validate(signedPayment, true);\n    if (errors)\n      throw new InvalidPaymentError(errors);\n\n    const paymentUrl = await this.getPaymentUrl(signedPayment, createParameters.urlType);\n    const payment = this.applyPaymentUrl(signedPayment, paymentUrl);\n\n    return payment;\n  }\n\n  protected getPaymentUrl(payment: CommonPaymentModel, urlType = this.defaultPaymentParameters.urlType): string | Promise<string> {\n    return this.getPaymentUrlFactory(urlType).createPaymentUrl(payment, this.network);\n  }\n\n  protected applyPaymentUrl(payment: CommonPaymentModel, url: string): Payment {\n    (payment as Mutable<Payment>).url = url;\n\n    return (payment as Payment);\n  }\n\n  protected getPaymentUrlFactory(paymentUrlType: PaymentUrlType): PaymentUrlFactory {\n    let paymentUrlFactory = this.paymentUrlFactories.get(paymentUrlType);\n    if (!paymentUrlFactory) {\n      paymentUrlFactory = this.createPaymentUrlFactory(paymentUrlType);\n      this.paymentUrlFactories.set(paymentUrlType, paymentUrlFactory);\n    }\n\n    return paymentUrlFactory;\n  }\n\n  protected async getSignedPayment(unsignedPayment: CommonUnsignedPaymentModel): Promise<CommonPaymentModel> {\n    (unsignedPayment as Mutable<CommonPaymentModel>).signature = await this.signer.sign(unsignedPayment);\n\n    return unsignedPayment as CommonPaymentModel;\n  }\n\n  protected createSigner(signingOptions: TezosPaymentsOptions['signing']): TezosPaymentsSigner {\n    if ('apiSecretKey' in signingOptions)\n      return new ApiSecretKeySigner(signingOptions.apiSecretKey);\n    if ('wallet' in signingOptions)\n      return new WalletSigner(signingOptions.wallet.signingPublicKey, signingOptions.wallet.sign);\n\n    return new CustomSigner(signingOptions.custom);\n  }\n\n  protected createPaymentUrlFactory(paymentUrlType: PaymentUrlType): PaymentUrlFactory {\n    switch (paymentUrlType) {\n      case PaymentUrlType.Base64:\n        return new Base64PaymentUrlFactory();\n      default:\n        throw new UnsupportedPaymentUrlTypeError(`This payment url type is not supported: ${paymentUrlType}`);\n    }\n  }\n\n  protected createPaymentByCreateParameters(createParameters: PaymentCreateParameters): CommonUnsignedPaymentModel {\n    // TODO: check decimals\n    // TODO: floor amount to decimals count: new BigNumber(amount).toFixed(asset.decimals)\n    const payment: Mutable<CommonUnsignedPaymentModel> = {\n      type: PaymentType.Payment,\n      id: createParameters.id || nanoid(),\n      targetAddress: this.serviceContractAddress,\n      amount: new BigNumber(createParameters.amount),\n      data: createParameters.data,\n      created: createParameters.created ? new Date(createParameters.created) : new Date(),\n    };\n\n    if (createParameters.asset)\n      payment.asset = createParameters.asset;\n    if (createParameters.expired)\n      payment.expired = new Date(createParameters.expired);\n    if (createParameters.successUrl)\n      payment.successUrl = new native.URL(createParameters.successUrl);\n    if (createParameters.cancelUrl)\n      payment.cancelUrl = new native.URL(createParameters.cancelUrl);\n\n    return payment;\n  }\n}\n","import constants from './constants';\nimport * as errors from './errors';\nimport * as paymentUrlFactories from './paymentUrlFactories';\nimport * as signers from './signers';\n\nexport { PaymentUrlType } from '@tezospayments/common';\nexport type { PaymentAsset } from '@tezospayments/common';\n\nexport type { Payment } from './models';\nexport { SigningType } from './models';\n\nexport type { TezosPaymentsOptions, PaymentCreateParameters } from './options';\nexport { TezosPayments } from './tezosPayments';\n\nexport const internal = {\n  constants,\n  errors,\n  paymentUrlFactories,\n  signers\n};\n"],"names":[],"mappings":"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"}