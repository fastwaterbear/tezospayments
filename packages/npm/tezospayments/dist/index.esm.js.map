{"version":3,"file":"index.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/paymentUrlFactories/paymentUrlFactory.ts","../src/paymentUrlFactories/base64PaymentUrlFactory.ts","../src/signers/tezosPaymentsSigner.ts","../src/models.ts","../src/signers/apiSecretKeySigner.ts","../src/signers/walletSigner.ts","../src/signers/customSigner.ts","../src/validationErrors.ts","../src/tezosPayments.ts","../src/index.ts"],"sourcesContent":["export default {\n  defaultNetworkName: 'mainnet',\n  paymentAppBaseUrl: 'https://payment.tezospayments.com'\n} as const;\n","import { guards } from '@tezospayments/common';\n\nconst getErrorMessageByValidationErrors = (validationErrors: readonly string[], brief = '') => validationErrors\n  .reduce((result, error, index) => `${result}\\n\\t${index + 1}. ${error};`, brief);\n\nexport abstract class TezosPaymentsError extends Error {\n  readonly name: string;\n\n  constructor(message?: string) {\n    super(message);\n\n    this.name = this.constructor.name;\n  }\n}\n\nexport class InvalidTezosPaymentsOptionsError extends TezosPaymentsError {\n  constructor(message?: string);\n  constructor(validationErrors: readonly string[]);\n  constructor(messageOrValidationErrors: (string | undefined) | readonly string[]) {\n    super(\n      guards.isReadonlyArray(messageOrValidationErrors)\n        ? InvalidTezosPaymentsOptionsError.getMessage(messageOrValidationErrors)\n        : messageOrValidationErrors\n    );\n  }\n\n  private static getMessage(validationErrors: readonly string[]): string {\n    return getErrorMessageByValidationErrors(validationErrors, 'options are invalid, see details below:');\n  }\n}\n\nexport class InvalidPaymentCreateParametersError extends TezosPaymentsError {\n}\n\nexport class InvalidPaymentError extends TezosPaymentsError {\n  constructor(message?: string);\n  constructor(validationErrors: readonly string[]);\n  constructor(messageOrValidationErrors: (string | undefined) | readonly string[]) {\n    super(\n      guards.isReadonlyArray(messageOrValidationErrors)\n        ? InvalidPaymentError.getMessage(messageOrValidationErrors)\n        : messageOrValidationErrors\n    );\n  }\n\n  private static getMessage(validationErrors: readonly string[]): string {\n    return getErrorMessageByValidationErrors(validationErrors, 'payment is invalid, see details below:');\n  }\n}\n\nexport class UnsupportedPaymentUrlTypeError extends TezosPaymentsError {\n}\n\nexport class PaymentUrlError extends TezosPaymentsError {\n}\n\nexport class DonationUrlError extends TezosPaymentsError {\n}\n","import { CustomNetwork, Donation, Network, Payment, PaymentUrlType } from '@tezospayments/common';\n\nexport abstract class PaymentUrlFactory {\n  constructor(readonly urlType: PaymentUrlType) {\n  }\n\n  abstract createPaymentUrl(paymentOrDonation: Payment | Donation, network: Network | CustomNetwork): string | Promise<string>;\n}\n","import {\n  native, PaymentUrlType,\n  PaymentSerializer, CustomNetwork, Network, Payment, Donation, DonationSerializer, PaymentType, getEncodedPaymentUrlType\n} from '@tezospayments/common';\n\nimport constants from '../constants';\nimport { DonationUrlError, PaymentUrlError } from '../errors';\nimport { PaymentUrlFactory } from './paymentUrlFactory';\n\nexport class Base64PaymentUrlFactory extends PaymentUrlFactory {\n  static readonly baseUrl = constants.paymentAppBaseUrl;\n\n  protected readonly paymentSerializer: PaymentSerializer = new PaymentSerializer();\n  protected readonly donationSerializer: DonationSerializer = new DonationSerializer();\n\n  constructor(readonly baseUrl: string = Base64PaymentUrlFactory.baseUrl) {\n    super(PaymentUrlType.Base64);\n  }\n\n  createPaymentUrl(paymentOrDonation: Payment | Donation, network: Network | CustomNetwork): string {\n    return paymentOrDonation.type === PaymentType.Payment\n      ? this.createPaymentUrlInternal(paymentOrDonation, network)\n      : this.createDonationUrlInternal(paymentOrDonation, network);\n  }\n\n  protected createPaymentUrlInternal(payment: Payment, network: Network | CustomNetwork): string {\n    const serializedPaymentBase64 = this.paymentSerializer.serialize(payment);\n    if (!serializedPaymentBase64)\n      throw new PaymentUrlError('It\\'s impossible to serialize the payment');\n\n    try {\n      return this.createUrl(true, payment.targetAddress, serializedPaymentBase64, network);\n    } catch (error: unknown) {\n      throw new PaymentUrlError('It\\'s impossible to create an URL for the payment');\n    }\n  }\n\n  protected createDonationUrlInternal(donation: Donation, network: Network | CustomNetwork): string {\n    const serializedDonationBase64 = this.donationSerializer.serialize(donation);\n    if (!serializedDonationBase64 && serializedDonationBase64 !== '')\n      throw new DonationUrlError('It\\'s impossible to serialize the donation');\n\n    try {\n      return this.createUrl(false, donation.targetAddress, serializedDonationBase64, network);\n    } catch (error: unknown) {\n      throw new DonationUrlError('It\\'s impossible to create an URL for the donation');\n    }\n  }\n\n  protected createUrl(\n    isPayment: boolean,\n    targetAddress: string,\n    serializedPaymentOrDonationBase64: string,\n    network: Network | CustomNetwork\n  ) {\n    const url = new native.URL(`${targetAddress}/${isPayment ? 'payment' : 'donation'}`, this.baseUrl);\n\n    if (serializedPaymentOrDonationBase64 !== '')\n      url.hash = getEncodedPaymentUrlType(this.urlType) + serializedPaymentOrDonationBase64;\n    if (network.name !== constants.defaultNetworkName)\n      url.searchParams.append('network', network.name);\n\n    return url.href;\n  }\n}\n","import { UnsignedPayment, PaymentSignature } from '@tezospayments/common';\n\nimport type { SigningType } from '../models';\n\nexport abstract class TezosPaymentsSigner {\n  constructor(readonly signingType: SigningType) {\n  }\n\n  abstract sign(payment: UnsignedPayment): PaymentSignature | Promise<PaymentSignature>;\n}\n","export type Payment = import('@tezospayments/common').Payment & {\n  readonly url: string;\n};\n\nexport enum SigningType {\n  ApiSecretKey = 0,\n  Wallet = 1,\n  Custom = 2,\n}\n","import { InMemorySigner } from '@taquito/signer';\n\nimport { PaymentSignPayloadEncoder, PaymentSignature, UnsignedPayment } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class ApiSecretKeySigner extends TezosPaymentsSigner {\n  protected readonly paymentSignPayloadEncoder: PaymentSignPayloadEncoder = new PaymentSignPayloadEncoder();\n  protected readonly inMemorySigner: InMemorySigner;\n\n  constructor(readonly apiSecretKey: string) {\n    super(SigningType.ApiSecretKey);\n\n    this.inMemorySigner = new InMemorySigner(this.apiSecretKey);\n  }\n\n  async sign(payment: UnsignedPayment): Promise<PaymentSignature> {\n    const signPayload = this.paymentSignPayloadEncoder.encode(payment);\n    const contractSigningPromise = this.inMemorySigner.sign(signPayload.contractSignPayload);\n    const signingPromises = signPayload.clientSignPayload\n      ? [contractSigningPromise, this.inMemorySigner.sign(signPayload.clientSignPayload)]\n      : [contractSigningPromise];\n\n    // TODO: add \"[Awaited<ReturnType<typeof this.inMemorySigner.sign>>, Awaited<ReturnType<typeof this.inMemorySigner.sign>>?]\" type\n    const signatures = await Promise.all(signingPromises);\n\n    return {\n      signingPublicKey: await this.inMemorySigner.publicKey(),\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      contract: signatures[0]!.prefixSig,\n      client: signatures[1]?.prefixSig,\n    };\n  }\n}\n","import { UnsignedPayment, PaymentSignature, PaymentSignPayloadEncoder } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class WalletSigner extends TezosPaymentsSigner {\n  protected readonly paymentSignPayloadEncoder: PaymentSignPayloadEncoder = new PaymentSignPayloadEncoder();\n\n  constructor(readonly walletSigning: (dataBytes: string) => Promise<string>) {\n    super(SigningType.Wallet);\n  }\n\n  async sign(payment: UnsignedPayment): Promise<PaymentSignature> {\n    const signPayload = this.paymentSignPayloadEncoder.encode(payment);\n    const walletContractSignPayload = signPayload.contractSignPayload.substring(2);\n\n    const contractSigningPromise = this.walletSigning(walletContractSignPayload);\n    const signingPromises = signPayload.clientSignPayload\n      ? [contractSigningPromise, this.walletSigning(signPayload.clientSignPayload)]\n      : [contractSigningPromise];\n\n    // TODO: add \"[Awaited<ReturnType<typeof this.inMemorySigner.sign>>, Awaited<ReturnType<typeof this.inMemorySigner.sign>>?]\" type\n    const signatures = await Promise.all(signingPromises);\n\n    return {\n      signingPublicKey: '',\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      contract: signatures[0]!,\n      client: signatures[1],\n    };\n  }\n}\n","import type { UnsignedPayment, PaymentSignature } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class CustomSigner extends TezosPaymentsSigner {\n  constructor(readonly customSigning: (payment: UnsignedPayment) => Promise<string>) {\n    super(SigningType.Custom);\n  }\n\n  sign(_payment: UnsignedPayment): PaymentSignature | Promise<PaymentSignature> {\n    throw new Error('Method not implemented.');\n  }\n}\n","export const tezosPaymentsOptionsValidationErrors = {\n  // serviceContractAddress\n  invalidServiceContractAddressType: 'Type of the serviceContractAddress option is invalid',\n  serviceContractAddressHasInvalidLength: 'The serviceContractAddress option has an invalid address',\n  serviceContractAddressIsNotContractAddress: 'The serviceContractAddress option isn\\'t a contract address',\n  // signing\n  invalidSigningOption: 'The signing option is invalid',\n  invalidApiSecretKeyType: 'The API secret key has an invalid type, it should be a string',\n  emptyApiSecretKey: 'The API secret key is empty',\n  invalidWalletSigningOptionType: 'The WalletSigning option has an invalid type, it should be a function',\n  // defaultPaymentParameters\n  invalidDefaultPaymentParameters: 'The default payment parameters are invalid',\n  // defaultPaymentParameters.network\n  emptyNetworkName: 'The network name is empty',\n  invalidNetwork: 'The network is invalid',\n  invalidNetworkName: 'The network name is invalid',\n  invalidNetworkId: 'The network id is invalid',\n  // defaultPaymentParameters.urlType\n  invalidUrlType: 'The url type is invalid'\n} as const;\n","import BigNumber from 'bignumber.js';\nimport { nanoid } from 'nanoid';\n\nimport {\n  native, networks, tezosInfo, networkNameRegExp, networkIdRegExp, PaymentUrlType,\n  DeepReadonly, FailedValidationResults, UnsignedPayment as CommonUnsignedPaymentModel, Payment as CommonPaymentModel,\n  PaymentType, PaymentValidator, Mutable\n} from '@tezospayments/common';\n\nimport { InvalidPaymentCreateParametersError, InvalidPaymentError, InvalidTezosPaymentsOptionsError, UnsupportedPaymentUrlTypeError } from './errors';\nimport { Payment } from './models';\nimport type { DefaultPaymentParameters, PaymentCreateParameters, TezosPaymentsOptions } from './options';\nimport { Base64PaymentUrlFactory, PaymentUrlFactory } from './paymentUrlFactories';\nimport { ApiSecretKeySigner, CustomSigner, TezosPaymentsSigner, WalletSigner } from './signers';\nimport { tezosPaymentsOptionsValidationErrors } from './validationErrors';\n\nexport class TezosPayments {\n  static readonly defaultPaymentParameters: DeepReadonly<DefaultPaymentParameters> = {\n    network: networks.granadanet,\n    urlType: PaymentUrlType.Base64\n  };\n  protected static readonly optionsValidationErrors = tezosPaymentsOptionsValidationErrors;\n\n  protected readonly paymentValidator: PaymentValidator = new PaymentValidator();\n  protected readonly serviceContractAddress: string;\n  protected readonly signer: TezosPaymentsSigner;\n  protected readonly defaultPaymentParameters: DeepReadonly<DefaultPaymentParameters>;\n\n  private paymentUrlFactories: Map<PaymentUrlType, PaymentUrlFactory> = new Map();\n\n  constructor(options: DeepReadonly<TezosPaymentsOptions>) {\n    const errors = this.validateOptions(options);\n    if (errors)\n      throw new InvalidTezosPaymentsOptionsError(errors);\n\n    this.serviceContractAddress = options.serviceContractAddress;\n    this.defaultPaymentParameters = options.defaultPaymentParameters\n      ? {\n        network: options.defaultPaymentParameters.network || TezosPayments.defaultPaymentParameters.network,\n        urlType: options.defaultPaymentParameters.urlType || TezosPayments.defaultPaymentParameters.urlType\n      }\n      : TezosPayments.defaultPaymentParameters;\n\n    this.signer = this.createSigner(options.signing);\n    this.getPaymentUrlFactory(this.defaultPaymentParameters.urlType);\n  }\n\n  async createPayment(createParameters: PaymentCreateParameters): Promise<Payment> {\n    if (!createParameters)\n      throw new InvalidPaymentCreateParametersError(createParameters);\n\n    let errors: FailedValidationResults;\n    if (createParameters.urlType) {\n      errors = this.validateDefaultPaymentParameters(createParameters);\n      if (errors)\n        throw new InvalidPaymentError(errors);\n    }\n\n    const unsignedPayment = this.createPaymentByCreateParameters(createParameters);\n    errors = this.paymentValidator.validate(unsignedPayment, true);\n    if (errors)\n      throw new InvalidPaymentError(errors);\n\n    const signedPayment = await this.getSignedPayment(unsignedPayment);\n    errors = this.paymentValidator.validate(signedPayment, true);\n    if (errors)\n      throw new InvalidPaymentError(errors);\n\n    const paymentUrl = await this.getPaymentUrl(signedPayment, createParameters.urlType);\n    const payment = this.applyPaymentUrl(signedPayment, paymentUrl);\n\n    return payment;\n  }\n\n  protected getPaymentUrl(payment: CommonPaymentModel, urlType = this.defaultPaymentParameters.urlType): string | Promise<string> {\n    return this.getPaymentUrlFactory(urlType).createPaymentUrl(payment, this.defaultPaymentParameters.network);\n  }\n\n  protected applyPaymentUrl(payment: CommonPaymentModel, url: string): Payment {\n    (payment as Mutable<Payment>).url = url;\n\n    return (payment as Payment);\n  }\n\n  protected getPaymentUrlFactory(paymentUrlType: PaymentUrlType): PaymentUrlFactory {\n    let paymentUrlFactory = this.paymentUrlFactories.get(paymentUrlType);\n    if (!paymentUrlFactory) {\n      paymentUrlFactory = this.createPaymentUrlFactory(paymentUrlType);\n      this.paymentUrlFactories.set(paymentUrlType, paymentUrlFactory);\n    }\n\n    return paymentUrlFactory;\n  }\n\n  protected async getSignedPayment(unsignedPayment: CommonUnsignedPaymentModel): Promise<CommonPaymentModel> {\n    (unsignedPayment as Mutable<CommonPaymentModel>).signature = await this.signer.sign(unsignedPayment);\n\n    return unsignedPayment as CommonPaymentModel;\n  }\n\n  protected createSigner(signingOptions: TezosPaymentsOptions['signing']): TezosPaymentsSigner {\n    if ('apiSecretKey' in signingOptions)\n      return new ApiSecretKeySigner(signingOptions.apiSecretKey);\n    if ('walletSigning' in signingOptions)\n      return new WalletSigner(signingOptions.walletSigning);\n\n    return new CustomSigner(signingOptions);\n  }\n\n  protected createPaymentUrlFactory(paymentUrlType: PaymentUrlType): PaymentUrlFactory {\n    switch (paymentUrlType) {\n      case PaymentUrlType.Base64:\n        return new Base64PaymentUrlFactory();\n      default:\n        throw new UnsupportedPaymentUrlTypeError(`This payment url type is not supported: ${paymentUrlType}`);\n    }\n  }\n\n  protected createPaymentByCreateParameters(createParameters: PaymentCreateParameters): CommonUnsignedPaymentModel {\n    // TODO: check decimals\n    // TODO: floor amount to decimals count: new BigNumber(amount).toFixed(asset.decimals)\n    const payment: Mutable<CommonUnsignedPaymentModel> = {\n      type: PaymentType.Payment,\n      id: createParameters.id || nanoid(),\n      targetAddress: this.serviceContractAddress,\n      amount: new BigNumber(createParameters.amount),\n      data: createParameters.data,\n      created: createParameters.created ? new Date(createParameters.created) : new Date(),\n    };\n\n    if (createParameters.asset)\n      payment.asset = createParameters.asset;\n    if (createParameters.expired)\n      payment.expired = new Date(createParameters.expired);\n    if (createParameters.successUrl)\n      payment.successUrl = new native.URL(createParameters.successUrl);\n    if (createParameters.cancelUrl)\n      payment.cancelUrl = new native.URL(createParameters.cancelUrl);\n\n    return payment;\n  }\n\n  protected validateOptions(options: DeepReadonly<TezosPaymentsOptions>): FailedValidationResults {\n    return [\n      this.validateServiceContractAddress(options.serviceContractAddress),\n      this.validateSigningOptions(options.signing),\n      this.validateDefaultPaymentParameters(options.defaultPaymentParameters)\n    ].reduce(\n      (result, currentErrors) => currentErrors ? (result || []).concat(currentErrors) : result,\n      undefined\n    );\n  }\n\n  private validateServiceContractAddress(serviceContractAddress: string): FailedValidationResults {\n    if (!serviceContractAddress || typeof serviceContractAddress !== 'string')\n      return [TezosPayments.optionsValidationErrors.invalidServiceContractAddressType];\n\n    if (serviceContractAddress.length !== tezosInfo.addressLength)\n      return [TezosPayments.optionsValidationErrors.serviceContractAddressHasInvalidLength];\n\n    if (!tezosInfo.contractAddressPrefixes.some(prefix => serviceContractAddress.startsWith(prefix)))\n      return [TezosPayments.optionsValidationErrors.serviceContractAddressIsNotContractAddress];\n  }\n\n  private validateSigningOptions(signingOptions: TezosPaymentsOptions['signing']): FailedValidationResults {\n    if (typeof signingOptions !== 'object')\n      return [TezosPayments.optionsValidationErrors.invalidSigningOption];\n\n    if (typeof signingOptions === 'function')\n      return;\n    else if (!('apiSecretKey' in signingOptions) && !('walletSigning' in signingOptions))\n      return [TezosPayments.optionsValidationErrors.invalidSigningOption];\n\n    if ('apiSecretKey' in signingOptions) {\n      if (typeof signingOptions.apiSecretKey !== 'string')\n        return [TezosPayments.optionsValidationErrors.invalidApiSecretKeyType];\n      if (!signingOptions.apiSecretKey)\n        return [TezosPayments.optionsValidationErrors.emptyApiSecretKey];\n    }\n\n    if ('walletSigning' in signingOptions && typeof signingOptions.walletSigning !== 'function')\n      return [TezosPayments.optionsValidationErrors.invalidWalletSigningOptionType];\n  }\n\n  private validateDefaultPaymentParameters(defaultPaymentParameters: TezosPaymentsOptions['defaultPaymentParameters']): FailedValidationResults {\n    if (defaultPaymentParameters === undefined)\n      return;\n\n    if (typeof defaultPaymentParameters !== 'object')\n      return [TezosPayments.optionsValidationErrors.invalidDefaultPaymentParameters];\n\n    if ('network' in defaultPaymentParameters) {\n      if (typeof defaultPaymentParameters.network !== 'object')\n        return [TezosPayments.optionsValidationErrors.invalidNetwork];\n\n      if (defaultPaymentParameters.network.name === undefined || defaultPaymentParameters.network.name === '')\n        return [TezosPayments.optionsValidationErrors.emptyNetworkName];\n\n      if (typeof defaultPaymentParameters.network.name !== 'string' || !networkNameRegExp.test(defaultPaymentParameters.network.name))\n        return [TezosPayments.optionsValidationErrors.invalidNetworkName];\n\n      if (defaultPaymentParameters.network.id && (typeof defaultPaymentParameters.network.id !== 'string' || !networkIdRegExp.test(defaultPaymentParameters.network.id)))\n        return [TezosPayments.optionsValidationErrors.invalidNetworkId];\n    }\n\n    if ('urlType' in defaultPaymentParameters && defaultPaymentParameters.urlType !== PaymentUrlType.Base64)\n      return [TezosPayments.optionsValidationErrors.invalidUrlType];\n  }\n}\n","import constants from './constants';\nimport * as errors from './errors';\nimport * as paymentUrlFactories from './paymentUrlFactories';\nimport * as signers from './signers';\n\nexport { PaymentUrlType } from '@tezospayments/common';\nexport type { PaymentAsset } from '@tezospayments/common';\n\nexport type { Payment } from './models';\nexport { SigningType } from './models';\n\nexport type { TezosPaymentsOptions, PaymentCreateParameters } from './options';\nexport { TezosPayments } from './tezosPayments';\n\nexport const internal = {\n  constants,\n  errors,\n  paymentUrlFactories,\n  signers\n};\n"],"names":["defaultNetworkName","paymentAppBaseUrl","getErrorMessageByValidationErrors","validationErrors","brief","reduce","result","error","index","TezosPaymentsError","Error","constructor","message","name","InvalidTezosPaymentsOptionsError","messageOrValidationErrors","guards","isReadonlyArray","getMessage","InvalidPaymentCreateParametersError","InvalidPaymentError","UnsupportedPaymentUrlTypeError","PaymentUrlError","DonationUrlError","PaymentUrlFactory","urlType","Base64PaymentUrlFactory","baseUrl","PaymentUrlType","Base64","PaymentSerializer","DonationSerializer","createPaymentUrl","paymentOrDonation","network","type","PaymentType","Payment","createPaymentUrlInternal","createDonationUrlInternal","payment","serializedPaymentBase64","paymentSerializer","serialize","createUrl","targetAddress","donation","serializedDonationBase64","donationSerializer","isPayment","serializedPaymentOrDonationBase64","url","native","URL","hash","getEncodedPaymentUrlType","constants","searchParams","append","href","TezosPaymentsSigner","signingType","SigningType","ApiSecretKeySigner","apiSecretKey","ApiSecretKey","PaymentSignPayloadEncoder","inMemorySigner","InMemorySigner","sign","signPayload","paymentSignPayloadEncoder","encode","contractSigningPromise","contractSignPayload","signingPromises","clientSignPayload","signatures","Promise","all","signingPublicKey","publicKey","contract","prefixSig","client","WalletSigner","walletSigning","Wallet","walletContractSignPayload","substring","CustomSigner","customSigning","Custom","_payment","tezosPaymentsOptionsValidationErrors","invalidServiceContractAddressType","serviceContractAddressHasInvalidLength","serviceContractAddressIsNotContractAddress","invalidSigningOption","invalidApiSecretKeyType","emptyApiSecretKey","invalidWalletSigningOptionType","invalidDefaultPaymentParameters","emptyNetworkName","invalidNetwork","invalidNetworkName","invalidNetworkId","invalidUrlType","TezosPayments","options","PaymentValidator","Map","errors","validateOptions","serviceContractAddress","defaultPaymentParameters","signer","createSigner","signing","getPaymentUrlFactory","createPayment","createParameters","validateDefaultPaymentParameters","unsignedPayment","createPaymentByCreateParameters","paymentValidator","validate","signedPayment","getSignedPayment","paymentUrl","getPaymentUrl","applyPaymentUrl","paymentUrlType","paymentUrlFactory","paymentUrlFactories","get","createPaymentUrlFactory","set","signature","signingOptions","id","nanoid","amount","BigNumber","data","created","Date","asset","expired","successUrl","cancelUrl","validateServiceContractAddress","validateSigningOptions","currentErrors","concat","undefined","optionsValidationErrors","length","tezosInfo","addressLength","contractAddressPrefixes","some","prefix","startsWith","networkNameRegExp","test","networkIdRegExp","networks","granadanet","internal","signers"],"mappings":"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"}