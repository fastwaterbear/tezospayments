{"version":3,"file":"index.es5.esm.js","sources":["../../src/utils/base64.ts","../../src/utils/converters.ts","../../src/utils/guards.ts","../../src/utils/memoize.ts","../../src/utils/optimization.ts","../../src/utils/shallowEqual.ts","../../src/utils/text.ts","../../src/utils/index.ts","../../src/helpers/serviceLinkHelper.ts","../../src/models/payment/paymentBase.ts","../../src/helpers/paymentValidator/paymentValidatorBase.ts","../../src/models/blockchain/network.ts","../../src/models/blockchain/token.ts","../../src/models/blockchain/tezosInfo.ts","../../src/models/blockchain/keyType.ts","../../src/native/index.ts","../../src/helpers/paymentValidator/validationMethods.ts","../../src/helpers/paymentValidator/paymentValidator.ts","../../src/helpers/paymentValidator/donationValidator.ts","../../src/models/core/stateModel.ts","../../src/serialization/base64/objectSerializationValidator.ts","../../src/serialization/base64/base64Serializer.ts","../../src/serialization/base64/base64Deserializer.ts","../../src/serialization/payment/serializedPaymentFieldTypes.ts","../../src/serialization/payment/paymentSerializer.ts","../../src/serialization/payment/paymentDeserializer.ts","../../src/serialization/payment/legacyPaymentDeserializer.ts","../../src/serialization/donation/serializedDonationFieldTypes.ts","../../src/serialization/donation/donationSerializer.ts","../../src/serialization/donation/donationDeserializer.ts","../../src/serialization/donation/legacyDonationDeserializer.ts","../../src/models/payment/payment.ts","../../src/models/payment/donation.ts","../../src/models/payment/paymentUrlType.ts","../../src/models/routing/parameterizedRoute.ts","../../src/models/service/serviceOperationType.ts","../../src/models/service/service.ts","../../src/models/service/serviceOperation.ts","../../src/models/service/serviceOperationDirection.ts","../../src/models/service/serviceOperationStatus.ts"],"sourcesContent":["type ValidBase64Format = 'base64' | 'base64url';\n\n// Node.js < 15\nconst isBase64UrlFormatSupported = Buffer.isEncoding('base64url');\n\nexport const decode = (base64String: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (!isBase64UrlFormatSupported) {\n    format = 'base64';\n    base64String = base64UrlPreprocessor.prepareValueForDecoding(base64String);\n  }\n\n  return Buffer.from(base64String, format).toString('utf8');\n};\n\nexport const encode = (value: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (isBase64UrlFormatSupported)\n    return Buffer.from(value, 'utf8').toString(format);\n\n  const encodedValue = Buffer.from(value, 'utf8').toString('base64');\n  return base64UrlPreprocessor.prepareEncodedValue(encodedValue);\n};\n\nconst base64UrlPreprocessor = {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  prepareEncodedValue: (base64value: string) => base64value\n    .split('=')[0]!\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_'),\n\n  prepareValueForDecoding: (base64value: string) => {\n    base64value = base64value\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n\n    switch (base64value.length % 4) {\n      case 0: return base64value;\n      case 2: return base64value + '==';\n      case 3: return base64value + '=';\n      default:\n        throw new Error('Invalid base64url value');\n    }\n  }\n};\n","import { Buffer } from 'buffer';\n\nexport const stringToUint8Array = (hex: string): Uint8Array => {\n  const integers = hex.match(/[\\da-f]{2}/gi)?.map(val => parseInt(val, 16));\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return new Uint8Array(integers!);\n};\n\nexport const stringToBytes = (value: string): string => Buffer.from(value, 'utf8').toString('hex');\nexport const bytesToString = (value: string): string => Buffer.from(stringToUint8Array(value)).toString('utf8');\n\nexport const objectToBytes = (value: Record<string, unknown>): string => stringToBytes(JSON.stringify(value));\nexport const bytesToObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: string): T | null => {\n  try {\n    return JSON.parse(bytesToString(value));\n  }\n  catch {\n    return null;\n  }\n};\n\nexport function tezToMutez(tez: number): number;\nexport function tezToMutez(tez: bigint): bigint;\nexport function tezToMutez(tez: bigint | number): bigint | number {\n  return typeof tez === 'number'\n    ? tez * 1000000\n    : tez * BigInt(1000000);\n}\n","import isPlainObjectLodashFunction from 'lodash.isplainobject';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isArray = (arg: any): arg is any[] => {\n  return Array.isArray(arg);\n};\n\nexport const isReadonlyArray = (arg: unknown): arg is readonly unknown[] => {\n  return Array.isArray(arg);\n};\n\nexport const isPlainObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: unknown): value is T => {\n  return isPlainObjectLodashFunction(value);\n};\n","const defaultEqualityCheck = <T>(a: T, b: T) => a === b;\n\nconst areArgumentsShallowlyEqual = <T extends IArguments | null>(equalityCheck: (a: T, b: T) => boolean, prev: T, next: T) => {\n    if (prev === null || next === null || prev.length !== next.length) {\n        return false;\n    }\n\n    // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n    const length = prev.length;\n    for (let i = 0; i < length; i++) {\n        if (!equalityCheck(prev[i], next[i])) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/* eslint-disable prefer-rest-params  */\n/* eslint-disable prefer-spread */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const memoize = <TF extends (...args: any) => any>(func: TF, equalityCheck = defaultEqualityCheck): TF => {\n    let lastArgs: IArguments | null = null;\n    let lastResult: unknown = null;\n\n    return (function () {\n        if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n            // apply arguments instead of spreading for performance.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            lastResult = func.apply(null, arguments as any);\n        }\n\n        lastArgs = arguments;\n        return lastResult;\n    } as TF);\n};\n/* eslint-enable prefer-spread */\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/no-explicit-any */\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst emptyArray: any[] = [];\nconst emptyObject = {};\nconst emptyMap = new Map();\nconst emptySet: Set<any> = new Set();\n\nexport default {\n    emptyArray,\n    emptyMap,\n    emptySet,\n    emptyObject\n};\n","const is = (x: unknown, y: unknown) => {\n    return (x === y)\n        ? x !== 0 || y !== 0 || (1 / x) === (1 / y)\n        // eslint-disable-next-line no-self-compare\n        : x !== x && y !== y;\n};\n\nexport default function shallowEqual(objA: unknown, objB: unknown) {\n    if (is(objA, objB))\n        return true;\n\n    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null)\n        return false;\n\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    if (keysA.length !== keysB.length)\n        return false;\n\n    for (let i = 0; i < keysA.length; i++) {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]!)\n            || !is((objA as any)[keysA[i]!], (objB as any)[keysA[i]!])\n        )\n            return false;\n\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n    }\n\n    return true;\n}\n","export const capitalize = (value: string): string => value && (value[0]?.toLocaleUpperCase() + value.slice(1));\n\nexport const getAvatarText = (value: string, maxLength = 2) => {\n  if (!value || !maxLength)\n    return '';\n\n  let result = '';\n\n  for (let i = 0, j = 0, isWord = false; i < value.length; i++) {\n    if (!isWord && value[i] !== ' ') {\n      isWord = true;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      result += value[i]!;\n\n      if (++j === maxLength)\n        return result;\n    }\n    else if (isWord && value[i] === ' ') {\n      isWord = false;\n    }\n  }\n\n  return result;\n};\n\nconst stringPad = (string: string, isStart: boolean, maxLength: number, fillString = ' ') => {\n  if (String.prototype.padStart !== undefined)\n    return string.padStart(maxLength, fillString);\n\n  const stringLength = string.length;\n  // eslint-disable-next-line eqeqeq\n  if (maxLength <= stringLength || fillString == '')\n    return string;\n\n  const fillLength = maxLength - stringLength;\n  let filler = fillString.repeat(Math.ceil(fillLength / fillString.length));\n\n  if (filler.length > fillLength)\n    filler = filler.slice(0, fillLength);\n\n  return isStart ? filler + string : string + filler;\n};\n\nexport const padStart = (string: string, maxLength: number, fillString = ' ') => String.prototype.padStart !== undefined\n  ? string.padStart(maxLength, fillString)\n  : stringPad(string, true, maxLength, fillString);\n\nexport const padEnd = (string: string, maxLength: number, fillString = ' ') => String.prototype.padEnd !== undefined\n  ? string.padEnd(maxLength, fillString)\n  : stringPad(string, false, maxLength, fillString);\n","import combineClassNames from 'clsx';\n\nimport * as base64 from './base64';\nimport * as converters from './converters';\nimport * as guards from './guards';\nimport { memoize } from './memoize';\nimport optimization from './optimization';\nimport shallowEqual from './shallowEqual';\nimport * as text from './text';\n\nconst wait = (ms: number) => new Promise<void>(resolve => setTimeout(resolve, ms));\n\nexport {\n  wait,\n  combineClassNames,\n  memoize,\n  shallowEqual,\n  base64,\n  optimization,\n  guards,\n  text,\n  converters\n};\n","import { memoize } from '../utils';\n\nexport enum IconId {\n  Common = 0,\n  Email = 1,\n  Telegram = 2,\n  Facebook = 3,\n  Twitter = 4,\n  Instagram = 5,\n  GitHub = 6,\n  Reddit = 7\n}\n\ninterface LinkInfo {\n  readonly rawLink: string;\n  readonly formattedLink: string;\n  readonly displayLink: string;\n  readonly icon: IconId;\n}\n\nconst getInvalidLinkInfo = (link: string): LinkInfo => ({\n  rawLink: link,\n  formattedLink: '#',\n  displayLink: 'Invalid Link',\n  icon: IconId.Common\n});\n\ntype LinkInfoProvider = (link: string) => LinkInfo | false;\n\nconst prepareFormattedLink = memoize((link: string) => link.trim());\nconst prepareDisplayLink = memoize((link: string) => link.trim().replace(/\\/$/, ''));\n\nconst socialMediaLinkInfoProvider = (link: string, baseUrl: string, icon: IconId): LinkInfo | false => {\n  if (!link.startsWith(baseUrl))\n    return false;\n\n  const formattedLink = prepareFormattedLink(link);\n  if (formattedLink === baseUrl)\n    return false;\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link).replace(baseUrl, ''),\n    icon\n  };\n};\n\nconst telegramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://t.me/', IconId.Telegram);\nconst facebookLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://facebook.com/', IconId.Facebook);\nconst twitterLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://twitter.com/', IconId.Twitter);\nconst instagramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://instagram.com/', IconId.Instagram);\nconst gitHubLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://github.com/', IconId.GitHub);\nconst redditLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://www.reddit.com/', IconId.Reddit);\n\n// This regex should not use for email validation\nconst emailCheckingRegEx = /^[^\\s/@]+@[^\\s@/]+$/;\nconst emailLinkInfoProvider: LinkInfoProvider = link => {\n  const preparedFormattedLink = prepareFormattedLink(link);\n\n  return emailCheckingRegEx.test(preparedFormattedLink) && {\n    rawLink: link,\n    formattedLink: `mailto:${preparedFormattedLink}`,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Email\n  };\n};\n\nconst javascriptLinkInfoProvider: LinkInfoProvider = link => link.startsWith('javascript') ? getInvalidLinkInfo(link) : false;\n\n// https://datatracker.ietf.org/doc/html/rfc3986#section-3.1\nconst urlSchemeRegEx = /^([a-z][a-z0-9+\\-.]*):/;\nconst commonLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return urlSchemeRegEx.test(formattedLink) && {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nconst editLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nexport class ServiceLinkHelper {\n  // Order is important\n  static readonly linkInfoProviders: readonly LinkInfoProvider[] = [\n    // Disallowed\n    javascriptLinkInfoProvider,\n    // Allowed\n    telegramLinkInfoProvider,\n    facebookLinkInfoProvider,\n    twitterLinkInfoProvider,\n    instagramLinkInfoProvider,\n    gitHubLinkInfoProvider,\n    emailLinkInfoProvider,\n    redditLinkInfoProvider,\n    commonLinkInfoProvider\n  ];\n\n  getLinkInfo(link: string, isEditMode = false): LinkInfo | null {\n    for (const provider of ServiceLinkHelper.linkInfoProviders) {\n      const linkInfo = provider(link);\n\n      if (linkInfo)\n        return this.linkInfoIsValid(linkInfo) ? linkInfo : null;\n    }\n\n    if (isEditMode)\n      return editLinkInfoProvider(link) as LinkInfo;\n\n    return null;\n  }\n\n  linkInfoIsValid(linkInfo: LinkInfo) {\n    return linkInfo.formattedLink !== '#';\n  }\n}\n","export enum PaymentType {\n  Payment = 1,\n  Donation = 2\n}\n\nexport interface PaymentBase {\n  readonly type: PaymentType;\n  readonly targetAddress: string;\n}\n","import { PaymentBase } from '../../models/payment/paymentBase';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { guards } from '../../utils';\nimport { PaymentValidationMethod } from './paymentValidationMethod';\n\nexport abstract class PaymentValidatorBase<TPayment extends PaymentBase> {\n  protected readonly abstract validationMethods: ReadonlyArray<PaymentValidationMethod<TPayment>>;\n  protected readonly abstract invalidPaymentObjectError: string;\n\n  validate(payment: TPayment, bail = false): FailedValidationResults {\n    if (!guards.isPlainObject(payment))\n      return [this.invalidPaymentObjectError];\n\n    let failedValidationResults: FailedValidationResults;\n    for (const validationMethod of this.validationMethods) {\n      const currentFailedValidationResults = validationMethod(payment);\n      if (currentFailedValidationResults) {\n        if (!bail)\n          return currentFailedValidationResults;\n\n        (failedValidationResults || (failedValidationResults = [])).concat(currentFailedValidationResults);\n      }\n    }\n\n    return failedValidationResults;\n  }\n}\n","const networksInternal = {\n  // mainnet: {\n  //   id: 'NetXdQprcVkpaWU',\n  //   name: 'mainnet',\n  // },\n  granadanet: {\n    id: 'NetXz969SFaFn8k',\n    name: 'granadanet',\n  },\n  edo2net: {\n    id: 'NetXSgo1ZT2DRUG',\n    name: 'edo2net',\n  }\n} as const;\n\ninterface NetworkInternal {\n  readonly id: string;\n  readonly name: string;\n}\n\ntype Networks = {\n  readonly [P in keyof typeof networksInternal]: (typeof networksInternal)[P] extends NetworkInternal & {\n    readonly name: P;\n  }\n  ? (typeof networksInternal)[P]\n  : never\n};\n\nexport type Network = Networks[keyof Networks];\nexport interface CustomNetwork {\n  readonly id?: string;\n  readonly name: string;\n}\n\nexport const networks: Networks = networksInternal;\nexport const networksCollection = Object.values(networksInternal);\n\nexport const networkIdRegExp = /^[a-zA-Z]\\w*$/;\nexport const networkNameRegExp = networkIdRegExp;\n","import { Network, networks } from './network';\n\ninterface TokenBase {\n  readonly network: Network;\n  readonly contractAddress: string;\n  readonly metadata?: TokenMetadata;\n}\n\nexport interface TokenFA12 extends TokenBase {\n  readonly type: 'fa1.2';\n}\n\nexport interface TokenFA2 extends TokenBase {\n  readonly type: 'fa2';\n  readonly fa2TokenId: number;\n}\n\nexport type Token = TokenFA12 | TokenFA2;\n\nexport type TokenMetadata = {\n  readonly decimals: number;\n  readonly symbol: string;\n  readonly name: string;\n  readonly thumbnailUri: string;\n};\n\nexport const tezosMeta: TokenMetadata = {\n  symbol: 'XTZ',\n  name: 'Tezos',\n  decimals: 6,\n  thumbnailUri: 'https://dashboard.tezospayments.com/tokens/tezos.png'\n};\n\nexport const tokenWhitelist: readonly Token[] = [\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa1.2',\n  //   contractAddress: 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV',\n  //   metadata: {\n  //     decimals: 18,\n  //     symbol: 'KUSD',\n  //     name: 'Kolibri',\n  //     thumbnailUri: 'https://kolibri-data.s3.amazonaws.com/logo.png',\n  //   },\n  // },\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa2',\n  //   contractAddress: 'KT1REEb5VxWRjcHm5GzDMwErMmNFftsE5Gpf',\n  //   fa2TokenId: 0,\n  //   metadata: {\n  //     decimals: 6,\n  //     symbol: 'USDS',\n  //     name: 'Stably USD',\n  //     thumbnailUri: 'https://quipuswap.com/tokens/stably.png',\n  //   },\n  // },\n  {\n    network: networks.edo2net,\n    type: 'fa2',\n    contractAddress: 'KT1Mn2HUUKUPg8wiQhUJ8Z9jUtZLaZn8EWL2',\n    fa2TokenId: 0,\n    metadata: {\n      decimals: 0,\n      symbol: 'MBRG',\n      name: 'MAX BURGER',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  }\n];\n\nexport const tokenWhitelistMap: ReadonlyMap<Token['contractAddress'], Token> = new Map<Token['contractAddress'], Token>(\n  tokenWhitelist.map(token => [token.contractAddress, token])\n);\n","const contractAddressPrefixes = ['KT'] as const;\nconst implicitAddressPrefixes = ['tz1', 'tz2', 'tz3'] as const;\nconst addressPrefixes = [...contractAddressPrefixes, ...implicitAddressPrefixes] as const;\n\nexport const tezosInfo = {\n  addressLength: 36,\n  contractAddressPrefixes,\n  implicitAddressPrefixes,\n  addressPrefixes,\n} as const;\n","export enum KeyType {\n  Ed25519 = 'Ed25519',\n  Secp256k1 = 'Secp256k1',\n  P256 = 'P256'\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { URL as NodeURL } from 'url';\n\nexport type URL = NodeURL;\nexport const URL = NodeURL || (globalThis as any).URL;\n","import BigNumber from 'bignumber.js';\n\nimport { tezosInfo } from '../../models/blockchain';\nimport { Payment } from '../../models/payment';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { URL } from '../../native';\nimport { guards } from '../../utils';\n\ntype Errors<FieldNames extends string> = {\n  readonly [P in FieldNames]: string;\n};\n\nexport const validateTargetAddress = (\n  targetAddress: string,\n  errors: Errors<'invalidTargetAddress' | 'targetAddressHasInvalidLength' | 'targetAddressIsNotNetworkAddress'>\n): FailedValidationResults => {\n  if (typeof targetAddress !== 'string')\n    return [errors.invalidTargetAddress];\n\n  if (targetAddress.length !== tezosInfo.addressLength)\n    return [errors.targetAddressHasInvalidLength];\n\n  if (!tezosInfo.addressPrefixes.some(prefix => targetAddress.startsWith(prefix)))\n    return [errors.targetAddressIsNotNetworkAddress];\n};\n\nexport const validateAmount = (\n  amount: BigNumber,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  if (!BigNumber.isBigNumber(amount) || amount.isNaN() || !amount.isFinite())\n    return [errors.invalidAmount];\n\n  if (amount.isZero() || amount.isNegative())\n    return [errors.amountIsNonPositive];\n};\n\nexport const validateDesiredAmount = (\n  desiredAmount: BigNumber | undefined,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  return desiredAmount === undefined ? undefined : validateAmount(desiredAmount, errors);\n};\n\nexport const validateAsset = (\n  asset: string | undefined,\n  errors: Errors<'invalidAsset' | 'assetHasInvalidLength' | 'assetIsNotContractAddress'>\n): FailedValidationResults => {\n  if (asset === undefined)\n    return;\n\n  if (typeof asset !== 'string')\n    return [errors.invalidAsset];\n\n  if (asset.length !== tezosInfo.addressLength)\n    return [errors.assetHasInvalidLength];\n\n  if (!tezosInfo.contractAddressPrefixes.some(prefix => asset.startsWith(prefix)))\n    return [errors.assetIsNotContractAddress];\n};\n\nexport const validateCreatedDate = (\n  date: Date,\n  errors: Errors<'invalidCreatedDate'>\n): FailedValidationResults => {\n  if (!(date instanceof Date) || isNaN(date.getTime()))\n    return [errors.invalidCreatedDate];\n};\n\nexport const validateUrl = (\n  url: URL | undefined,\n  errors: Errors<'invalidUrl' | 'invalidProtocol'>\n): FailedValidationResults => {\n  if (url === undefined)\n    return;\n\n  if (!(url instanceof URL))\n    return [errors.invalidUrl];\n\n  if (url.protocol.indexOf('javascript') > -1)\n    return [errors.invalidProtocol];\n};\n\nexport const validateExpiredDate = (\n  expiredDate: Date | undefined,\n  createdDate: Date,\n  minimumPaymentLifetime: number,\n  errors: Errors<'invalidExpiredDate' | 'paymentLifetimeIsShort'>\n): FailedValidationResults => {\n  if (expiredDate === undefined)\n    return;\n\n  if (!(expiredDate instanceof Date) || isNaN(expiredDate.getTime()))\n    return [errors.invalidExpiredDate];\n\n  if (expiredDate.getTime() - createdDate.getTime() < minimumPaymentLifetime) {\n    return [errors.paymentLifetimeIsShort];\n  }\n};\n\nexport const validateData = (\n  data: Payment['data'],\n  errors: Errors<'invalidData' | 'invalidPublicData' | 'publicDataShouldBeFlat' | 'invalidPrivateData' | 'privateDataShouldBeFlat'>\n): FailedValidationResults => {\n  if (!guards.isPlainObject(data) || Object.keys(data).some(key => key !== 'public' && key !== 'private'))\n    return [errors.invalidData];\n\n  const publicData = (data as Exclude<Payment['data'], { private: unknown }>).public;\n  const privateData = (data as Exclude<Payment['data'], { public: unknown }>).private;\n  if (!(publicData || privateData))\n    return [errors.invalidData];\n\n  if (publicData !== undefined) {\n    if (!guards.isPlainObject(publicData))\n      return [errors.invalidPublicData];\n    if (!isFlatObject(publicData))\n      return [errors.publicDataShouldBeFlat];\n  }\n\n  if (privateData !== undefined) {\n    if (!guards.isPlainObject(privateData))\n      return [errors.invalidPrivateData];\n    if (!isFlatObject(privateData))\n      return [errors.privateDataShouldBeFlat];\n  }\n};\n\nconst isFlatObject = (obj: Record<string, unknown>) => {\n  for (const propertyName of Object.getOwnPropertyNames(obj)) {\n    const property = obj[propertyName];\n    if (typeof property === 'object' || typeof property === 'function')\n      return false;\n  }\n\n  return true;\n};\n","import type { Payment } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport {\n  validateTargetAddress, validateAmount, validateData, validateAsset, validateCreatedDate,\n  validateExpiredDate, validateUrl\n} from './validationMethods';\n\nexport class PaymentValidator extends PaymentValidatorBase<Payment> {\n  static readonly errors = {\n    invalidPaymentObject: 'Payment is undefined or not object',\n    invalidType: 'Payment type is invalid',\n    invalidAmount: 'Amount is invalid',\n    amountIsNonPositive: 'Amount is less than or equal to zero',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidData: 'Payment data is invalid',\n    invalidPublicData: 'Payment public data is invalid',\n    invalidPrivateData: 'Payment private data is invalid',\n    publicDataShouldBeFlat: 'Public data should be flat',\n    privateDataShouldBeFlat: 'Private data should be flat',\n    invalidAsset: 'Asset address is invalid',\n    assetIsNotContractAddress: 'Asset address isn\\'t a contract address',\n    assetHasInvalidLength: 'Asset address has an invalid address',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol',\n    invalidCreatedDate: 'Created date is invalid',\n    invalidExpiredDate: 'Expired date is invalid',\n    paymentLifetimeIsShort: 'Payment lifetime is short'\n  } as const;\n  static readonly minimumPaymentLifetime = 600000; // 10 * 60 * 1000;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Payment>> = [\n    payment => payment.type !== PaymentType.Payment ? [PaymentValidator.errors.invalidType] : undefined,\n    payment => validateTargetAddress(payment.targetAddress, PaymentValidator.errors),\n    payment => validateAmount(payment.amount, PaymentValidator.errors),\n    payment => validateData(payment.data, PaymentValidator.errors),\n    payment => validateAsset(payment.asset, PaymentValidator.errors),\n    payment => validateUrl(payment.successUrl, PaymentValidator.successUrlErrors),\n    payment => validateUrl(payment.cancelUrl, PaymentValidator.cancelUrlErrors),\n    payment => validateCreatedDate(payment.created, PaymentValidator.errors),\n    payment => validateExpiredDate(payment.expired, payment.created, PaymentValidator.minimumPaymentLifetime, PaymentValidator.errors),\n  ];\n\n  protected readonly invalidPaymentObjectError = PaymentValidator.errors.invalidPaymentObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidSuccessUrl,\n    invalidProtocol: PaymentValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidCancelUrl,\n    invalidProtocol: PaymentValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","import type { Donation } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport { validateTargetAddress, validateDesiredAmount, validateAsset, validateUrl } from './validationMethods';\n\nexport class DonationValidator extends PaymentValidatorBase<Donation> {\n  static readonly errors = {\n    invalidDonationObject: 'Donation is undefined or not object',\n    invalidType: 'Donation type is invalid',\n    invalidAmount: 'Desired amount is invalid',\n    amountIsNonPositive: 'Desired amount is less than or equal to zero',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidAsset: 'Desired asset address is invalid',\n    assetIsNotContractAddress: 'Desired asset address isn\\'t a contract address',\n    assetHasInvalidLength: 'Desired asset address has an invalid address',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol'\n  } as const;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Donation>> = [\n    donation => donation.type !== PaymentType.Donation ? [DonationValidator.errors.invalidType] : undefined,\n    donation => validateTargetAddress(donation.targetAddress, DonationValidator.errors),\n    donation => validateDesiredAmount(donation.desiredAmount, DonationValidator.errors),\n    donation => validateAsset(donation.desiredAsset, DonationValidator.errors),\n    donation => validateUrl(donation.successUrl, DonationValidator.successUrlErrors),\n    donation => validateUrl(donation.cancelUrl, DonationValidator.cancelUrlErrors)\n  ];\n\n  protected readonly invalidPaymentObjectError = DonationValidator.errors.invalidDonationObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidSuccessUrl,\n    invalidProtocol: DonationValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidCancelUrl,\n    invalidProtocol: DonationValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","export abstract class StateModel {\n    protected constructor() {\n    // All derived classes should be static\n    }\n}\n","import { SerializedFieldType } from './serializedFieldType';\n\nexport class ObjectSerializationValidator<T extends Record<string | number, unknown>> {\n  private _minObjectFieldsCount: number | undefined;\n\n  constructor(\n    protected readonly objectFieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>\n  ) {\n  }\n\n  private get minObjectFieldsCount() {\n    if (!this._minObjectFieldsCount) {\n      let count = 0;\n      for (const info of this.objectFieldTypes) {\n        if (typeof info[1] === 'string' ? info[1] !== 'undefined' : info[1].every(type => type !== 'undefined'))\n          count++;\n      }\n\n      this._minObjectFieldsCount = count;\n    }\n\n    return this._minObjectFieldsCount;\n  }\n\n  private get maxObjectFieldsCount() {\n    return this.objectFieldTypes.size;\n  }\n\n  validate(value: T): value is T {\n    if (!value)\n      return false;\n\n    const fieldNames = Object.getOwnPropertyNames(value) as ReadonlyArray<keyof T>;\n\n    // Prevent the field checking if the deserializedValue has an invalid number of fields\n    if (fieldNames.length < this.minObjectFieldsCount || fieldNames.length > this.maxObjectFieldsCount)\n      return false;\n\n    for (const [fieldName, expectedFieldType] of this.objectFieldTypes) {\n      const fieldValue = value[fieldName];\n      const actualFieldType = fieldValue === null ? 'null' : typeof fieldValue;\n\n      if (Array.isArray(expectedFieldType)\n        ? !expectedFieldType.some(expectedType => actualFieldType === expectedType)\n        : actualFieldType !== expectedFieldType\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Serializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  serialize(value: T): string | null {\n    try {\n      if (!this.objectSerializationValidator.validate(value))\n        return null;\n\n      const jsonString = JSON.stringify(value);\n      return base64.encode(jsonString, 'base64url');\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Deserializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  deserialize(serializedValue: string): T | null {\n    try {\n      let value: T;\n\n      if (serializedValue) {\n        const serializedValueString = base64.decode(serializedValue, 'base64url');\n        value = JSON.parse(serializedValueString);\n      }\n      else\n        value = {} as T;\n\n      return this.objectSerializationValidator.validate(value)\n        ? value\n        : null;\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { LegacySerializedPayment, SerializedPayment } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nexport const serializedPaymentFieldTypes: ReadonlyMap<\n  keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  // amount\n  .set('a', 'string')\n  // data\n  .set('d', 'object')\n  // asset\n  .set('as', ['string', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null'])\n  // created\n  .set('c', 'number')\n  // expired\n  .set('e', ['number', 'undefined', 'null']);\n\nexport const legacySerializedPaymentFieldTypes: ReadonlyMap<\n  keyof LegacySerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof LegacySerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  .set('amount', 'string')\n  .set('data', 'object')\n  .set('asset', ['string', 'undefined', 'null'])\n  .set('successUrl', ['string', 'undefined', 'null'])\n  .set('cancelUrl', ['string', 'undefined', 'null'])\n  .set('created', 'number')\n  .set('expired', ['number', 'undefined', 'null']);\n","import type { Payment, SerializedPayment } from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentSerializer {\n  protected static readonly serializedPaymentBase64Serializer = new Base64Serializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  serialize(payment: Payment): string | null {\n    try {\n      const serializedPayment = this.mapPaymentToSerializedPayment(payment);\n      return PaymentSerializer.serializedPaymentBase64Serializer.serialize(serializedPayment);\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapPaymentToSerializedPayment(payment: Payment): SerializedPayment {\n    return {\n      a: payment.amount.toString(),\n      d: payment.data,\n      as: payment.asset,\n      su: payment.successUrl?.toString(),\n      cu: payment.cancelUrl?.toString(),\n      c: payment.created.getTime(),\n      e: payment.expired?.getTime(),\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedPaymentSlice, Payment, SerializedPayment } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment | null {\n    try {\n      const serializedPayment = PaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment, nonSerializedPaymentSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: SerializedPayment, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment {\n    return {\n      type: PaymentType.Payment,\n      amount: new BigNumber(serializedPayment.a),\n      data: serializedPayment.d,\n      asset: serializedPayment.as,\n      successUrl: serializedPayment.su ? new URL(serializedPayment.su) : undefined,\n      cancelUrl: serializedPayment.cu ? new URL(serializedPayment.cu) : undefined,\n      created: new Date(serializedPayment.c),\n      expired: serializedPayment.e ? new Date(serializedPayment.e) : undefined,\n      targetAddress: nonSerializedPaymentSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedPaymentSlice, Payment, LegacySerializedPayment } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { legacySerializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class LegacyPaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<LegacySerializedPayment>(\n    legacySerializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment | null {\n    try {\n      const serializedPayment = LegacyPaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment, nonSerializedPaymentSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: LegacySerializedPayment, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment {\n    return {\n      type: PaymentType.Payment,\n      amount: new BigNumber(serializedPayment.amount),\n      data: serializedPayment.data,\n      asset: serializedPayment.asset,\n      successUrl: serializedPayment.successUrl ? new URL(serializedPayment.successUrl) : undefined,\n      cancelUrl: serializedPayment.cancelUrl ? new URL(serializedPayment.cancelUrl) : undefined,\n      created: new Date(serializedPayment.created),\n      expired: serializedPayment.expired ? new Date(serializedPayment.expired) : undefined,\n      targetAddress: nonSerializedPaymentSlice.targetAddress\n    };\n  }\n}\n","import { LegacySerializedDonation, SerializedDonation } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nexport const serializedDonationFieldTypes: ReadonlyMap<\n  keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  // desiredAmount\n  .set('da', ['string', 'undefined', 'null'])\n  // desiredAsset\n  .set('das', ['string', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null']);\n\nexport const legacySerializedDonationFieldTypes: ReadonlyMap<\n  keyof LegacySerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof LegacySerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  .set('desiredAmount', ['string', 'undefined', 'null'])\n  .set('desiredAsset', ['string', 'undefined', 'null'])\n  .set('successUrl', ['string', 'undefined', 'null'])\n  .set('cancelUrl', ['string', 'undefined', 'null']);\n","import type { Donation, SerializedDonation } from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nconst serializedEmptyObjectBase64 = 'e30';\nexport class DonationSerializer {\n  protected static readonly serializedDonationBase64Serializer = new Base64Serializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  serialize(donation: Donation): string | null {\n    try {\n      const serializedDonation = this.mapDonationToSerializedDonation(donation);\n      const serializedDonationBase64 = DonationSerializer.serializedDonationBase64Serializer.serialize(serializedDonation);\n\n      return serializedDonationBase64 === serializedEmptyObjectBase64 ? '' : serializedDonationBase64;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapDonationToSerializedDonation(donation: Donation): SerializedDonation {\n    return {\n      da: donation.desiredAmount?.toString(),\n      das: donation.desiredAsset,\n      su: donation.successUrl?.toString(),\n      cu: donation.cancelUrl?.toString(),\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedDonationSlice, Donation, SerializedDonation } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class DonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = DonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: SerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      desiredAmount: serializedDonation.da ? new BigNumber(serializedDonation.da) : undefined,\n      desiredAsset: serializedDonation.das,\n      successUrl: serializedDonation.su ? new URL(serializedDonation.su) : undefined,\n      cancelUrl: serializedDonation.cu ? new URL(serializedDonation.cu) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedDonationSlice, Donation, LegacySerializedDonation } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { legacySerializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class LegacyDonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<LegacySerializedDonation>(\n    legacySerializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = LegacyDonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: LegacySerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      desiredAmount: serializedDonation.desiredAmount ? new BigNumber(serializedDonation.desiredAmount) : undefined,\n      desiredAsset: serializedDonation.desiredAsset,\n      successUrl: serializedDonation.successUrl ? new URL(serializedDonation.successUrl) : undefined,\n      cancelUrl: serializedDonation.cancelUrl ? new URL(serializedDonation.cancelUrl) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { PaymentValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { LegacyPaymentDeserializer, PaymentDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedPaymentSlice } from './serializedPayment';\n\ninterface PublicPaymentData {\n  readonly public: { readonly [fieldName: string]: unknown; };\n}\n\ninterface PrivatePaymentData {\n  readonly private: { readonly [fieldName: string]: unknown; };\n}\n\ntype PaymentData =\n  | PublicPaymentData\n  | PrivatePaymentData\n  | PublicPaymentData & PrivatePaymentData;\n\nexport interface Payment extends PaymentBase {\n  readonly type: PaymentType.Payment;\n  readonly amount: BigNumber;\n  readonly asset?: string;\n  readonly data: PaymentData;\n  readonly created: Date;\n  readonly expired?: Date;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n}\n\nexport class Payment extends StateModel {\n  static readonly defaultDeserializer: PaymentDeserializer = new PaymentDeserializer();\n  static readonly defaultLegacyDeserializer: LegacyPaymentDeserializer = new LegacyPaymentDeserializer();\n  static readonly defaultValidator: PaymentValidator = new PaymentValidator();\n\n  static validate(payment: Payment) {\n    return this.defaultValidator.validate(payment);\n  }\n\n  static deserialize(serializedPayment: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice, isLegacy = false): Payment | null {\n    return !isLegacy\n      ? Payment.defaultDeserializer.deserialize(serializedPayment, nonSerializedPaymentSlice)\n      : Payment.defaultLegacyDeserializer.deserialize(serializedPayment, nonSerializedPaymentSlice);\n  }\n\n  static publicDataExists(payment: Payment): payment is Payment & { readonly data: PublicPaymentData };\n  static publicDataExists(paymentData: Payment['data']): paymentData is Payment['data'] & PublicPaymentData;\n  static publicDataExists(\n    paymentOrPaymentDataOrPaymentData: Payment | Payment['data']\n  ): paymentOrPaymentDataOrPaymentData is (Payment & { readonly data: PublicPaymentData }) | (Payment['data'] & PublicPaymentData) {\n    return this.publicDataExistsInternal(paymentOrPaymentDataOrPaymentData);\n  }\n\n  static privateDataExists(payment: Payment): payment is Payment & { readonly data: PrivatePaymentData } {\n    return !!(payment.data as PrivatePaymentData).private;\n  }\n\n  protected static publicDataExistsInternal(\n    paymentOrPaymentDataOrPaymentData: Payment | Payment['data']\n  ): paymentOrPaymentDataOrPaymentData is (Payment & { readonly data: PublicPaymentData }) | (Payment['data'] & PublicPaymentData) {\n    return !!(Payment.isPayment(paymentOrPaymentDataOrPaymentData)\n      ? (paymentOrPaymentDataOrPaymentData.data as PublicPaymentData).public\n      : (paymentOrPaymentDataOrPaymentData as PublicPaymentData).public\n    );\n  }\n\n  private static isPayment(paymentOrPaymentDataOrPaymentData: Payment | Payment['data']): paymentOrPaymentDataOrPaymentData is Payment {\n    return !!(paymentOrPaymentDataOrPaymentData as Payment).amount;\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { DonationValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { DonationDeserializer, LegacyDonationDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedDonationSlice } from './serializedDonation';\n\nexport interface Donation extends PaymentBase {\n  readonly type: PaymentType.Donation;\n  readonly desiredAmount?: BigNumber;\n  readonly desiredAsset?: string;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n}\n\nexport class Donation extends StateModel {\n  static readonly defaultDeserializer: DonationDeserializer = new DonationDeserializer();\n  static readonly defaultLegacyDeserializer: LegacyDonationDeserializer = new LegacyDonationDeserializer();\n  static readonly defaultValidator: DonationValidator = new DonationValidator();\n\n  static validate(donation: Donation) {\n    return this.defaultValidator.validate(donation);\n  }\n\n  static deserialize(serializedDonation: string, nonSerializedDonationSlice: NonSerializedDonationSlice, isLegacy = false): Donation | null {\n    return !isLegacy\n      ? Donation.defaultDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice)\n      : Donation.defaultLegacyDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice);\n  }\n}\n\n","import { text } from '../../utils';\n\nexport enum PaymentUrlType {\n  Base64 = 0\n}\n\nconst encodedPaymentUrlTypeMap = new Map<PaymentUrlType, string>(\n  Object.keys(PaymentUrlType)\n    .filter(value => !isNaN(+value))\n    .map(value => [+value, text.padStart(value, 2, '0')])\n);\n\nexport const getEncodedPaymentUrlType = (paymentUrlType: PaymentUrlType) => encodedPaymentUrlTypeMap.get(paymentUrlType) || '';\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ParameterizedRouteFactory = (...args: any[]) => string;\nexport type ParameterizedRoute<Factory extends ParameterizedRouteFactory> = Factory & {\n  readonly template: string;\n};\n\nexport const getParameterizedRoute = <Factory extends ParameterizedRouteFactory>(\n  factory: Factory, template: string\n): ParameterizedRoute<Factory> => {\n  (factory as Factory & { template: string }).template = template;\n\n  return factory as ParameterizedRoute<Factory>;\n};\n","export enum ServiceOperationType {\n  Payment = 1,\n  Donation = 2,\n\n  All = Payment | Donation\n}\n","import { Network, networks } from '../blockchain/network';\nimport { ServiceOperationType } from './serviceOperationType';\nimport { ServiceSigningKey } from './serviceSigningKey';\n\nexport interface Service {\n  readonly name: string;\n  readonly links: readonly string[];\n  readonly description?: string;\n  readonly iconUrl?: string;\n  readonly version: number;\n  readonly metadata: string;\n\n  readonly contractAddress: string;\n  readonly network: Network;\n  readonly allowedTokens: {\n    readonly tez: boolean;\n    readonly assets: readonly string[];\n  }\n  readonly allowedOperationType: ServiceOperationType;\n\n  readonly owner: string;\n  readonly paused: boolean;\n  readonly deleted: boolean;\n  readonly signingKeys: { readonly [key: string]: ServiceSigningKey };\n}\n\nexport const emptyService: Service = {\n  name: '',\n  description: '',\n  links: [],\n  version: 0,\n  metadata: '',\n  contractAddress: '',\n  allowedTokens: {\n    tez: true,\n    assets: []\n  },\n  allowedOperationType: ServiceOperationType.Payment,\n  owner: '',\n  paused: false,\n  deleted: false,\n  network: networks.edo2net,\n  signingKeys: {}\n};\n","import BigNumber from 'bignumber.js';\n\nimport { converters } from '../../utils';\nimport { StateModel } from '../core';\nimport { ServiceOperationDirection } from './serviceOperationDirection';\nimport { ServiceOperationStatus } from './serviceOperationStatus';\nimport { ServiceOperationType } from './serviceOperationType';\n\ninterface ServiceOperationPayloadData {\n  readonly value: { readonly [fieldName: string]: unknown; } | null;\n  readonly valueString: string;\n  readonly encodedValue: string;\n}\n\ninterface PublicServiceOperationPayload {\n  readonly public: ServiceOperationPayloadData;\n}\n\ninterface PrivateServiceOperationPayload {\n  readonly private: ServiceOperationPayloadData;\n}\n\ntype ServiceOperationPayload =\n  | PublicServiceOperationPayload\n  | PrivateServiceOperationPayload\n  | PublicServiceOperationPayload & PrivateServiceOperationPayload;\n\nexport interface ServiceOperation {\n  readonly hash: string;\n  readonly type: ServiceOperationType;\n  readonly direction: ServiceOperationDirection;\n  readonly status: ServiceOperationStatus;\n  readonly amount: BigNumber;\n  readonly payload: ServiceOperationPayload;\n  readonly asset?: string;\n  readonly timestamp: string;\n  readonly date: Date;\n  readonly sender: string;\n  readonly target: string;\n}\n\nexport class ServiceOperation extends StateModel {\n  static publicPayloadExists(operation: ServiceOperation): operation is ServiceOperation & { readonly payload: PublicServiceOperationPayload } {\n    return !!(operation.payload as PublicServiceOperationPayload).public;\n  }\n\n  static privatePayloadExists(operation: ServiceOperation): operation is ServiceOperation & { readonly payload: PrivateServiceOperationPayload } {\n    return !!(operation.payload as PrivateServiceOperationPayload).private;\n  }\n\n  static isPayloadDecoded(\n    data: ServiceOperationPayloadData\n  ): data is ServiceOperationPayloadData & { readonly value: NonNullable<ServiceOperationPayloadData['value']> } {\n    return !!data.value;\n  }\n\n  static parseServiceOperationPayload(encodedValue: string): ServiceOperationPayloadData {\n    const valueString = converters.bytesToString(encodedValue);\n\n    let value: ServiceOperationPayloadData['value'] = null;\n    try { value = JSON.parse(valueString); } catch { /**/ }\n\n    return {\n      value,\n      valueString,\n      encodedValue,\n    };\n  }\n}\n","export enum ServiceOperationDirection {\n  Incoming = 0,\n  Outgoing = 1\n}\n","export enum ServiceOperationStatus {\n  Pending = 0,\n  Success = 1,\n  Cancelled = 2\n}\n"],"names":["isBase64UrlFormatSupported","Buffer","isEncoding","decode","base64String","format","base64UrlPreprocessor","prepareValueForDecoding","from","toString","encode","value","encodedValue","prepareEncodedValue","base64value","split","replace","length","Error","stringToUint8Array","hex","integers","match","map","val","parseInt","Uint8Array","stringToBytes","bytesToString","objectToBytes","JSON","stringify","bytesToObject","parse","tezToMutez","tez","BigInt","isArray","arg","Array","isReadonlyArray","isPlainObject","isPlainObjectLodashFunction","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","i","memoize","func","lastArgs","lastResult","arguments","apply","emptyArray","emptyObject","emptyMap","Map","emptySet","Set","is","x","y","shallowEqual","objA","objB","keysA","Object","keys","keysB","prototype","hasOwnProperty","call","capitalize","toLocaleUpperCase","slice","getAvatarText","maxLength","result","j","isWord","stringPad","string","isStart","fillString","String","padStart","undefined","stringLength","fillLength","filler","repeat","Math","ceil","padEnd","wait","ms","Promise","resolve","setTimeout","IconId","getInvalidLinkInfo","link","rawLink","formattedLink","displayLink","icon","Common","prepareFormattedLink","trim","prepareDisplayLink","socialMediaLinkInfoProvider","baseUrl","startsWith","telegramLinkInfoProvider","Telegram","facebookLinkInfoProvider","Facebook","twitterLinkInfoProvider","Twitter","instagramLinkInfoProvider","Instagram","gitHubLinkInfoProvider","GitHub","redditLinkInfoProvider","Reddit","emailCheckingRegEx","emailLinkInfoProvider","preparedFormattedLink","test","Email","javascriptLinkInfoProvider","urlSchemeRegEx","commonLinkInfoProvider","editLinkInfoProvider","ServiceLinkHelper","isEditMode","linkInfoProviders","provider","linkInfo","linkInfoIsValid","PaymentType","PaymentValidatorBase","payment","bail","guards","invalidPaymentObjectError","failedValidationResults","validationMethods","validationMethod","currentFailedValidationResults","concat","networksInternal","granadanet","id","name","edo2net","networks","networksCollection","values","networkIdRegExp","networkNameRegExp","tezosMeta","symbol","decimals","thumbnailUri","tokenWhitelist","network","type","contractAddress","fa2TokenId","metadata","tokenWhitelistMap","token","contractAddressPrefixes","implicitAddressPrefixes","addressPrefixes","tezosInfo","addressLength","KeyType","URL","NodeURL","globalThis","validateTargetAddress","targetAddress","errors","invalidTargetAddress","targetAddressHasInvalidLength","some","prefix","targetAddressIsNotNetworkAddress","validateAmount","amount","BigNumber","isBigNumber","isNaN","isFinite","invalidAmount","isZero","isNegative","amountIsNonPositive","validateDesiredAmount","desiredAmount","validateAsset","asset","invalidAsset","assetHasInvalidLength","assetIsNotContractAddress","validateCreatedDate","date","Date","getTime","invalidCreatedDate","validateUrl","url","invalidUrl","protocol","indexOf","invalidProtocol","validateExpiredDate","expiredDate","createdDate","minimumPaymentLifetime","invalidExpiredDate","paymentLifetimeIsShort","validateData","data","key","invalidData","publicData","privateData","invalidPublicData","isFlatObject","publicDataShouldBeFlat","invalidPrivateData","privateDataShouldBeFlat","obj","getOwnPropertyNames","propertyName","property","PaymentValidator","Payment","invalidType","successUrl","successUrlErrors","cancelUrl","cancelUrlErrors","created","expired","invalidPaymentObject","invalidSuccessUrl","successUrlHasInvalidProtocol","invalidCancelUrl","cancelUrlHasInvalidProtocol","DonationValidator","donation","Donation","desiredAsset","invalidDonationObject","StateModel","ObjectSerializationValidator","objectFieldTypes","_minObjectFieldsCount","count","info","every","size","fieldNames","minObjectFieldsCount","maxObjectFieldsCount","fieldName","expectedFieldType","fieldValue","actualFieldType","expectedType","Base64Serializer","fieldTypes","objectSerializationValidator","validate","jsonString","base64","Base64Deserializer","serializedValue","serializedValueString","serializedPaymentFieldTypes","set","legacySerializedPaymentFieldTypes","PaymentSerializer","serializedPayment","mapPaymentToSerializedPayment","serializedPaymentBase64Serializer","serialize","d","as","su","cu","c","e","PaymentDeserializer","serializedPaymentBase64","nonSerializedPaymentSlice","serializedPaymentBase64Deserializer","deserialize","mapSerializedPaymentToPayment","LegacyPaymentDeserializer","serializedDonationFieldTypes","legacySerializedDonationFieldTypes","serializedEmptyObjectBase64","DonationSerializer","serializedDonation","mapDonationToSerializedDonation","serializedDonationBase64","serializedDonationBase64Serializer","da","das","DonationDeserializer","nonSerializedDonationSlice","serializedDonationBase64Deserializer","mapSerializedDonationToDonation","LegacyDonationDeserializer","defaultValidator","isLegacy","defaultDeserializer","defaultLegacyDeserializer","paymentOrPaymentDataOrPaymentData","publicDataExistsInternal","isPayment","PaymentUrlType","encodedPaymentUrlTypeMap","filter","text","getEncodedPaymentUrlType","paymentUrlType","get","getParameterizedRoute","factory","template","ServiceOperationType","emptyService","description","links","version","allowedTokens","assets","allowedOperationType","owner","paused","deleted","signingKeys","ServiceOperation","operation","payload","valueString","converters","ServiceOperationDirection","ServiceOperationStatus"],"mappings":"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"}