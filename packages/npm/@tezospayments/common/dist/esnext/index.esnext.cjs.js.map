{"version":3,"file":"index.esnext.cjs.js","sources":["../../src/utils/base64.ts","../../src/utils/converters.ts","../../src/utils/guards.ts","../../src/utils/memoize.ts","../../src/utils/optimization.ts","../../src/utils/shallowEqual.ts","../../src/utils/text.ts","../../src/utils/index.ts","../../src/helpers/serviceLinkHelper.ts","../../src/models/payment/paymentBase.ts","../../src/helpers/paymentValidator/paymentValidatorBase.ts","../../src/models/blockchain/network.ts","../../src/models/blockchain/token.ts","../../src/models/blockchain/tezosInfo.ts","../../src/models/blockchain/keyType.ts","../../src/native/index.ts","../../src/helpers/paymentValidator/validationMethods.ts","../../src/helpers/paymentValidator/paymentValidator.ts","../../src/helpers/paymentValidator/donationValidator.ts","../../src/models/core/stateModel.ts","../../src/serialization/base64/objectSerializationValidator.ts","../../src/serialization/base64/base64Serializer.ts","../../src/serialization/base64/base64Deserializer.ts","../../src/serialization/payment/serializedPaymentFieldTypes.ts","../../src/serialization/payment/paymentSerializer.ts","../../src/serialization/payment/paymentDeserializer.ts","../../src/serialization/payment/legacyPaymentDeserializer.ts","../../src/serialization/donation/serializedDonationFieldTypes.ts","../../src/serialization/donation/donationSerializer.ts","../../src/serialization/donation/donationDeserializer.ts","../../src/serialization/donation/legacyDonationDeserializer.ts","../../src/models/payment/payment.ts","../../src/models/payment/donation.ts","../../src/models/payment/paymentUrlType.ts","../../src/models/routing/parameterizedRoute.ts","../../src/models/service/serviceOperationType.ts","../../src/models/service/service.ts","../../src/models/service/serviceOperation.ts","../../src/models/service/serviceOperationDirection.ts","../../src/models/service/serviceOperationStatus.ts"],"sourcesContent":["type ValidBase64Format = 'base64' | 'base64url';\n\n// Node.js < 15\nconst isBase64UrlFormatSupported = Buffer.isEncoding('base64url');\n\nexport const decode = (base64String: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (!isBase64UrlFormatSupported) {\n    format = 'base64';\n    base64String = base64UrlPreprocessor.prepareValueForDecoding(base64String);\n  }\n\n  return Buffer.from(base64String, format).toString('utf8');\n};\n\nexport const encode = (value: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (isBase64UrlFormatSupported)\n    return Buffer.from(value, 'utf8').toString(format);\n\n  const encodedValue = Buffer.from(value, 'utf8').toString('base64');\n  return base64UrlPreprocessor.prepareEncodedValue(encodedValue);\n};\n\nconst base64UrlPreprocessor = {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  prepareEncodedValue: (base64value: string) => base64value\n    .split('=')[0]!\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_'),\n\n  prepareValueForDecoding: (base64value: string) => {\n    base64value = base64value\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n\n    switch (base64value.length % 4) {\n      case 0: return base64value;\n      case 2: return base64value + '==';\n      case 3: return base64value + '=';\n      default:\n        throw new Error('Invalid base64url value');\n    }\n  }\n};\n","import { Buffer } from 'buffer';\n\nexport const stringToUint8Array = (hex: string): Uint8Array => {\n  const integers = hex.match(/[\\da-f]{2}/gi)?.map(val => parseInt(val, 16));\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return new Uint8Array(integers!);\n};\n\nexport const stringToBytes = (value: string): string => Buffer.from(value, 'utf8').toString('hex');\nexport const bytesToString = (value: string): string => Buffer.from(stringToUint8Array(value)).toString('utf8');\n\nexport const objectToBytes = (value: Record<string, unknown>): string => stringToBytes(JSON.stringify(value));\nexport const bytesToObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: string): T | null => {\n  try {\n    return JSON.parse(bytesToString(value));\n  }\n  catch {\n    return null;\n  }\n};\n\nexport function tezToMutez(tez: number): number;\nexport function tezToMutez(tez: bigint): bigint;\nexport function tezToMutez(tez: bigint | number): bigint | number {\n  return typeof tez === 'number'\n    ? tez * 1000000\n    : tez * BigInt(1000000);\n}\n","import isPlainObjectLodashFunction from 'lodash.isplainobject';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isArray = (arg: any): arg is any[] => {\n  return Array.isArray(arg);\n};\n\nexport const isReadonlyArray = (arg: unknown): arg is readonly unknown[] => {\n  return Array.isArray(arg);\n};\n\nexport const isPlainObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: unknown): value is T => {\n  return isPlainObjectLodashFunction(value);\n};\n","const defaultEqualityCheck = <T>(a: T, b: T) => a === b;\n\nconst areArgumentsShallowlyEqual = <T extends IArguments | null>(equalityCheck: (a: T, b: T) => boolean, prev: T, next: T) => {\n    if (prev === null || next === null || prev.length !== next.length) {\n        return false;\n    }\n\n    // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n    const length = prev.length;\n    for (let i = 0; i < length; i++) {\n        if (!equalityCheck(prev[i], next[i])) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/* eslint-disable prefer-rest-params  */\n/* eslint-disable prefer-spread */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const memoize = <TF extends (...args: any) => any>(func: TF, equalityCheck = defaultEqualityCheck): TF => {\n    let lastArgs: IArguments | null = null;\n    let lastResult: unknown = null;\n\n    return (function () {\n        if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n            // apply arguments instead of spreading for performance.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            lastResult = func.apply(null, arguments as any);\n        }\n\n        lastArgs = arguments;\n        return lastResult;\n    } as TF);\n};\n/* eslint-enable prefer-spread */\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/no-explicit-any */\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst emptyArray: any[] = [];\nconst emptyObject = {};\nconst emptyMap = new Map();\nconst emptySet: Set<any> = new Set();\n\nexport default {\n    emptyArray,\n    emptyMap,\n    emptySet,\n    emptyObject\n};\n","const is = (x: unknown, y: unknown) => {\n    return (x === y)\n        ? x !== 0 || y !== 0 || (1 / x) === (1 / y)\n        // eslint-disable-next-line no-self-compare\n        : x !== x && y !== y;\n};\n\nexport default function shallowEqual(objA: unknown, objB: unknown) {\n    if (is(objA, objB))\n        return true;\n\n    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null)\n        return false;\n\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    if (keysA.length !== keysB.length)\n        return false;\n\n    for (let i = 0; i < keysA.length; i++) {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]!)\n            || !is((objA as any)[keysA[i]!], (objB as any)[keysA[i]!])\n        )\n            return false;\n\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n    }\n\n    return true;\n}\n","export const capitalize = (value: string): string => value && (value[0]?.toLocaleUpperCase() + value.slice(1));\n\nexport const getAvatarText = (value: string, maxLength = 2) => {\n  if (!value || !maxLength)\n    return '';\n\n  let result = '';\n\n  for (let i = 0, j = 0, isWord = false; i < value.length; i++) {\n    if (!isWord && value[i] !== ' ') {\n      isWord = true;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      result += value[i]!;\n\n      if (++j === maxLength)\n        return result;\n    }\n    else if (isWord && value[i] === ' ') {\n      isWord = false;\n    }\n  }\n\n  return result;\n};\n\nconst stringPad = (string: string, isStart: boolean, maxLength: number, fillString = ' ') => {\n  if (String.prototype.padStart !== undefined)\n    return string.padStart(maxLength, fillString);\n\n  const stringLength = string.length;\n  // eslint-disable-next-line eqeqeq\n  if (maxLength <= stringLength || fillString == '')\n    return string;\n\n  const fillLength = maxLength - stringLength;\n  let filler = fillString.repeat(Math.ceil(fillLength / fillString.length));\n\n  if (filler.length > fillLength)\n    filler = filler.slice(0, fillLength);\n\n  return isStart ? filler + string : string + filler;\n};\n\nexport const padStart = (string: string, maxLength: number, fillString = ' ') => String.prototype.padStart !== undefined\n  ? string.padStart(maxLength, fillString)\n  : stringPad(string, true, maxLength, fillString);\n\nexport const padEnd = (string: string, maxLength: number, fillString = ' ') => String.prototype.padEnd !== undefined\n  ? string.padEnd(maxLength, fillString)\n  : stringPad(string, false, maxLength, fillString);\n","import combineClassNames from 'clsx';\n\nimport * as base64 from './base64';\nimport * as converters from './converters';\nimport * as guards from './guards';\nimport { memoize } from './memoize';\nimport optimization from './optimization';\nimport shallowEqual from './shallowEqual';\nimport * as text from './text';\n\nconst wait = (ms: number) => new Promise<void>(resolve => setTimeout(resolve, ms));\n\nexport {\n  wait,\n  combineClassNames,\n  memoize,\n  shallowEqual,\n  base64,\n  optimization,\n  guards,\n  text,\n  converters\n};\n","import { memoize } from '../utils';\n\nexport enum IconId {\n  Common = 0,\n  Email = 1,\n  Telegram = 2,\n  Facebook = 3,\n  Twitter = 4,\n  Instagram = 5,\n  GitHub = 6,\n  Reddit = 7\n}\n\ninterface LinkInfo {\n  readonly rawLink: string;\n  readonly formattedLink: string;\n  readonly displayLink: string;\n  readonly icon: IconId;\n}\n\nconst getInvalidLinkInfo = (link: string): LinkInfo => ({\n  rawLink: link,\n  formattedLink: '#',\n  displayLink: 'Invalid Link',\n  icon: IconId.Common\n});\n\ntype LinkInfoProvider = (link: string) => LinkInfo | false;\n\nconst prepareFormattedLink = memoize((link: string) => link.trim());\nconst prepareDisplayLink = memoize((link: string) => link.trim().replace(/\\/$/, ''));\n\nconst socialMediaLinkInfoProvider = (link: string, baseUrl: string, icon: IconId): LinkInfo | false => {\n  if (!link.startsWith(baseUrl))\n    return false;\n\n  const formattedLink = prepareFormattedLink(link);\n  if (formattedLink === baseUrl)\n    return false;\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link).replace(baseUrl, ''),\n    icon\n  };\n};\n\nconst telegramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://t.me/', IconId.Telegram);\nconst facebookLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://facebook.com/', IconId.Facebook);\nconst twitterLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://twitter.com/', IconId.Twitter);\nconst instagramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://instagram.com/', IconId.Instagram);\nconst gitHubLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://github.com/', IconId.GitHub);\nconst redditLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://www.reddit.com/', IconId.Reddit);\n\n// This regex should not use for email validation\nconst emailCheckingRegEx = /^[^\\s/@]+@[^\\s@/]+$/;\nconst emailLinkInfoProvider: LinkInfoProvider = link => {\n  const preparedFormattedLink = prepareFormattedLink(link);\n\n  return emailCheckingRegEx.test(preparedFormattedLink) && {\n    rawLink: link,\n    formattedLink: `mailto:${preparedFormattedLink}`,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Email\n  };\n};\n\nconst javascriptLinkInfoProvider: LinkInfoProvider = link => link.startsWith('javascript') ? getInvalidLinkInfo(link) : false;\n\n// https://datatracker.ietf.org/doc/html/rfc3986#section-3.1\nconst urlSchemeRegEx = /^([a-z][a-z0-9+\\-.]*):/;\nconst commonLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return urlSchemeRegEx.test(formattedLink) && {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nconst editLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nexport class ServiceLinkHelper {\n  // Order is important\n  static readonly linkInfoProviders: readonly LinkInfoProvider[] = [\n    // Disallowed\n    javascriptLinkInfoProvider,\n    // Allowed\n    telegramLinkInfoProvider,\n    facebookLinkInfoProvider,\n    twitterLinkInfoProvider,\n    instagramLinkInfoProvider,\n    gitHubLinkInfoProvider,\n    emailLinkInfoProvider,\n    redditLinkInfoProvider,\n    commonLinkInfoProvider\n  ];\n\n  getLinkInfo(link: string, isEditMode = false): LinkInfo | null {\n    for (const provider of ServiceLinkHelper.linkInfoProviders) {\n      const linkInfo = provider(link);\n\n      if (linkInfo)\n        return this.linkInfoIsValid(linkInfo) ? linkInfo : null;\n    }\n\n    if (isEditMode)\n      return editLinkInfoProvider(link) as LinkInfo;\n\n    return null;\n  }\n\n  linkInfoIsValid(linkInfo: LinkInfo) {\n    return linkInfo.formattedLink !== '#';\n  }\n}\n","export enum PaymentType {\n  Payment = 1,\n  Donation = 2\n}\n\nexport interface PaymentBase {\n  readonly type: PaymentType;\n  readonly targetAddress: string;\n}\n","import { PaymentBase } from '../../models/payment/paymentBase';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { guards } from '../../utils';\nimport { PaymentValidationMethod } from './paymentValidationMethod';\n\nexport abstract class PaymentValidatorBase<TPayment extends PaymentBase> {\n  protected readonly abstract validationMethods: ReadonlyArray<PaymentValidationMethod<TPayment>>;\n  protected readonly abstract invalidPaymentObjectError: string;\n\n  validate(payment: TPayment, bail = false): FailedValidationResults {\n    if (!guards.isPlainObject(payment))\n      return [this.invalidPaymentObjectError];\n\n    let failedValidationResults: FailedValidationResults;\n    for (const validationMethod of this.validationMethods) {\n      const currentFailedValidationResults = validationMethod(payment);\n      if (currentFailedValidationResults) {\n        if (!bail)\n          return currentFailedValidationResults;\n\n        (failedValidationResults || (failedValidationResults = [])).concat(currentFailedValidationResults);\n      }\n    }\n\n    return failedValidationResults;\n  }\n}\n","const networksInternal = {\n  // mainnet: {\n  //   id: 'NetXdQprcVkpaWU',\n  //   name: 'mainnet',\n  // },\n  granadanet: {\n    id: 'NetXz969SFaFn8k',\n    name: 'granadanet',\n  },\n  edo2net: {\n    id: 'NetXSgo1ZT2DRUG',\n    name: 'edo2net',\n  }\n} as const;\n\ninterface NetworkInternal {\n  readonly id: string;\n  readonly name: string;\n}\n\ntype Networks = {\n  readonly [P in keyof typeof networksInternal]: (typeof networksInternal)[P] extends NetworkInternal & {\n    readonly name: P;\n  }\n  ? (typeof networksInternal)[P]\n  : never\n};\n\nexport type Network = Networks[keyof Networks];\nexport interface CustomNetwork {\n  readonly id?: string;\n  readonly name: string;\n}\n\nexport const networks: Networks = networksInternal;\nexport const networksCollection = Object.values(networksInternal);\n\nexport const networkIdRegExp = /^[a-zA-Z]\\w*$/;\nexport const networkNameRegExp = networkIdRegExp;\n","import { Network, networks } from './network';\n\ninterface TokenBase {\n  readonly network: Network;\n  readonly contractAddress: string;\n  readonly metadata?: TokenMetadata;\n}\n\nexport interface TokenFA12 extends TokenBase {\n  readonly type: 'fa1.2';\n}\n\nexport interface TokenFA2 extends TokenBase {\n  readonly type: 'fa2';\n  readonly fa2TokenId: number;\n}\n\nexport type Token = TokenFA12 | TokenFA2;\n\nexport type TokenMetadata = {\n  readonly decimals: number;\n  readonly symbol: string;\n  readonly name: string;\n  readonly thumbnailUri: string;\n};\n\nexport const tezosMeta: TokenMetadata = {\n  symbol: 'XTZ',\n  name: 'Tezos',\n  decimals: 6,\n  thumbnailUri: 'https://dashboard.tezospayments.com/tokens/tezos.png'\n};\n\nexport const tokenWhitelist: readonly Token[] = [\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa1.2',\n  //   contractAddress: 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV',\n  //   metadata: {\n  //     decimals: 18,\n  //     symbol: 'KUSD',\n  //     name: 'Kolibri',\n  //     thumbnailUri: 'https://kolibri-data.s3.amazonaws.com/logo.png',\n  //   },\n  // },\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa2',\n  //   contractAddress: 'KT1REEb5VxWRjcHm5GzDMwErMmNFftsE5Gpf',\n  //   fa2TokenId: 0,\n  //   metadata: {\n  //     decimals: 6,\n  //     symbol: 'USDS',\n  //     name: 'Stably USD',\n  //     thumbnailUri: 'https://quipuswap.com/tokens/stably.png',\n  //   },\n  // },\n  {\n    network: networks.edo2net,\n    type: 'fa2',\n    contractAddress: 'KT1Mn2HUUKUPg8wiQhUJ8Z9jUtZLaZn8EWL2',\n    fa2TokenId: 0,\n    metadata: {\n      decimals: 0,\n      symbol: 'MBRG',\n      name: 'MAX BURGER',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  }\n];\n\nexport const tokenWhitelistMap: ReadonlyMap<Token['contractAddress'], Token> = new Map<Token['contractAddress'], Token>(\n  tokenWhitelist.map(token => [token.contractAddress, token])\n);\n","const contractAddressPrefixes = ['KT'] as const;\nconst implicitAddressPrefixes = ['tz1', 'tz2', 'tz3'] as const;\nconst addressPrefixes = [...contractAddressPrefixes, ...implicitAddressPrefixes] as const;\n\nexport const tezosInfo = {\n  addressLength: 36,\n  contractAddressPrefixes,\n  implicitAddressPrefixes,\n  addressPrefixes,\n} as const;\n","export enum KeyType {\n  Ed25519 = 'Ed25519',\n  Secp256k1 = 'Secp256k1',\n  P256 = 'P256'\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { URL as NodeURL } from 'url';\n\nexport type URL = NodeURL;\nexport const URL = NodeURL || (globalThis as any).URL;\n","import BigNumber from 'bignumber.js';\n\nimport { tezosInfo } from '../../models/blockchain';\nimport { Payment } from '../../models/payment';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { URL } from '../../native';\nimport { guards } from '../../utils';\n\ntype Errors<FieldNames extends string> = {\n  readonly [P in FieldNames]: string;\n};\n\nexport const validateTargetAddress = (\n  targetAddress: string,\n  errors: Errors<'invalidTargetAddress' | 'targetAddressHasInvalidLength' | 'targetAddressIsNotNetworkAddress'>\n): FailedValidationResults => {\n  if (typeof targetAddress !== 'string')\n    return [errors.invalidTargetAddress];\n\n  if (targetAddress.length !== tezosInfo.addressLength)\n    return [errors.targetAddressHasInvalidLength];\n\n  if (!tezosInfo.addressPrefixes.some(prefix => targetAddress.startsWith(prefix)))\n    return [errors.targetAddressIsNotNetworkAddress];\n};\n\nexport const validateAmount = (\n  amount: BigNumber,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  if (!BigNumber.isBigNumber(amount) || amount.isNaN() || !amount.isFinite())\n    return [errors.invalidAmount];\n\n  if (amount.isZero() || amount.isNegative())\n    return [errors.amountIsNonPositive];\n};\n\nexport const validateDesiredAmount = (\n  desiredAmount: BigNumber | undefined,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  return desiredAmount === undefined ? undefined : validateAmount(desiredAmount, errors);\n};\n\nexport const validateAsset = (\n  asset: string | undefined,\n  errors: Errors<'invalidAsset' | 'assetHasInvalidLength' | 'assetIsNotContractAddress'>\n): FailedValidationResults => {\n  if (asset === undefined)\n    return;\n\n  if (typeof asset !== 'string')\n    return [errors.invalidAsset];\n\n  if (asset.length !== tezosInfo.addressLength)\n    return [errors.assetHasInvalidLength];\n\n  if (!tezosInfo.contractAddressPrefixes.some(prefix => asset.startsWith(prefix)))\n    return [errors.assetIsNotContractAddress];\n};\n\nexport const validateCreatedDate = (\n  date: Date,\n  errors: Errors<'invalidCreatedDate'>\n): FailedValidationResults => {\n  if (!(date instanceof Date) || isNaN(date.getTime()))\n    return [errors.invalidCreatedDate];\n};\n\nexport const validateUrl = (\n  url: URL | undefined,\n  errors: Errors<'invalidUrl' | 'invalidProtocol'>\n): FailedValidationResults => {\n  if (url === undefined)\n    return;\n\n  if (!(url instanceof URL))\n    return [errors.invalidUrl];\n\n  if (url.protocol.indexOf('javascript') > -1)\n    return [errors.invalidProtocol];\n};\n\nexport const validateExpiredDate = (\n  expiredDate: Date | undefined,\n  createdDate: Date,\n  minimumPaymentLifetime: number,\n  errors: Errors<'invalidExpiredDate' | 'paymentLifetimeIsShort'>\n): FailedValidationResults => {\n  if (expiredDate === undefined)\n    return;\n\n  if (!(expiredDate instanceof Date) || isNaN(expiredDate.getTime()))\n    return [errors.invalidExpiredDate];\n\n  if (expiredDate.getTime() - createdDate.getTime() < minimumPaymentLifetime) {\n    return [errors.paymentLifetimeIsShort];\n  }\n};\n\nexport const validateData = (\n  data: Payment['data'],\n  errors: Errors<'invalidData' | 'invalidPublicData' | 'publicDataShouldBeFlat' | 'invalidPrivateData' | 'privateDataShouldBeFlat'>\n): FailedValidationResults => {\n  if (!guards.isPlainObject(data) || Object.keys(data).some(key => key !== 'public' && key !== 'private'))\n    return [errors.invalidData];\n\n  const publicData = (data as Exclude<Payment['data'], { private: unknown }>).public;\n  const privateData = (data as Exclude<Payment['data'], { public: unknown }>).private;\n  if (!(publicData || privateData))\n    return [errors.invalidData];\n\n  if (publicData !== undefined) {\n    if (!guards.isPlainObject(publicData))\n      return [errors.invalidPublicData];\n    if (!isFlatObject(publicData))\n      return [errors.publicDataShouldBeFlat];\n  }\n\n  if (privateData !== undefined) {\n    if (!guards.isPlainObject(privateData))\n      return [errors.invalidPrivateData];\n    if (!isFlatObject(privateData))\n      return [errors.privateDataShouldBeFlat];\n  }\n};\n\nconst isFlatObject = (obj: Record<string, unknown>) => {\n  for (const propertyName of Object.getOwnPropertyNames(obj)) {\n    const property = obj[propertyName];\n    if (typeof property === 'object' || typeof property === 'function')\n      return false;\n  }\n\n  return true;\n};\n","import type { Payment } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport {\n  validateTargetAddress, validateAmount, validateData, validateAsset, validateCreatedDate,\n  validateExpiredDate, validateUrl\n} from './validationMethods';\n\nexport class PaymentValidator extends PaymentValidatorBase<Payment> {\n  static readonly errors = {\n    invalidPaymentObject: 'Payment is undefined or not object',\n    invalidType: 'Payment type is invalid',\n    invalidAmount: 'Amount is invalid',\n    amountIsNonPositive: 'Amount is less than or equal to zero',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidData: 'Payment data is invalid',\n    invalidPublicData: 'Payment public data is invalid',\n    invalidPrivateData: 'Payment private data is invalid',\n    publicDataShouldBeFlat: 'Public data should be flat',\n    privateDataShouldBeFlat: 'Private data should be flat',\n    invalidAsset: 'Asset address is invalid',\n    assetIsNotContractAddress: 'Asset address isn\\'t a contract address',\n    assetHasInvalidLength: 'Asset address has an invalid address',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol',\n    invalidCreatedDate: 'Created date is invalid',\n    invalidExpiredDate: 'Expired date is invalid',\n    paymentLifetimeIsShort: 'Payment lifetime is short'\n  } as const;\n  static readonly minimumPaymentLifetime = 600000; // 10 * 60 * 1000;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Payment>> = [\n    payment => payment.type !== PaymentType.Payment ? [PaymentValidator.errors.invalidType] : undefined,\n    payment => validateTargetAddress(payment.targetAddress, PaymentValidator.errors),\n    payment => validateAmount(payment.amount, PaymentValidator.errors),\n    payment => validateData(payment.data, PaymentValidator.errors),\n    payment => validateAsset(payment.asset, PaymentValidator.errors),\n    payment => validateUrl(payment.successUrl, PaymentValidator.successUrlErrors),\n    payment => validateUrl(payment.cancelUrl, PaymentValidator.cancelUrlErrors),\n    payment => validateCreatedDate(payment.created, PaymentValidator.errors),\n    payment => validateExpiredDate(payment.expired, payment.created, PaymentValidator.minimumPaymentLifetime, PaymentValidator.errors),\n  ];\n\n  protected readonly invalidPaymentObjectError = PaymentValidator.errors.invalidPaymentObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidSuccessUrl,\n    invalidProtocol: PaymentValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidCancelUrl,\n    invalidProtocol: PaymentValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","import type { Donation } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport { validateTargetAddress, validateDesiredAmount, validateAsset, validateUrl } from './validationMethods';\n\nexport class DonationValidator extends PaymentValidatorBase<Donation> {\n  static readonly errors = {\n    invalidDonationObject: 'Donation is undefined or not object',\n    invalidType: 'Donation type is invalid',\n    invalidAmount: 'Desired amount is invalid',\n    amountIsNonPositive: 'Desired amount is less than or equal to zero',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidAsset: 'Desired asset address is invalid',\n    assetIsNotContractAddress: 'Desired asset address isn\\'t a contract address',\n    assetHasInvalidLength: 'Desired asset address has an invalid address',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol'\n  } as const;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Donation>> = [\n    donation => donation.type !== PaymentType.Donation ? [DonationValidator.errors.invalidType] : undefined,\n    donation => validateTargetAddress(donation.targetAddress, DonationValidator.errors),\n    donation => validateDesiredAmount(donation.desiredAmount, DonationValidator.errors),\n    donation => validateAsset(donation.desiredAsset, DonationValidator.errors),\n    donation => validateUrl(donation.successUrl, DonationValidator.successUrlErrors),\n    donation => validateUrl(donation.cancelUrl, DonationValidator.cancelUrlErrors)\n  ];\n\n  protected readonly invalidPaymentObjectError = DonationValidator.errors.invalidDonationObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidSuccessUrl,\n    invalidProtocol: DonationValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidCancelUrl,\n    invalidProtocol: DonationValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","export abstract class StateModel {\n    protected constructor() {\n    // All derived classes should be static\n    }\n}\n","import { SerializedFieldType } from './serializedFieldType';\n\nexport class ObjectSerializationValidator<T extends Record<string | number, unknown>> {\n  private _minObjectFieldsCount: number | undefined;\n\n  constructor(\n    protected readonly objectFieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>\n  ) {\n  }\n\n  private get minObjectFieldsCount() {\n    if (!this._minObjectFieldsCount) {\n      let count = 0;\n      for (const info of this.objectFieldTypes) {\n        if (typeof info[1] === 'string' ? info[1] !== 'undefined' : info[1].every(type => type !== 'undefined'))\n          count++;\n      }\n\n      this._minObjectFieldsCount = count;\n    }\n\n    return this._minObjectFieldsCount;\n  }\n\n  private get maxObjectFieldsCount() {\n    return this.objectFieldTypes.size;\n  }\n\n  validate(value: T): value is T {\n    if (!value)\n      return false;\n\n    const fieldNames = Object.getOwnPropertyNames(value) as ReadonlyArray<keyof T>;\n\n    // Prevent the field checking if the deserializedValue has an invalid number of fields\n    if (fieldNames.length < this.minObjectFieldsCount || fieldNames.length > this.maxObjectFieldsCount)\n      return false;\n\n    for (const [fieldName, expectedFieldType] of this.objectFieldTypes) {\n      const fieldValue = value[fieldName];\n      const actualFieldType = fieldValue === null ? 'null' : typeof fieldValue;\n\n      if (Array.isArray(expectedFieldType)\n        ? !expectedFieldType.some(expectedType => actualFieldType === expectedType)\n        : actualFieldType !== expectedFieldType\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Serializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  serialize(value: T): string | null {\n    try {\n      if (!this.objectSerializationValidator.validate(value))\n        return null;\n\n      const jsonString = JSON.stringify(value);\n      return base64.encode(jsonString, 'base64url');\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Deserializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  deserialize(serializedValue: string): T | null {\n    try {\n      let value: T;\n\n      if (serializedValue) {\n        const serializedValueString = base64.decode(serializedValue, 'base64url');\n        value = JSON.parse(serializedValueString);\n      }\n      else\n        value = {} as T;\n\n      return this.objectSerializationValidator.validate(value)\n        ? value\n        : null;\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { LegacySerializedPayment, SerializedPayment } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nexport const serializedPaymentFieldTypes: ReadonlyMap<\n  keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  // amount\n  .set('a', 'string')\n  // data\n  .set('d', 'object')\n  // asset\n  .set('as', ['string', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null'])\n  // created\n  .set('c', 'number')\n  // expired\n  .set('e', ['number', 'undefined', 'null']);\n\nexport const legacySerializedPaymentFieldTypes: ReadonlyMap<\n  keyof LegacySerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof LegacySerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  .set('amount', 'string')\n  .set('data', 'object')\n  .set('asset', ['string', 'undefined', 'null'])\n  .set('successUrl', ['string', 'undefined', 'null'])\n  .set('cancelUrl', ['string', 'undefined', 'null'])\n  .set('created', 'number')\n  .set('expired', ['number', 'undefined', 'null']);\n","import type { Payment, SerializedPayment } from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentSerializer {\n  protected static readonly serializedPaymentBase64Serializer = new Base64Serializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  serialize(payment: Payment): string | null {\n    try {\n      const serializedPayment = this.mapPaymentToSerializedPayment(payment);\n      return PaymentSerializer.serializedPaymentBase64Serializer.serialize(serializedPayment);\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapPaymentToSerializedPayment(payment: Payment): SerializedPayment {\n    return {\n      a: payment.amount.toString(),\n      d: payment.data,\n      as: payment.asset,\n      su: payment.successUrl?.toString(),\n      cu: payment.cancelUrl?.toString(),\n      c: payment.created.getTime(),\n      e: payment.expired?.getTime(),\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedPaymentSlice, Payment, SerializedPayment } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment | null {\n    try {\n      const serializedPayment = PaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment, nonSerializedPaymentSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: SerializedPayment, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment {\n    return {\n      type: PaymentType.Payment,\n      amount: new BigNumber(serializedPayment.a),\n      data: serializedPayment.d,\n      asset: serializedPayment.as,\n      successUrl: serializedPayment.su ? new URL(serializedPayment.su) : undefined,\n      cancelUrl: serializedPayment.cu ? new URL(serializedPayment.cu) : undefined,\n      created: new Date(serializedPayment.c),\n      expired: serializedPayment.e ? new Date(serializedPayment.e) : undefined,\n      targetAddress: nonSerializedPaymentSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedPaymentSlice, Payment, LegacySerializedPayment } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { legacySerializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class LegacyPaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<LegacySerializedPayment>(\n    legacySerializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment | null {\n    try {\n      const serializedPayment = LegacyPaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment, nonSerializedPaymentSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: LegacySerializedPayment, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment {\n    return {\n      type: PaymentType.Payment,\n      amount: new BigNumber(serializedPayment.amount),\n      data: serializedPayment.data,\n      asset: serializedPayment.asset,\n      successUrl: serializedPayment.successUrl ? new URL(serializedPayment.successUrl) : undefined,\n      cancelUrl: serializedPayment.cancelUrl ? new URL(serializedPayment.cancelUrl) : undefined,\n      created: new Date(serializedPayment.created),\n      expired: serializedPayment.expired ? new Date(serializedPayment.expired) : undefined,\n      targetAddress: nonSerializedPaymentSlice.targetAddress\n    };\n  }\n}\n","import { LegacySerializedDonation, SerializedDonation } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nexport const serializedDonationFieldTypes: ReadonlyMap<\n  keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  // desiredAmount\n  .set('da', ['string', 'undefined', 'null'])\n  // desiredAsset\n  .set('das', ['string', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null']);\n\nexport const legacySerializedDonationFieldTypes: ReadonlyMap<\n  keyof LegacySerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof LegacySerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  .set('desiredAmount', ['string', 'undefined', 'null'])\n  .set('desiredAsset', ['string', 'undefined', 'null'])\n  .set('successUrl', ['string', 'undefined', 'null'])\n  .set('cancelUrl', ['string', 'undefined', 'null']);\n","import type { Donation, SerializedDonation } from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nconst serializedEmptyObjectBase64 = 'e30';\nexport class DonationSerializer {\n  protected static readonly serializedDonationBase64Serializer = new Base64Serializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  serialize(donation: Donation): string | null {\n    try {\n      const serializedDonation = this.mapDonationToSerializedDonation(donation);\n      const serializedDonationBase64 = DonationSerializer.serializedDonationBase64Serializer.serialize(serializedDonation);\n\n      return serializedDonationBase64 === serializedEmptyObjectBase64 ? '' : serializedDonationBase64;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapDonationToSerializedDonation(donation: Donation): SerializedDonation {\n    return {\n      da: donation.desiredAmount?.toString(),\n      das: donation.desiredAsset,\n      su: donation.successUrl?.toString(),\n      cu: donation.cancelUrl?.toString(),\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedDonationSlice, Donation, SerializedDonation } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class DonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = DonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: SerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      desiredAmount: serializedDonation.da ? new BigNumber(serializedDonation.da) : undefined,\n      desiredAsset: serializedDonation.das,\n      successUrl: serializedDonation.su ? new URL(serializedDonation.su) : undefined,\n      cancelUrl: serializedDonation.cu ? new URL(serializedDonation.cu) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedDonationSlice, Donation, LegacySerializedDonation } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { legacySerializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class LegacyDonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<LegacySerializedDonation>(\n    legacySerializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = LegacyDonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: LegacySerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      desiredAmount: serializedDonation.desiredAmount ? new BigNumber(serializedDonation.desiredAmount) : undefined,\n      desiredAsset: serializedDonation.desiredAsset,\n      successUrl: serializedDonation.successUrl ? new URL(serializedDonation.successUrl) : undefined,\n      cancelUrl: serializedDonation.cancelUrl ? new URL(serializedDonation.cancelUrl) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { PaymentValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { LegacyPaymentDeserializer, PaymentDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedPaymentSlice } from './serializedPayment';\n\ninterface PublicPaymentData {\n  readonly public: { readonly [fieldName: string]: unknown; };\n}\n\ninterface PrivatePaymentData {\n  readonly private: { readonly [fieldName: string]: unknown; };\n}\n\ntype PaymentData =\n  | PublicPaymentData\n  | PrivatePaymentData\n  | PublicPaymentData & PrivatePaymentData;\n\nexport interface Payment extends PaymentBase {\n  readonly type: PaymentType.Payment;\n  readonly amount: BigNumber;\n  readonly asset?: string;\n  readonly data: PaymentData;\n  readonly created: Date;\n  readonly expired?: Date;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n}\n\nexport class Payment extends StateModel {\n  static readonly defaultDeserializer: PaymentDeserializer = new PaymentDeserializer();\n  static readonly defaultLegacyDeserializer: LegacyPaymentDeserializer = new LegacyPaymentDeserializer();\n  static readonly defaultValidator: PaymentValidator = new PaymentValidator();\n\n  static validate(payment: Payment) {\n    return this.defaultValidator.validate(payment);\n  }\n\n  static deserialize(serializedPayment: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice, isLegacy = false): Payment | null {\n    return !isLegacy\n      ? Payment.defaultDeserializer.deserialize(serializedPayment, nonSerializedPaymentSlice)\n      : Payment.defaultLegacyDeserializer.deserialize(serializedPayment, nonSerializedPaymentSlice);\n  }\n\n  static publicDataExists(payment: Payment): payment is Payment & { readonly data: PublicPaymentData };\n  static publicDataExists(paymentData: Payment['data']): paymentData is Payment['data'] & PublicPaymentData;\n  static publicDataExists(\n    paymentOrPaymentDataOrPaymentData: Payment | Payment['data']\n  ): paymentOrPaymentDataOrPaymentData is (Payment & { readonly data: PublicPaymentData }) | (Payment['data'] & PublicPaymentData) {\n    return this.publicDataExistsInternal(paymentOrPaymentDataOrPaymentData);\n  }\n\n  static privateDataExists(payment: Payment): payment is Payment & { readonly data: PrivatePaymentData } {\n    return !!(payment.data as PrivatePaymentData).private;\n  }\n\n  protected static publicDataExistsInternal(\n    paymentOrPaymentDataOrPaymentData: Payment | Payment['data']\n  ): paymentOrPaymentDataOrPaymentData is (Payment & { readonly data: PublicPaymentData }) | (Payment['data'] & PublicPaymentData) {\n    return !!(Payment.isPayment(paymentOrPaymentDataOrPaymentData)\n      ? (paymentOrPaymentDataOrPaymentData.data as PublicPaymentData).public\n      : (paymentOrPaymentDataOrPaymentData as PublicPaymentData).public\n    );\n  }\n\n  private static isPayment(paymentOrPaymentDataOrPaymentData: Payment | Payment['data']): paymentOrPaymentDataOrPaymentData is Payment {\n    return !!(paymentOrPaymentDataOrPaymentData as Payment).amount;\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { DonationValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { DonationDeserializer, LegacyDonationDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedDonationSlice } from './serializedDonation';\n\nexport interface Donation extends PaymentBase {\n  readonly type: PaymentType.Donation;\n  readonly desiredAmount?: BigNumber;\n  readonly desiredAsset?: string;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n}\n\nexport class Donation extends StateModel {\n  static readonly defaultDeserializer: DonationDeserializer = new DonationDeserializer();\n  static readonly defaultLegacyDeserializer: LegacyDonationDeserializer = new LegacyDonationDeserializer();\n  static readonly defaultValidator: DonationValidator = new DonationValidator();\n\n  static validate(donation: Donation) {\n    return this.defaultValidator.validate(donation);\n  }\n\n  static deserialize(serializedDonation: string, nonSerializedDonationSlice: NonSerializedDonationSlice, isLegacy = false): Donation | null {\n    return !isLegacy\n      ? Donation.defaultDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice)\n      : Donation.defaultLegacyDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice);\n  }\n}\n\n","import { text } from '../../utils';\n\nexport enum PaymentUrlType {\n  Base64 = 0\n}\n\nconst encodedPaymentUrlTypeMap = new Map<PaymentUrlType, string>(\n  Object.keys(PaymentUrlType)\n    .filter(value => !isNaN(+value))\n    .map(value => [+value, text.padStart(value, 2, '0')])\n);\n\nexport const getEncodedPaymentUrlType = (paymentUrlType: PaymentUrlType) => encodedPaymentUrlTypeMap.get(paymentUrlType) || '';\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ParameterizedRouteFactory = (...args: any[]) => string;\nexport type ParameterizedRoute<Factory extends ParameterizedRouteFactory> = Factory & {\n  readonly template: string;\n};\n\nexport const getParameterizedRoute = <Factory extends ParameterizedRouteFactory>(\n  factory: Factory, template: string\n): ParameterizedRoute<Factory> => {\n  (factory as Factory & { template: string }).template = template;\n\n  return factory as ParameterizedRoute<Factory>;\n};\n","export enum ServiceOperationType {\n  Payment = 1,\n  Donation = 2,\n\n  All = Payment | Donation\n}\n","import { Network, networks } from '../blockchain/network';\nimport { ServiceOperationType } from './serviceOperationType';\nimport { ServiceSigningKey } from './serviceSigningKey';\n\nexport interface Service {\n  readonly name: string;\n  readonly links: readonly string[];\n  readonly description?: string;\n  readonly iconUrl?: string;\n  readonly version: number;\n  readonly metadata: string;\n\n  readonly contractAddress: string;\n  readonly network: Network;\n  readonly allowedTokens: {\n    readonly tez: boolean;\n    readonly assets: readonly string[];\n  }\n  readonly allowedOperationType: ServiceOperationType;\n\n  readonly owner: string;\n  readonly paused: boolean;\n  readonly deleted: boolean;\n  readonly signingKeys: { readonly [key: string]: ServiceSigningKey };\n}\n\nexport const emptyService: Service = {\n  name: '',\n  description: '',\n  links: [],\n  version: 0,\n  metadata: '',\n  contractAddress: '',\n  allowedTokens: {\n    tez: true,\n    assets: []\n  },\n  allowedOperationType: ServiceOperationType.Payment,\n  owner: '',\n  paused: false,\n  deleted: false,\n  network: networks.edo2net,\n  signingKeys: {}\n};\n","import BigNumber from 'bignumber.js';\n\nimport { converters } from '../../utils';\nimport { StateModel } from '../core';\nimport { ServiceOperationDirection } from './serviceOperationDirection';\nimport { ServiceOperationStatus } from './serviceOperationStatus';\nimport { ServiceOperationType } from './serviceOperationType';\n\ninterface ServiceOperationPayloadData {\n  readonly value: { readonly [fieldName: string]: unknown; } | null;\n  readonly valueString: string;\n  readonly encodedValue: string;\n}\n\ninterface PublicServiceOperationPayload {\n  readonly public: ServiceOperationPayloadData;\n}\n\ninterface PrivateServiceOperationPayload {\n  readonly private: ServiceOperationPayloadData;\n}\n\ntype ServiceOperationPayload =\n  | PublicServiceOperationPayload\n  | PrivateServiceOperationPayload\n  | PublicServiceOperationPayload & PrivateServiceOperationPayload;\n\nexport interface ServiceOperation {\n  readonly hash: string;\n  readonly type: ServiceOperationType;\n  readonly direction: ServiceOperationDirection;\n  readonly status: ServiceOperationStatus;\n  readonly amount: BigNumber;\n  readonly payload: ServiceOperationPayload;\n  readonly asset?: string;\n  readonly timestamp: string;\n  readonly date: Date;\n  readonly sender: string;\n  readonly target: string;\n}\n\nexport class ServiceOperation extends StateModel {\n  static publicPayloadExists(operation: ServiceOperation): operation is ServiceOperation & { readonly payload: PublicServiceOperationPayload } {\n    return !!(operation.payload as PublicServiceOperationPayload).public;\n  }\n\n  static privatePayloadExists(operation: ServiceOperation): operation is ServiceOperation & { readonly payload: PrivateServiceOperationPayload } {\n    return !!(operation.payload as PrivateServiceOperationPayload).private;\n  }\n\n  static isPayloadDecoded(\n    data: ServiceOperationPayloadData\n  ): data is ServiceOperationPayloadData & { readonly value: NonNullable<ServiceOperationPayloadData['value']> } {\n    return !!data.value;\n  }\n\n  static parseServiceOperationPayload(encodedValue: string): ServiceOperationPayloadData {\n    const valueString = converters.bytesToString(encodedValue);\n\n    let value: ServiceOperationPayloadData['value'] = null;\n    try { value = JSON.parse(valueString); } catch { /**/ }\n\n    return {\n      value,\n      valueString,\n      encodedValue,\n    };\n  }\n}\n","export enum ServiceOperationDirection {\n  Incoming = 0,\n  Outgoing = 1\n}\n","export enum ServiceOperationStatus {\n  Pending = 0,\n  Success = 1,\n  Cancelled = 2\n}\n"],"names":["Buffer","isPlainObjectLodashFunction","IconId","PaymentType","guards.isPlainObject","KeyType","NodeURL","BigNumber","base64.encode","base64.decode","PaymentUrlType","text.padStart","ServiceOperationType","converters.bytesToString","ServiceOperationDirection","ServiceOperationStatus"],"mappings":"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"}