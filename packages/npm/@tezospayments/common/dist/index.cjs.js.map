{"version":3,"file":"index.cjs.js","sources":["../src/utils/base64.ts","../src/utils/converters.ts","../src/utils/guards.ts","../src/utils/memoize.ts","../src/utils/optimization.ts","../src/utils/shallowEqual.ts","../src/utils/text.ts","../src/utils/index.ts","../src/helpers/serviceLinkHelper.ts","../src/models/payment/paymentBase.ts","../src/helpers/paymentValidator/paymentValidatorBase.ts","../src/models/blockchain/network.ts","../src/models/blockchain/token.ts","../src/models/blockchain/tezosInfo.ts","../src/models/blockchain/keyType.ts","../src/native/index.ts","../src/helpers/paymentValidator/validationMethods.ts","../src/helpers/paymentValidator/paymentValidator.ts","../src/helpers/paymentValidator/donationValidator.ts","../src/models/core/stateModel.ts","../src/serialization/base64/objectSerializationValidator.ts","../src/serialization/base64/base64Serializer.ts","../src/serialization/base64/base64Deserializer.ts","../src/serialization/payment/serializedPaymentFieldTypes.ts","../src/serialization/payment/paymentSerializer.ts","../src/serialization/payment/paymentDeserializer.ts","../src/serialization/payment/legacyPaymentDeserializer.ts","../src/serialization/donation/serializedDonationFieldTypes.ts","../src/serialization/donation/donationSerializer.ts","../src/serialization/donation/donationDeserializer.ts","../src/serialization/donation/legacyDonationDeserializer.ts","../src/models/payment/payment.ts","../src/models/payment/donation.ts","../src/models/payment/paymentUrlType.ts","../src/models/routing/parameterizedRoute.ts","../src/models/service/serviceOperationType.ts","../src/models/service/service.ts","../src/models/service/serviceOperation.ts","../src/models/service/serviceOperationDirection.ts","../src/models/service/serviceOperationStatus.ts"],"sourcesContent":["import { Buffer } from 'buffer';\n\ntype ValidBase64Format = 'base64' | 'base64url';\n\n// Node.js < 15\nconst isBase64UrlFormatSupported = Buffer.isEncoding('base64url');\n\nexport const decode = (base64String: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (!isBase64UrlFormatSupported) {\n    format = 'base64';\n    base64String = base64UrlPreprocessor.prepareValueForDecoding(base64String);\n  }\n\n  return Buffer.from(base64String, format).toString('utf8');\n};\n\nexport const encode = (value: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (isBase64UrlFormatSupported)\n    return Buffer.from(value, 'utf8').toString(format);\n\n  const encodedValue = Buffer.from(value, 'utf8').toString('base64');\n  return base64UrlPreprocessor.prepareEncodedValue(encodedValue);\n};\n\nconst base64UrlPreprocessor = {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  prepareEncodedValue: (base64value: string) => base64value\n    .split('=')[0]!\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_'),\n\n  prepareValueForDecoding: (base64value: string) => {\n    base64value = base64value\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n\n    switch (base64value.length % 4) {\n      case 0: return base64value;\n      case 2: return base64value + '==';\n      case 3: return base64value + '=';\n      default:\n        throw new Error('Invalid base64url value');\n    }\n  }\n};\n","import { Buffer } from 'buffer';\n\nexport const stringToUint8Array = (hex: string): Uint8Array => {\n  const integers = hex.match(/[\\da-f]{2}/gi)?.map(val => parseInt(val, 16));\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return new Uint8Array(integers!);\n};\n\nexport const stringToBytes = (value: string): string => Buffer.from(value, 'utf8').toString('hex');\nexport const bytesToString = (value: string): string => Buffer.from(stringToUint8Array(value)).toString('utf8');\n\nexport const objectToBytes = (value: Record<string, unknown>): string => stringToBytes(JSON.stringify(value));\nexport const bytesToObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: string): T | null => {\n  try {\n    return JSON.parse(bytesToString(value));\n  }\n  catch {\n    return null;\n  }\n};\n\nexport function tezToMutez(tez: number): number;\nexport function tezToMutez(tez: bigint): bigint;\nexport function tezToMutez(tez: bigint | number): bigint | number {\n  return typeof tez === 'number'\n    ? tez * 1000000\n    : tez * BigInt(1000000);\n}\n","import isPlainObjectLodashFunction from 'lodash.isplainobject';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isArray = (arg: any): arg is any[] => {\n  return Array.isArray(arg);\n};\n\nexport const isReadonlyArray = (arg: unknown): arg is readonly unknown[] => {\n  return Array.isArray(arg);\n};\n\nexport const isPlainObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: unknown): value is T => {\n  return isPlainObjectLodashFunction(value);\n};\n","const defaultEqualityCheck = <T>(a: T, b: T) => a === b;\n\nconst areArgumentsShallowlyEqual = <T extends IArguments | null>(equalityCheck: (a: T, b: T) => boolean, prev: T, next: T) => {\n    if (prev === null || next === null || prev.length !== next.length) {\n        return false;\n    }\n\n    // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n    const length = prev.length;\n    for (let i = 0; i < length; i++) {\n        if (!equalityCheck(prev[i], next[i])) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/* eslint-disable prefer-rest-params  */\n/* eslint-disable prefer-spread */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const memoize = <TF extends (...args: any) => any>(func: TF, equalityCheck = defaultEqualityCheck): TF => {\n    let lastArgs: IArguments | null = null;\n    let lastResult: unknown = null;\n\n    return (function () {\n        if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n            // apply arguments instead of spreading for performance.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            lastResult = func.apply(null, arguments as any);\n        }\n\n        lastArgs = arguments;\n        return lastResult;\n    } as TF);\n};\n/* eslint-enable prefer-spread */\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/no-explicit-any */\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst emptyArray: any[] = [];\nconst emptyObject = {};\nconst emptyMap = new Map();\nconst emptySet: Set<any> = new Set();\n\nexport default {\n    emptyArray,\n    emptyMap,\n    emptySet,\n    emptyObject\n};\n","const is = (x: unknown, y: unknown) => {\n    return (x === y)\n        ? x !== 0 || y !== 0 || (1 / x) === (1 / y)\n        // eslint-disable-next-line no-self-compare\n        : x !== x && y !== y;\n};\n\nexport default function shallowEqual(objA: unknown, objB: unknown) {\n    if (is(objA, objB))\n        return true;\n\n    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null)\n        return false;\n\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    if (keysA.length !== keysB.length)\n        return false;\n\n    for (let i = 0; i < keysA.length; i++) {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]!)\n            || !is((objA as any)[keysA[i]!], (objB as any)[keysA[i]!])\n        )\n            return false;\n\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n    }\n\n    return true;\n}\n","export const capitalize = (value: string): string => value && (value[0]?.toLocaleUpperCase() + value.slice(1));\n\nexport const getAvatarText = (value: string, maxLength = 2) => {\n  if (!value || !maxLength)\n    return '';\n\n  let result = '';\n\n  for (let i = 0, j = 0, isWord = false; i < value.length; i++) {\n    if (!isWord && value[i] !== ' ') {\n      isWord = true;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      result += value[i]!;\n\n      if (++j === maxLength)\n        return result;\n    }\n    else if (isWord && value[i] === ' ') {\n      isWord = false;\n    }\n  }\n\n  return result;\n};\n\nconst stringPad = (string: string, isStart: boolean, maxLength: number, fillString = ' ') => {\n  if (String.prototype.padStart !== undefined)\n    return string.padStart(maxLength, fillString);\n\n  const stringLength = string.length;\n  // eslint-disable-next-line eqeqeq\n  if (maxLength <= stringLength || fillString == '')\n    return string;\n\n  const fillLength = maxLength - stringLength;\n  let filler = fillString.repeat(Math.ceil(fillLength / fillString.length));\n\n  if (filler.length > fillLength)\n    filler = filler.slice(0, fillLength);\n\n  return isStart ? filler + string : string + filler;\n};\n\nexport const padStart = (string: string, maxLength: number, fillString = ' ') => String.prototype.padStart !== undefined\n  ? string.padStart(maxLength, fillString)\n  : stringPad(string, true, maxLength, fillString);\n\nexport const padEnd = (string: string, maxLength: number, fillString = ' ') => String.prototype.padEnd !== undefined\n  ? string.padEnd(maxLength, fillString)\n  : stringPad(string, false, maxLength, fillString);\n","import combineClassNames from 'clsx';\n\nimport * as base64 from './base64';\nimport * as converters from './converters';\nimport * as guards from './guards';\nimport { memoize } from './memoize';\nimport optimization from './optimization';\nimport shallowEqual from './shallowEqual';\nimport * as text from './text';\n\nconst wait = (ms: number) => new Promise<void>(resolve => setTimeout(resolve, ms));\n\nexport {\n  wait,\n  combineClassNames,\n  memoize,\n  shallowEqual,\n  base64,\n  optimization,\n  guards,\n  text,\n  converters\n};\n","import { memoize } from '../utils';\n\nexport enum IconId {\n  Common = 0,\n  Email = 1,\n  Telegram = 2,\n  Facebook = 3,\n  Twitter = 4,\n  Instagram = 5,\n  GitHub = 6,\n  Reddit = 7\n}\n\ninterface LinkInfo {\n  readonly rawLink: string;\n  readonly formattedLink: string;\n  readonly displayLink: string;\n  readonly icon: IconId;\n}\n\nconst getInvalidLinkInfo = (link: string): LinkInfo => ({\n  rawLink: link,\n  formattedLink: '#',\n  displayLink: 'Invalid Link',\n  icon: IconId.Common\n});\n\ntype LinkInfoProvider = (link: string) => LinkInfo | false;\n\nconst prepareFormattedLink = memoize((link: string) => link.trim());\nconst prepareDisplayLink = memoize((link: string) => link.trim().replace(/\\/$/, ''));\n\nconst socialMediaLinkInfoProvider = (link: string, baseUrl: string, icon: IconId): LinkInfo | false => {\n  if (!link.startsWith(baseUrl))\n    return false;\n\n  const formattedLink = prepareFormattedLink(link);\n  if (formattedLink === baseUrl)\n    return false;\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link).replace(baseUrl, ''),\n    icon\n  };\n};\n\nconst telegramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://t.me/', IconId.Telegram);\nconst facebookLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://facebook.com/', IconId.Facebook);\nconst twitterLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://twitter.com/', IconId.Twitter);\nconst instagramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://instagram.com/', IconId.Instagram);\nconst gitHubLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://github.com/', IconId.GitHub);\nconst redditLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://www.reddit.com/', IconId.Reddit);\n\n// This regex should not use for email validation\nconst emailCheckingRegEx = /^[^\\s/@]+@[^\\s@/]+$/;\nconst emailLinkInfoProvider: LinkInfoProvider = link => {\n  const preparedFormattedLink = prepareFormattedLink(link);\n\n  return emailCheckingRegEx.test(preparedFormattedLink) && {\n    rawLink: link,\n    formattedLink: `mailto:${preparedFormattedLink}`,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Email\n  };\n};\n\nconst javascriptLinkInfoProvider: LinkInfoProvider = link => link.startsWith('javascript') ? getInvalidLinkInfo(link) : false;\n\n// https://datatracker.ietf.org/doc/html/rfc3986#section-3.1\nconst urlSchemeRegEx = /^([a-z][a-z0-9+\\-.]*):/;\nconst commonLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return urlSchemeRegEx.test(formattedLink) && {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nconst editLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nexport class ServiceLinkHelper {\n  // Order is important\n  static readonly linkInfoProviders: readonly LinkInfoProvider[] = [\n    // Disallowed\n    javascriptLinkInfoProvider,\n    // Allowed\n    telegramLinkInfoProvider,\n    facebookLinkInfoProvider,\n    twitterLinkInfoProvider,\n    instagramLinkInfoProvider,\n    gitHubLinkInfoProvider,\n    emailLinkInfoProvider,\n    redditLinkInfoProvider,\n    commonLinkInfoProvider\n  ];\n\n  getLinkInfo(link: string, isEditMode = false): LinkInfo | null {\n    for (const provider of ServiceLinkHelper.linkInfoProviders) {\n      const linkInfo = provider(link);\n\n      if (linkInfo)\n        return this.linkInfoIsValid(linkInfo) ? linkInfo : null;\n    }\n\n    if (isEditMode)\n      return editLinkInfoProvider(link) as LinkInfo;\n\n    return null;\n  }\n\n  linkInfoIsValid(linkInfo: LinkInfo) {\n    return linkInfo.formattedLink !== '#';\n  }\n}\n","export enum PaymentType {\n  Payment = 1,\n  Donation = 2\n}\n\nexport interface PaymentBase {\n  readonly type: PaymentType;\n  readonly targetAddress: string;\n}\n","import { PaymentBase } from '../../models/payment/paymentBase';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { guards } from '../../utils';\nimport { PaymentValidationMethod } from './paymentValidationMethod';\n\nexport abstract class PaymentValidatorBase<TPayment extends PaymentBase> {\n  protected readonly abstract validationMethods: ReadonlyArray<PaymentValidationMethod<TPayment>>;\n  protected readonly abstract invalidPaymentObjectError: string;\n\n  validate(payment: TPayment, bail = false): FailedValidationResults {\n    if (!guards.isPlainObject(payment))\n      return [this.invalidPaymentObjectError];\n\n    let failedValidationResults: FailedValidationResults;\n    for (const validationMethod of this.validationMethods) {\n      const currentFailedValidationResults = validationMethod(payment);\n      if (currentFailedValidationResults) {\n        if (!bail)\n          return currentFailedValidationResults;\n\n        failedValidationResults = (failedValidationResults || []).concat(currentFailedValidationResults);\n      }\n    }\n\n    return failedValidationResults;\n  }\n}\n","const networksInternal = {\n  // mainnet: {\n  //   id: 'NetXdQprcVkpaWU',\n  //   name: 'mainnet',\n  // },\n  granadanet: {\n    id: 'NetXz969SFaFn8k',\n    name: 'granadanet',\n  },\n  edo2net: {\n    id: 'NetXSgo1ZT2DRUG',\n    name: 'edo2net',\n  }\n} as const;\n\ninterface NetworkInternal {\n  readonly id: string;\n  readonly name: string;\n}\n\ntype Networks = {\n  readonly [P in keyof typeof networksInternal]: (typeof networksInternal)[P] extends NetworkInternal & {\n    readonly name: P;\n  }\n  ? (typeof networksInternal)[P]\n  : never\n};\n\nexport type Network = Networks[keyof Networks];\nexport interface CustomNetwork {\n  readonly id?: string;\n  readonly name: string;\n}\n\nexport const networks: Networks = networksInternal;\nexport const networksCollection = Object.values(networksInternal);\n\nexport const networkIdRegExp = /^[a-zA-Z]\\w*$/;\nexport const networkNameRegExp = networkIdRegExp;\n","import { Network, networks } from './network';\n\ninterface TokenBase {\n  readonly network: Network;\n  readonly contractAddress: string;\n  readonly metadata?: TokenMetadata;\n}\n\nexport interface TokenFA12 extends TokenBase {\n  readonly type: 'fa1.2';\n}\n\nexport interface TokenFA2 extends TokenBase {\n  readonly type: 'fa2';\n  readonly fa2TokenId: number;\n}\n\nexport type Token = TokenFA12 | TokenFA2;\n\nexport type TokenMetadata = {\n  readonly decimals: number;\n  readonly symbol: string;\n  readonly name: string;\n  readonly thumbnailUri: string;\n};\n\nexport const tezosMeta: TokenMetadata = {\n  symbol: 'XTZ',\n  name: 'Tezos',\n  decimals: 6,\n  thumbnailUri: 'https://dashboard.tezospayments.com/tokens/tezos.png'\n};\n\nexport const tokenWhitelist: readonly Token[] = [\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa1.2',\n  //   contractAddress: 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV',\n  //   metadata: {\n  //     decimals: 18,\n  //     symbol: 'KUSD',\n  //     name: 'Kolibri',\n  //     thumbnailUri: 'https://kolibri-data.s3.amazonaws.com/logo.png',\n  //   },\n  // },\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa2',\n  //   contractAddress: 'KT1REEb5VxWRjcHm5GzDMwErMmNFftsE5Gpf',\n  //   fa2TokenId: 0,\n  //   metadata: {\n  //     decimals: 6,\n  //     symbol: 'USDS',\n  //     name: 'Stably USD',\n  //     thumbnailUri: 'https://quipuswap.com/tokens/stably.png',\n  //   },\n  // },\n  {\n    network: networks.edo2net,\n    type: 'fa2',\n    contractAddress: 'KT1Mn2HUUKUPg8wiQhUJ8Z9jUtZLaZn8EWL2',\n    fa2TokenId: 0,\n    metadata: {\n      decimals: 0,\n      symbol: 'MBRG',\n      name: 'MAX BURGER',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  }\n];\n\nexport const tokenWhitelistMap: ReadonlyMap<Token['contractAddress'], Token> = new Map<Token['contractAddress'], Token>(\n  tokenWhitelist.map(token => [token.contractAddress, token])\n);\n","const contractAddressPrefixes = ['KT'] as const;\nconst implicitAddressPrefixes = ['tz1', 'tz2', 'tz3'] as const;\nconst addressPrefixes = [...contractAddressPrefixes, ...implicitAddressPrefixes] as const;\n\nexport const tezosInfo = {\n  addressLength: 36,\n  contractAddressPrefixes,\n  implicitAddressPrefixes,\n  addressPrefixes,\n} as const;\n","export enum KeyType {\n  Ed25519 = 'Ed25519',\n  Secp256k1 = 'Secp256k1',\n  P256 = 'P256'\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { URL as NodeURL } from 'url';\n\nexport type URL = NodeURL;\nexport const URL = NodeURL || (globalThis as any).URL;\n","import BigNumber from 'bignumber.js';\n\nimport { tezosInfo } from '../../models/blockchain';\nimport { Payment } from '../../models/payment';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { URL } from '../../native';\nimport { guards } from '../../utils';\n\ntype Errors<FieldNames extends string> = {\n  readonly [P in FieldNames]: string;\n};\n\nexport const validateTargetAddress = (\n  targetAddress: string,\n  errors: Errors<'invalidTargetAddress' | 'targetAddressHasInvalidLength' | 'targetAddressIsNotNetworkAddress'>\n): FailedValidationResults => {\n  if (typeof targetAddress !== 'string')\n    return [errors.invalidTargetAddress];\n\n  if (targetAddress.length !== tezosInfo.addressLength)\n    return [errors.targetAddressHasInvalidLength];\n\n  if (!tezosInfo.addressPrefixes.some(prefix => targetAddress.startsWith(prefix)))\n    return [errors.targetAddressIsNotNetworkAddress];\n};\n\nexport const validateId = (\n  id: string,\n  errors: Errors<'invalidId' | 'emptyId'>\n): FailedValidationResults => {\n  if (typeof id !== 'string')\n    return [errors.invalidId];\n\n  if (id === '')\n    return [errors.emptyId];\n};\n\nexport const validateAmount = (\n  amount: BigNumber,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  if (!BigNumber.isBigNumber(amount) || amount.isNaN() || !amount.isFinite())\n    return [errors.invalidAmount];\n\n  if (amount.isZero() || amount.isNegative())\n    return [errors.amountIsNonPositive];\n};\n\nexport const validateDesiredAmount = (\n  desiredAmount: BigNumber | undefined,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  return desiredAmount === undefined ? undefined : validateAmount(desiredAmount, errors);\n};\n\nexport const validateAsset = (\n  asset: string | undefined,\n  errors: Errors<'invalidAsset' | 'assetHasInvalidLength' | 'assetIsNotContractAddress'>\n): FailedValidationResults => {\n  if (asset === undefined)\n    return;\n\n  if (typeof asset !== 'string')\n    return [errors.invalidAsset];\n\n  if (asset.length !== tezosInfo.addressLength)\n    return [errors.assetHasInvalidLength];\n\n  if (!tezosInfo.contractAddressPrefixes.some(prefix => asset.startsWith(prefix)))\n    return [errors.assetIsNotContractAddress];\n};\n\nexport const validateCreatedDate = (\n  date: Date,\n  errors: Errors<'invalidCreatedDate'>\n): FailedValidationResults => {\n  if (!(date instanceof Date) || isNaN(date.getTime()))\n    return [errors.invalidCreatedDate];\n};\n\nexport const validateUrl = (\n  url: URL | undefined,\n  errors: Errors<'invalidUrl' | 'invalidProtocol'>\n): FailedValidationResults => {\n  if (url === undefined)\n    return;\n\n  if (!(url instanceof URL))\n    return [errors.invalidUrl];\n\n  if (url.protocol.indexOf('javascript') > -1)\n    return [errors.invalidProtocol];\n};\n\nexport const validateExpiredDate = (\n  expiredDate: Date | undefined,\n  createdDate: Date,\n  minimumPaymentLifetime: number,\n  errors: Errors<'invalidExpiredDate' | 'paymentLifetimeIsShort'>\n): FailedValidationResults => {\n  if (expiredDate === undefined)\n    return;\n\n  if (!(expiredDate instanceof Date) || isNaN(expiredDate.getTime()))\n    return [errors.invalidExpiredDate];\n\n  if (expiredDate.getTime() - createdDate.getTime() < minimumPaymentLifetime) {\n    return [errors.paymentLifetimeIsShort];\n  }\n};\n\nexport const validateData = (\n  data: Payment['data'],\n  errors: Errors<'invalidData' | 'invalidPublicData' | 'publicDataShouldBeFlat' | 'invalidPrivateData' | 'privateDataShouldBeFlat'>\n): FailedValidationResults => {\n  if (!guards.isPlainObject(data) || Object.keys(data).some(key => key !== 'public' && key !== 'private'))\n    return [errors.invalidData];\n\n  const publicData = (data as Exclude<Payment['data'], { private: unknown }>).public;\n  const privateData = (data as Exclude<Payment['data'], { public: unknown }>).private;\n  if (!(publicData || privateData))\n    return [errors.invalidData];\n\n  if (publicData !== undefined) {\n    if (!guards.isPlainObject(publicData))\n      return [errors.invalidPublicData];\n    if (!isFlatObject(publicData))\n      return [errors.publicDataShouldBeFlat];\n  }\n\n  if (privateData !== undefined) {\n    if (!guards.isPlainObject(privateData))\n      return [errors.invalidPrivateData];\n    if (!isFlatObject(privateData))\n      return [errors.privateDataShouldBeFlat];\n  }\n};\n\nconst isFlatObject = (obj: Record<string, unknown>) => {\n  for (const propertyName of Object.getOwnPropertyNames(obj)) {\n    const property = obj[propertyName];\n    if (typeof property === 'object' || typeof property === 'function')\n      return false;\n  }\n\n  return true;\n};\n","import type { Payment } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport {\n  validateTargetAddress, validateId, validateAmount, validateData, validateAsset,\n  validateCreatedDate, validateExpiredDate, validateUrl\n} from './validationMethods';\n\nexport class PaymentValidator extends PaymentValidatorBase<Payment> {\n  static readonly errors = {\n    invalidPaymentObject: 'Payment is undefined or not object',\n    invalidType: 'Payment type is invalid',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidId: 'Id is invalid',\n    emptyId: 'Id is empty',\n    invalidAmount: 'Amount is invalid',\n    amountIsNonPositive: 'Amount is less than or equal to zero',\n    invalidData: 'Payment data is invalid',\n    invalidPublicData: 'Payment public data is invalid',\n    invalidPrivateData: 'Payment private data is invalid',\n    publicDataShouldBeFlat: 'Public data should be flat',\n    privateDataShouldBeFlat: 'Private data should be flat',\n    invalidAsset: 'Asset address is invalid',\n    assetIsNotContractAddress: 'Asset address isn\\'t a contract address',\n    assetHasInvalidLength: 'Asset address has an invalid address',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol',\n    invalidCreatedDate: 'Created date is invalid',\n    invalidExpiredDate: 'Expired date is invalid',\n    paymentLifetimeIsShort: 'Payment lifetime is short'\n  } as const;\n  static readonly minimumPaymentLifetime = 600000; // 10 * 60 * 1000;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Payment>> = [\n    payment => payment.type !== PaymentType.Payment ? [PaymentValidator.errors.invalidType] : undefined,\n    payment => validateTargetAddress(payment.targetAddress, PaymentValidator.errors),\n    payment => validateId(payment.id, PaymentValidator.errors),\n    payment => validateAmount(payment.amount, PaymentValidator.errors),\n    payment => validateData(payment.data, PaymentValidator.errors),\n    payment => validateAsset(payment.asset, PaymentValidator.errors),\n    payment => validateUrl(payment.successUrl, PaymentValidator.successUrlErrors),\n    payment => validateUrl(payment.cancelUrl, PaymentValidator.cancelUrlErrors),\n    payment => validateCreatedDate(payment.created, PaymentValidator.errors),\n    payment => validateExpiredDate(payment.expired, payment.created, PaymentValidator.minimumPaymentLifetime, PaymentValidator.errors),\n  ];\n\n  protected readonly invalidPaymentObjectError = PaymentValidator.errors.invalidPaymentObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidSuccessUrl,\n    invalidProtocol: PaymentValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidCancelUrl,\n    invalidProtocol: PaymentValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","import type { Donation } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport { validateTargetAddress, validateDesiredAmount, validateAsset, validateUrl } from './validationMethods';\n\nexport class DonationValidator extends PaymentValidatorBase<Donation> {\n  static readonly errors = {\n    invalidDonationObject: 'Donation is undefined or not object',\n    invalidType: 'Donation type is invalid',\n    invalidAmount: 'Desired amount is invalid',\n    amountIsNonPositive: 'Desired amount is less than or equal to zero',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidAsset: 'Desired asset address is invalid',\n    assetIsNotContractAddress: 'Desired asset address isn\\'t a contract address',\n    assetHasInvalidLength: 'Desired asset address has an invalid address',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol'\n  } as const;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Donation>> = [\n    donation => donation.type !== PaymentType.Donation ? [DonationValidator.errors.invalidType] : undefined,\n    donation => validateTargetAddress(donation.targetAddress, DonationValidator.errors),\n    donation => validateDesiredAmount(donation.desiredAmount, DonationValidator.errors),\n    donation => validateAsset(donation.desiredAsset, DonationValidator.errors),\n    donation => validateUrl(donation.successUrl, DonationValidator.successUrlErrors),\n    donation => validateUrl(donation.cancelUrl, DonationValidator.cancelUrlErrors)\n  ];\n\n  protected readonly invalidPaymentObjectError = DonationValidator.errors.invalidDonationObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidSuccessUrl,\n    invalidProtocol: DonationValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidCancelUrl,\n    invalidProtocol: DonationValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","export abstract class StateModel {\n    protected constructor() {\n    // All derived classes should be static\n    }\n}\n","import { SerializedFieldType } from './serializedFieldType';\n\nexport class ObjectSerializationValidator<T extends Record<string | number, unknown>> {\n  private _minObjectFieldsCount: number | undefined;\n\n  constructor(\n    protected readonly objectFieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>\n  ) {\n  }\n\n  private get minObjectFieldsCount() {\n    if (!this._minObjectFieldsCount) {\n      let count = 0;\n      for (const info of this.objectFieldTypes) {\n        if (typeof info[1] === 'string' ? info[1] !== 'undefined' : info[1].every(type => type !== 'undefined'))\n          count++;\n      }\n\n      this._minObjectFieldsCount = count;\n    }\n\n    return this._minObjectFieldsCount;\n  }\n\n  private get maxObjectFieldsCount() {\n    return this.objectFieldTypes.size;\n  }\n\n  validate(value: T): value is T {\n    if (!value)\n      return false;\n\n    const fieldNames = Object.getOwnPropertyNames(value) as ReadonlyArray<keyof T>;\n\n    // Prevent the field checking if the deserializedValue has an invalid number of fields\n    if (fieldNames.length < this.minObjectFieldsCount || fieldNames.length > this.maxObjectFieldsCount)\n      return false;\n\n    for (const [fieldName, expectedFieldType] of this.objectFieldTypes) {\n      const fieldValue = value[fieldName];\n      const actualFieldType = fieldValue === null ? 'null' : typeof fieldValue;\n\n      if (Array.isArray(expectedFieldType)\n        ? !expectedFieldType.some(expectedType => actualFieldType === expectedType)\n        : actualFieldType !== expectedFieldType\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Serializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  serialize(value: T): string | null {\n    try {\n      if (!this.objectSerializationValidator.validate(value))\n        return null;\n\n      const jsonString = JSON.stringify(value);\n      return base64.encode(jsonString, 'base64url');\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Deserializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  deserialize(serializedValue: string): T | null {\n    try {\n      let value: T;\n\n      if (serializedValue) {\n        const serializedValueString = base64.decode(serializedValue, 'base64url');\n        value = JSON.parse(serializedValueString);\n      }\n      else\n        value = {} as T;\n\n      return this.objectSerializationValidator.validate(value)\n        ? value\n        : null;\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { LegacySerializedPayment, SerializedPayment } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nexport const serializedPaymentFieldTypes: ReadonlyMap<\n  keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  // id\n  .set('i', 'string')\n  // amount\n  .set('a', 'string')\n  // data\n  .set('d', 'object')\n  // asset\n  .set('as', ['string', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null'])\n  // created\n  .set('c', 'number')\n  // expired\n  .set('e', ['number', 'undefined', 'null']);\n\nexport const legacySerializedPaymentFieldTypes: ReadonlyMap<\n  keyof LegacySerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof LegacySerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  .set('amount', 'string')\n  .set('data', 'object')\n  .set('asset', ['string', 'undefined', 'null'])\n  .set('successUrl', ['string', 'undefined', 'null'])\n  .set('cancelUrl', ['string', 'undefined', 'null'])\n  .set('created', 'number')\n  .set('expired', ['number', 'undefined', 'null']);\n","import type { Payment, SerializedPayment } from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentSerializer {\n  protected static readonly serializedPaymentBase64Serializer = new Base64Serializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  serialize(payment: Payment): string | null {\n    try {\n      const serializedPayment = this.mapPaymentToSerializedPayment(payment);\n      return PaymentSerializer.serializedPaymentBase64Serializer.serialize(serializedPayment);\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapPaymentToSerializedPayment(payment: Payment): SerializedPayment {\n    return {\n      i: payment.id,\n      a: payment.amount.toString(),\n      d: payment.data,\n      as: payment.asset,\n      su: payment.successUrl?.toString(),\n      cu: payment.cancelUrl?.toString(),\n      c: payment.created.getTime(),\n      e: payment.expired?.getTime(),\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedPaymentSlice, Payment, SerializedPayment } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment | null {\n    try {\n      const serializedPayment = PaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment, nonSerializedPaymentSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: SerializedPayment, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment {\n    return {\n      type: PaymentType.Payment,\n      id: serializedPayment.i,\n      amount: new BigNumber(serializedPayment.a),\n      data: serializedPayment.d,\n      asset: serializedPayment.as,\n      successUrl: serializedPayment.su ? new URL(serializedPayment.su) : undefined,\n      cancelUrl: serializedPayment.cu ? new URL(serializedPayment.cu) : undefined,\n      created: new Date(serializedPayment.c),\n      expired: serializedPayment.e ? new Date(serializedPayment.e) : undefined,\n      targetAddress: nonSerializedPaymentSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedPaymentSlice, Payment, LegacySerializedPayment } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { legacySerializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class LegacyPaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<LegacySerializedPayment>(\n    legacySerializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment | null {\n    try {\n      const serializedPayment = LegacyPaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment, nonSerializedPaymentSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: LegacySerializedPayment, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment {\n    return {\n      type: PaymentType.Payment,\n      id: 'legacy-payment',\n      amount: new BigNumber(serializedPayment.amount),\n      data: serializedPayment.data,\n      asset: serializedPayment.asset,\n      successUrl: serializedPayment.successUrl ? new URL(serializedPayment.successUrl) : undefined,\n      cancelUrl: serializedPayment.cancelUrl ? new URL(serializedPayment.cancelUrl) : undefined,\n      created: new Date(serializedPayment.created),\n      expired: serializedPayment.expired ? new Date(serializedPayment.expired) : undefined,\n      targetAddress: nonSerializedPaymentSlice.targetAddress\n    };\n  }\n}\n","import { LegacySerializedDonation, SerializedDonation } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nexport const serializedDonationFieldTypes: ReadonlyMap<\n  keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  // desiredAmount\n  .set('da', ['string', 'undefined', 'null'])\n  // desiredAsset\n  .set('das', ['string', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null']);\n\nexport const legacySerializedDonationFieldTypes: ReadonlyMap<\n  keyof LegacySerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof LegacySerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  .set('desiredAmount', ['string', 'undefined', 'null'])\n  .set('desiredAsset', ['string', 'undefined', 'null'])\n  .set('successUrl', ['string', 'undefined', 'null'])\n  .set('cancelUrl', ['string', 'undefined', 'null']);\n","import type { Donation, SerializedDonation } from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nconst serializedEmptyObjectBase64 = 'e30';\nexport class DonationSerializer {\n  protected static readonly serializedDonationBase64Serializer = new Base64Serializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  serialize(donation: Donation): string | null {\n    try {\n      const serializedDonation = this.mapDonationToSerializedDonation(donation);\n      const serializedDonationBase64 = DonationSerializer.serializedDonationBase64Serializer.serialize(serializedDonation);\n\n      return serializedDonationBase64 === serializedEmptyObjectBase64 ? '' : serializedDonationBase64;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapDonationToSerializedDonation(donation: Donation): SerializedDonation {\n    return {\n      da: donation.desiredAmount?.toString(),\n      das: donation.desiredAsset,\n      su: donation.successUrl?.toString(),\n      cu: donation.cancelUrl?.toString(),\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedDonationSlice, Donation, SerializedDonation } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class DonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = DonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: SerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      desiredAmount: serializedDonation.da ? new BigNumber(serializedDonation.da) : undefined,\n      desiredAsset: serializedDonation.das,\n      successUrl: serializedDonation.su ? new URL(serializedDonation.su) : undefined,\n      cancelUrl: serializedDonation.cu ? new URL(serializedDonation.cu) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedDonationSlice, Donation, LegacySerializedDonation } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { legacySerializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class LegacyDonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<LegacySerializedDonation>(\n    legacySerializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = LegacyDonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: LegacySerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      desiredAmount: serializedDonation.desiredAmount ? new BigNumber(serializedDonation.desiredAmount) : undefined,\n      desiredAsset: serializedDonation.desiredAsset,\n      successUrl: serializedDonation.successUrl ? new URL(serializedDonation.successUrl) : undefined,\n      cancelUrl: serializedDonation.cancelUrl ? new URL(serializedDonation.cancelUrl) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { PaymentValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { LegacyPaymentDeserializer, PaymentDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedPaymentSlice } from './serializedPayment';\n\ninterface PublicPaymentData {\n  readonly public: { readonly [fieldName: string]: unknown; };\n}\n\ninterface PrivatePaymentData {\n  readonly private: { readonly [fieldName: string]: unknown; };\n}\n\ntype PaymentData =\n  | PublicPaymentData\n  | PrivatePaymentData\n  | PublicPaymentData & PrivatePaymentData;\n\nexport interface Payment extends PaymentBase {\n  readonly type: PaymentType.Payment;\n  readonly id: string;\n  readonly amount: BigNumber;\n  readonly asset?: string;\n  readonly data: PaymentData;\n  readonly created: Date;\n  readonly expired?: Date;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n}\n\nexport class Payment extends StateModel {\n  static readonly defaultDeserializer: PaymentDeserializer = new PaymentDeserializer();\n  static readonly defaultLegacyDeserializer: LegacyPaymentDeserializer = new LegacyPaymentDeserializer();\n  static readonly defaultValidator: PaymentValidator = new PaymentValidator();\n\n  static validate(payment: Payment) {\n    return this.defaultValidator.validate(payment);\n  }\n\n  static deserialize(serializedPayment: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice, isLegacy = false): Payment | null {\n    return !isLegacy\n      ? Payment.defaultDeserializer.deserialize(serializedPayment, nonSerializedPaymentSlice)\n      : Payment.defaultLegacyDeserializer.deserialize(serializedPayment, nonSerializedPaymentSlice);\n  }\n\n  static publicDataExists(payment: Payment): payment is Payment & { readonly data: PublicPaymentData };\n  static publicDataExists(paymentData: Payment['data']): paymentData is Payment['data'] & PublicPaymentData;\n  static publicDataExists(\n    paymentOrPaymentDataOrPaymentData: Payment | Payment['data']\n  ): paymentOrPaymentDataOrPaymentData is (Payment & { readonly data: PublicPaymentData }) | (Payment['data'] & PublicPaymentData) {\n    return this.publicDataExistsInternal(paymentOrPaymentDataOrPaymentData);\n  }\n\n  static privateDataExists(payment: Payment): payment is Payment & { readonly data: PrivatePaymentData } {\n    return !!(payment.data as PrivatePaymentData).private;\n  }\n\n  protected static publicDataExistsInternal(\n    paymentOrPaymentDataOrPaymentData: Payment | Payment['data']\n  ): paymentOrPaymentDataOrPaymentData is (Payment & { readonly data: PublicPaymentData }) | (Payment['data'] & PublicPaymentData) {\n    return !!(Payment.isPayment(paymentOrPaymentDataOrPaymentData)\n      ? (paymentOrPaymentDataOrPaymentData.data as PublicPaymentData).public\n      : (paymentOrPaymentDataOrPaymentData as PublicPaymentData).public\n    );\n  }\n\n  private static isPayment(paymentOrPaymentDataOrPaymentData: Payment | Payment['data']): paymentOrPaymentDataOrPaymentData is Payment {\n    return !!(paymentOrPaymentDataOrPaymentData as Payment).amount;\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { DonationValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { DonationDeserializer, LegacyDonationDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedDonationSlice } from './serializedDonation';\n\nexport interface Donation extends PaymentBase {\n  readonly type: PaymentType.Donation;\n  readonly desiredAmount?: BigNumber;\n  readonly desiredAsset?: string;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n}\n\nexport class Donation extends StateModel {\n  static readonly defaultDeserializer: DonationDeserializer = new DonationDeserializer();\n  static readonly defaultLegacyDeserializer: LegacyDonationDeserializer = new LegacyDonationDeserializer();\n  static readonly defaultValidator: DonationValidator = new DonationValidator();\n\n  static validate(donation: Donation) {\n    return this.defaultValidator.validate(donation);\n  }\n\n  static deserialize(serializedDonation: string, nonSerializedDonationSlice: NonSerializedDonationSlice, isLegacy = false): Donation | null {\n    return !isLegacy\n      ? Donation.defaultDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice)\n      : Donation.defaultLegacyDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice);\n  }\n}\n\n","import { text } from '../../utils';\n\nexport enum PaymentUrlType {\n  Base64 = 0\n}\n\nconst encodedPaymentUrlTypeMap = new Map<PaymentUrlType, string>(\n  Object.keys(PaymentUrlType)\n    .filter(value => !isNaN(+value))\n    .map(value => [+value, text.padStart(value, 2, '0')])\n);\n\nexport const getEncodedPaymentUrlType = (paymentUrlType: PaymentUrlType) => encodedPaymentUrlTypeMap.get(paymentUrlType) || '';\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ParameterizedRouteFactory = (...args: any[]) => string;\nexport type ParameterizedRoute<Factory extends ParameterizedRouteFactory> = Factory & {\n  readonly template: string;\n};\n\nexport const getParameterizedRoute = <Factory extends ParameterizedRouteFactory>(\n  factory: Factory, template: string\n): ParameterizedRoute<Factory> => {\n  (factory as Factory & { template: string }).template = template;\n\n  return factory as ParameterizedRoute<Factory>;\n};\n","export enum ServiceOperationType {\n  Payment = 1,\n  Donation = 2,\n\n  All = Payment | Donation\n}\n","import { Network, networks } from '../blockchain/network';\nimport { ServiceOperationType } from './serviceOperationType';\nimport { ServiceSigningKey } from './serviceSigningKey';\n\nexport interface Service {\n  readonly name: string;\n  readonly links: readonly string[];\n  readonly description?: string;\n  readonly iconUrl?: string;\n  readonly version: number;\n  readonly metadata: string;\n\n  readonly contractAddress: string;\n  readonly network: Network;\n  readonly allowedTokens: {\n    readonly tez: boolean;\n    readonly assets: readonly string[];\n  }\n  readonly allowedOperationType: ServiceOperationType;\n\n  readonly owner: string;\n  readonly paused: boolean;\n  readonly deleted: boolean;\n  readonly signingKeys: { readonly [key: string]: ServiceSigningKey };\n}\n\nexport const emptyService: Service = {\n  name: '',\n  description: '',\n  links: [],\n  version: 0,\n  metadata: '',\n  contractAddress: '',\n  allowedTokens: {\n    tez: true,\n    assets: []\n  },\n  allowedOperationType: ServiceOperationType.Payment,\n  owner: '',\n  paused: false,\n  deleted: false,\n  network: networks.edo2net,\n  signingKeys: {}\n};\n","import BigNumber from 'bignumber.js';\n\nimport { converters } from '../../utils';\nimport { StateModel } from '../core';\nimport { ServiceOperationDirection } from './serviceOperationDirection';\nimport { ServiceOperationStatus } from './serviceOperationStatus';\nimport { ServiceOperationType } from './serviceOperationType';\n\ninterface ServiceOperationPayloadData {\n  readonly value: { readonly [fieldName: string]: unknown; } | null;\n  readonly valueString: string;\n  readonly encodedValue: string;\n}\n\ninterface PublicServiceOperationPayload {\n  readonly public: ServiceOperationPayloadData;\n}\n\ninterface PrivateServiceOperationPayload {\n  readonly private: ServiceOperationPayloadData;\n}\n\ntype ServiceOperationPayload =\n  | PublicServiceOperationPayload\n  | PrivateServiceOperationPayload\n  | PublicServiceOperationPayload & PrivateServiceOperationPayload;\n\nexport interface ServiceOperation {\n  readonly hash: string;\n  readonly type: ServiceOperationType;\n  readonly direction: ServiceOperationDirection;\n  readonly status: ServiceOperationStatus;\n  readonly amount: BigNumber;\n  readonly payload: ServiceOperationPayload;\n  readonly asset?: string;\n  readonly timestamp: string;\n  readonly date: Date;\n  readonly sender: string;\n  readonly target: string;\n}\n\nexport class ServiceOperation extends StateModel {\n  static publicPayloadExists(operation: ServiceOperation): operation is ServiceOperation & { readonly payload: PublicServiceOperationPayload } {\n    return !!(operation.payload as PublicServiceOperationPayload).public;\n  }\n\n  static privatePayloadExists(operation: ServiceOperation): operation is ServiceOperation & { readonly payload: PrivateServiceOperationPayload } {\n    return !!(operation.payload as PrivateServiceOperationPayload).private;\n  }\n\n  static isPayloadDecoded(\n    data: ServiceOperationPayloadData\n  ): data is ServiceOperationPayloadData & { readonly value: NonNullable<ServiceOperationPayloadData['value']> } {\n    return !!data.value;\n  }\n\n  static parseServiceOperationPayload(encodedValue: string): ServiceOperationPayloadData {\n    const valueString = converters.bytesToString(encodedValue);\n\n    let value: ServiceOperationPayloadData['value'] = null;\n    try { value = JSON.parse(valueString); } catch { /**/ }\n\n    return {\n      value,\n      valueString,\n      encodedValue,\n    };\n  }\n}\n","export enum ServiceOperationDirection {\n  Incoming = 0,\n  Outgoing = 1\n}\n","export enum ServiceOperationStatus {\n  Pending = 0,\n  Success = 1,\n  Cancelled = 2\n}\n"],"names":["isBase64UrlFormatSupported","Buffer","isEncoding","decode","base64String","format","base64UrlPreprocessor","prepareValueForDecoding","from","toString","encode","value","encodedValue","prepareEncodedValue","base64value","split","replace","length","Error","stringToUint8Array","hex","integers","match","map","val","parseInt","Uint8Array","stringToBytes","bytesToString","objectToBytes","JSON","stringify","bytesToObject","parse","tezToMutez","tez","BigInt","isArray","arg","Array","isReadonlyArray","isPlainObject","isPlainObjectLodashFunction","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","i","memoize","func","lastArgs","lastResult","arguments","apply","emptyArray","emptyObject","emptyMap","Map","emptySet","Set","is","x","y","shallowEqual","objA","objB","keysA","Object","keys","keysB","prototype","hasOwnProperty","call","capitalize","toLocaleUpperCase","slice","getAvatarText","maxLength","result","j","isWord","stringPad","string","isStart","fillString","String","padStart","undefined","stringLength","fillLength","filler","repeat","Math","ceil","padEnd","wait","ms","Promise","resolve","setTimeout","IconId","getInvalidLinkInfo","link","rawLink","formattedLink","displayLink","icon","Common","prepareFormattedLink","trim","prepareDisplayLink","socialMediaLinkInfoProvider","baseUrl","startsWith","telegramLinkInfoProvider","Telegram","facebookLinkInfoProvider","Facebook","twitterLinkInfoProvider","Twitter","instagramLinkInfoProvider","Instagram","gitHubLinkInfoProvider","GitHub","redditLinkInfoProvider","Reddit","emailCheckingRegEx","emailLinkInfoProvider","preparedFormattedLink","test","Email","javascriptLinkInfoProvider","urlSchemeRegEx","commonLinkInfoProvider","editLinkInfoProvider","ServiceLinkHelper","getLinkInfo","isEditMode","provider","linkInfoProviders","linkInfo","linkInfoIsValid","PaymentType","PaymentValidatorBase","validate","payment","bail","guards","invalidPaymentObjectError","failedValidationResults","validationMethod","validationMethods","currentFailedValidationResults","concat","networksInternal","granadanet","id","name","edo2net","networks","networksCollection","values","networkIdRegExp","networkNameRegExp","tezosMeta","symbol","decimals","thumbnailUri","tokenWhitelist","network","type","contractAddress","fa2TokenId","metadata","tokenWhitelistMap","token","contractAddressPrefixes","implicitAddressPrefixes","addressPrefixes","tezosInfo","addressLength","KeyType","URL","NodeURL","globalThis","validateTargetAddress","targetAddress","errors","invalidTargetAddress","targetAddressHasInvalidLength","some","prefix","targetAddressIsNotNetworkAddress","validateId","invalidId","emptyId","validateAmount","amount","BigNumber","isBigNumber","isNaN","isFinite","invalidAmount","isZero","isNegative","amountIsNonPositive","validateDesiredAmount","desiredAmount","validateAsset","asset","invalidAsset","assetHasInvalidLength","assetIsNotContractAddress","validateCreatedDate","date","Date","getTime","invalidCreatedDate","validateUrl","url","invalidUrl","protocol","indexOf","invalidProtocol","validateExpiredDate","expiredDate","createdDate","minimumPaymentLifetime","invalidExpiredDate","paymentLifetimeIsShort","validateData","data","key","invalidData","publicData","public","privateData","private","invalidPublicData","isFlatObject","publicDataShouldBeFlat","invalidPrivateData","privateDataShouldBeFlat","obj","propertyName","getOwnPropertyNames","property","PaymentValidator","Payment","invalidType","successUrl","successUrlErrors","cancelUrl","cancelUrlErrors","created","expired","invalidPaymentObject","invalidSuccessUrl","successUrlHasInvalidProtocol","invalidCancelUrl","cancelUrlHasInvalidProtocol","DonationValidator","donation","Donation","desiredAsset","invalidDonationObject","StateModel","constructor","ObjectSerializationValidator","objectFieldTypes","minObjectFieldsCount","_minObjectFieldsCount","count","info","every","maxObjectFieldsCount","size","fieldNames","fieldName","expectedFieldType","fieldValue","actualFieldType","expectedType","Base64Serializer","fieldTypes","objectSerializationValidator","serialize","jsonString","base64","Base64Deserializer","deserialize","serializedValue","serializedValueString","serializedPaymentFieldTypes","set","legacySerializedPaymentFieldTypes","PaymentSerializer","serializedPayment","mapPaymentToSerializedPayment","serializedPaymentBase64Serializer","d","as","su","cu","c","e","PaymentDeserializer","serializedPaymentBase64","nonSerializedPaymentSlice","serializedPaymentBase64Deserializer","mapSerializedPaymentToPayment","LegacyPaymentDeserializer","serializedDonationFieldTypes","legacySerializedDonationFieldTypes","serializedEmptyObjectBase64","DonationSerializer","serializedDonation","mapDonationToSerializedDonation","serializedDonationBase64","serializedDonationBase64Serializer","da","das","DonationDeserializer","nonSerializedDonationSlice","serializedDonationBase64Deserializer","mapSerializedDonationToDonation","LegacyDonationDeserializer","defaultValidator","isLegacy","defaultDeserializer","defaultLegacyDeserializer","publicDataExists","paymentOrPaymentDataOrPaymentData","publicDataExistsInternal","privateDataExists","isPayment","PaymentUrlType","encodedPaymentUrlTypeMap","filter","text","getEncodedPaymentUrlType","paymentUrlType","get","getParameterizedRoute","factory","template","ServiceOperationType","emptyService","description","links","version","allowedTokens","assets","allowedOperationType","owner","paused","deleted","signingKeys","ServiceOperation","publicPayloadExists","operation","payload","privatePayloadExists","isPayloadDecoded","parseServiceOperationPayload","valueString","converters","ServiceOperationDirection","ServiceOperationStatus"],"mappings":"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"}