{"version":3,"sources":["services/servicesService.ts","../../src/utils/base64.ts","../../src/utils/converters.ts","../../src/utils/guards.ts","../../src/utils/memoize.ts","../../src/utils/optimization.ts","../../src/utils/text.ts","../../src/utils/index.ts","../../src/helpers/serviceLinkHelper.ts","../../src/models/payment/paymentBase.ts","../../src/helpers/paymentValidator/paymentValidatorBase.ts","../../src/models/blockchain/network.ts","../../src/models/blockchain/token.ts","../../src/models/blockchain/tezosInfo.ts","../../src/models/blockchain/keyType.ts","../../src/native/index.ts","../../src/helpers/paymentValidator/validationMethods.ts","../../src/helpers/paymentValidator/paymentValidator.ts","../../src/helpers/paymentValidator/donationValidator.ts","../../src/models/core/stateModel.ts","../../src/serialization/base64/objectSerializationValidator.ts","../../src/serialization/base64/base64Serializer.ts","../../src/serialization/base64/base64Deserializer.ts","../../src/serialization/payment/serializedPaymentFieldTypes.ts","../../src/serialization/payment/paymentSerializer.ts","../../src/serialization/payment/paymentDeserializer.ts","../../src/serialization/payment/legacyPaymentDeserializer.ts","../../src/serialization/donation/serializedDonationFieldTypes.ts","../../src/serialization/donation/donationSerializer.ts","../../src/serialization/donation/donationDeserializer.ts","../../src/serialization/donation/legacyDonationDeserializer.ts","../../src/models/payment/payment.ts","../../src/models/payment/donation.ts","../../src/models/payment/paymentUrlType.ts","../../src/models/routing/parameterizedRoute.ts","../../src/models/service/serviceOperationType.ts","../../src/models/service/service.ts","../../src/models/service/serviceOperation.ts","../../src/models/service/serviceOperationDirection.ts","../../src/models/service/serviceOperationStatus.ts","../../config/defaultConfig.ts","../../explorers/blockchainUrlExplorer.ts","../../explorers/tzKTBlockchainUrlExplorer.ts","../../explorers/betterCallDevUrlBlockchainExplorer.ts","../../explorers/tzStatsBlockchainUrlExplorer.ts","../../../../src/providers/tzKTDataProvider/tzKTDataProvider.ts","../../../../src/providers/betterCallDevDataProvider/betterCallDevDataProvider.ts","../../utils/converters.ts","config/config.ts","services/accountsService.ts","app/readOnlySigner.ts","app/reactAppContext.ts","store/accounts/selectors.ts","store/services/selectors.ts","store/balances/slice.ts","store/operations/slice.ts","store/services/slice.ts","store/accounts/slice.ts","localization/en-US/index.ts","localization/en-US/common/index.ts","localization/en-US/views/header.ts","localization/en-US/views/overview.ts","localization/en-US/views/createService.ts","localization/en-US/views/connect.ts","localization/en-US/views/about.ts","localization/en-US/views/operations.ts","localization/en-US/views/services.ts","localization/en-US/views/settings.ts","localization/en-US/views/acceptPayments.ts","components/hooks/useCurrentLanguage.tsx","components/hooks/reduxHooks.ts","components/hooks/useAppContext.tsx","components/common/PrivateRoute.tsx","components/common/TokenList/TokenList.tsx","components/common/ExplorerLink/ExplorerLink.tsx","components/common/ExternalLink.tsx","components/common/NoServicesCreated/NoServicesCreated.tsx","components/views/View/ViewTitle.tsx","components/views/View/View.tsx","components/hooks/useViewTitle.tsx","components/views/Overview/LargeCards/OperationCountChart.tsx","components/views/Overview/LargeCards/VolumeChart.tsx","store/balances/selectors.ts","components/views/Overview/SmallCards/Balances.tsx","components/views/Overview/SmallCards/Incoming.tsx","components/views/Overview/SmallCards/Outgoing.tsx","components/views/Overview/Overview.tsx","store/operations/selectors.ts","components/common/OperationList/OperationIcon.tsx","components/common/OperationList/OperationList.tsx","components/views/Operations/NoOperationsPerformed/NoOperationsPerformed.tsx","components/views/Operations/Operations.tsx","components/views/Services/ServiceCards/NewServiceCard.tsx","components/common/Tags/ActiveTag/ActiveTag.tsx","components/common/Tags/CustomTag/CustomTag.tsx","components/views/Services/ServiceCards/ServiceCard.tsx","components/views/Services/Services.tsx","components/views/Service/ActionsZone/ActionsZone.tsx","components/views/Service/DangerZone/DangerZone.tsx","components/views/Service/DevZone/AddApiKeyModal/AddApiKeyModal.tsx","components/views/Service/DevZone/ApiKeyList/ApiKeyList.tsx","components/views/Service/DevZone/DevZone.tsx","components/views/Service/Header/Header.tsx","assets/icons/telegram.svg","components/common/ServiceLinks/iconIdMap.ts","components/common/ServiceLinks/ServiceLink.tsx","components/common/ServiceLinks/ServiceLinks.tsx","components/common/ServiceLinks/ServiceLinkEditor.tsx","components/common/ServiceLinks/ServiceLinksEditor.tsx","components/views/Service/Tokens/Tokens.tsx","components/views/Service/ServiceEditForm/ServiceEditForm.tsx","components/views/Service/ViewZone/ViewZone.tsx","components/views/Service/Service.tsx","components/hooks/useQuery.tsx","components/views/About/About.tsx","components/views/Connect/ConnectDropdown/ConnectDropdown.tsx","components/views/Connect/Connect.tsx","components/views/AcceptPayments/PaymentAmount/PaymentAmount.tsx","components/views/AcceptPayments/AcceptPaymentsSettings/AcceptPaymentsSettings.tsx","../../src/constants.ts","../../src/errors.ts","../../src/paymentUrlFactories/paymentUrlFactory.ts","../../src/paymentUrlFactories/base64PaymentUrlFactory.ts","../../src/models.ts","../../src/signers/tezosPaymentsSigner.ts","../../src/signers/apiSecretKeySigner.ts","../../src/signers/walletSigner.ts","../../src/signers/customSigner.ts","../../src/tezosPayments.ts","../../src/validationErrors.ts","../../src/index.ts","components/views/AcceptPayments/Generator/DirectLinkGenerator/DirectLinkGenerator.tsx","components/views/AcceptPayments/Generator/FailedValidationResult/FailedValidationResult.tsx","components/views/AcceptPayments/Generator/Generator.tsx","components/views/AcceptPayments/AcceptPayments.tsx","models/blockchain/account.ts","components/App/AccountDropdown/AccountNetworkGroup/AccountNetworkGroup.tsx","components/App/AccountDropdown/AccountDropdown.tsx","components/App/Header/Header.tsx","components/App/NavBar/NavBar.tsx","components/App/Notifications/Notifications.tsx","components/App/App.tsx","reportWebVitals.ts","store/index.ts","index.tsx","app/webApp.ts"],"names":["ServicesService","constructor","tezosToolkit","servicesProvider","servicesFactoryContractAddress","account","this","getServices","address","serviceContractAddress","getService","getOperations","service","serviceContract","getServiceContract","contractAddress","encodedServiceMetadata","encodeMetadata","methods","update_service_parameters","allowedTokens","tez","assets","allowedOperationType","send","paused","set_pause","deleted","set_deleted","factoryContract","contract","at","factoryStorage","storage","factoryImplementationContract","getFactoryImplementationContract","factory_implementation","create_service","MichelsonMap","addApiKey","signingKey","signingKeyUpdatesMap","set","publicKey","public_key","name","updateSigningKeys","deleteApiKey","undefined","update_signing_keys","serviceMetadata","links","length","description","iconUrl","Buffer","from","JSON","stringify","toString","wallet","isBase64UrlFormatSupported","decode","base64String","format","base64UrlPreprocessor","encode","value","encodedValue","prepareEncodedValue","base64value","prepareValueForDecoding","Error","stringToUint8Array","hex","integers","val","parseInt","Uint8Array","stringToBytes","bytesToString","BigInt","isPlainObject","isPlainObjectLodashFunction","arg","Array","defaultEqualityCheck","a","areArgumentsShallowlyEqual","prev","next","i","equalityCheck","memoize","lastArgs","lastResult","func","emptyObject","stringPad","string","fillString","String","stringLength","maxLength","fillLength","filler","Math","isStart","padStart","result","j","isWord","wait","ms","Promise","resolve","setTimeout","IconId","prepareFormattedLink","link","prepareDisplayLink","socialMediaLinkInfoProvider","formattedLink","rawLink","displayLink","icon","emailCheckingRegEx","urlSchemeRegEx","ServiceLinkHelper","getLinkInfo","isEditMode","linkInfo","provider","linkInfoIsValid","Common","editLinkInfoProvider","PaymentType","getInvalidLinkInfo","preparedFormattedLink","Email","PaymentValidatorBase","validate","payment","bail","guards","currentFailedValidationResults","validationMethod","failedValidationResults","networksInternal","granadanet","id","networks","networksCollection","Object","networkIdRegExp","networkNameRegExp","tezosMeta","tokenWhitelistMap","Map","network","type","metadata","decimals","symbol","thumbnailUri","fa2TokenId","tokenWhitelist","token","contractAddressPrefixes","implicitAddressPrefixes","tezosInfo","addressLength","addressPrefixes","KeyType","URL","NodeURL","globalThis","validateTargetAddress","targetAddress","errors","prefix","validateAmount","BigNumber","amount","validateAsset","asset","validateUrl","url","isFlatObject","obj","property","PaymentValidator","validateId","key","publicData","data","privateData","validateData","date","isNaN","validateCreatedDate","expiredDate","createdDate","validateExpiredDate","invalidPaymentObject","invalidType","invalidTargetAddress","targetAddressIsNotNetworkAddress","targetAddressHasInvalidLength","invalidId","emptyId","invalidAmount","amountIsNonPositive","invalidData","invalidPublicData","invalidPrivateData","publicDataShouldBeFlat","privateDataShouldBeFlat","invalidAsset","assetIsNotContractAddress","assetHasInvalidLength","invalidSuccessUrl","successUrlHasInvalidProtocol","invalidCancelUrl","cancelUrlHasInvalidProtocol","invalidCreatedDate","invalidExpiredDate","paymentLifetimeIsShort","invalidUrl","invalidProtocol","DonationValidator","donation","validateDesiredAmount","desiredAmount","invalidDonationObject","StateModel","ObjectSerializationValidator","objectFieldTypes","count","info","fieldNames","fieldName","fieldValue","actualFieldType","expectedFieldType","expectedType","Base64Serializer","fieldTypes","serialize","objectSerializationValidator","jsonString","base64","Base64Deserializer","deserialize","serializedValue","serializedValueString","serializedPaymentFieldTypes","legacySerializedPaymentFieldTypes","PaymentSerializer","serializedPayment","mapPaymentToSerializedPayment","d","as","su","cu","c","e","PaymentDeserializer","serializedPaymentBase64","mapSerializedPaymentToPayment","successUrl","cancelUrl","created","Date","expired","nonSerializedPaymentSlice","LegacyPaymentDeserializer","serializedDonationFieldTypes","legacySerializedDonationFieldTypes","DonationSerializer","serializedDonation","mapDonationToSerializedDonation","serializedDonationBase64","da","das","DonationDeserializer","mapSerializedDonationToDonation","desiredAsset","nonSerializedDonationSlice","LegacyDonationDeserializer","Payment","defaultValidator","isLegacy","publicDataExistsInternal","paymentOrPaymentDataOrPaymentData","Donation","PaymentUrlType","encodedPaymentUrlTypeMap","text","getParameterizedRoute","factory","ServiceOperationType","emptyService","optimization","version","emptyArray","owner","signingKeys","emptyMap","ServiceOperation","operation","valueString","converters","ServiceOperationDirection","ServiceOperationStatus","commitShortSha","process","config","defaultConfig","app","publicUrl","title","buildInfo","routers","overview","operations","services","createService","acceptPayments","acceptServicePayments","connect","about","tzKT","AccountsService","dAppClient","requestPermissions","networkToBeaconNetwork","then","permissions","catch","console","error","clearActiveAccount","disconnect","activeAccount","getActiveAccount","beaconNetworkToNetwork","tz","getBalance","getTokenFA12Balance","getTokenFA2Balance","toNumber","views","read","token_id","balance","ReadOnlySigner","ReactAppContext","React","createContext","selectAccountsState","state","accountsState","getCurrentAccount","createSelector","currentAccount","connectedAccounts","find","getAccountsByNetwork","reduce","p","get","getCurrentNetworkConfig","tezos","selectTokensState","_state","selectServicesState","servicesState","getAllAcceptedTokens","tokensState","Set","forEach","s","assetAddress","add","getAcceptTezos","some","getSortedServices","sort","b","localeCompare","getOperationsByService","operationsMap","pendingOperations","op","serviceAddress","push","initialState","tokens","initialized","namespace","loadBalances","createAsyncThunk","async","extra","getState","accountsService","getTezosBalance","acceptedTokens","balancesPromises","map","t","getTokenBalance","all","balancesSlice","createSlice","reducers","clearBalances","extraReducers","builder","addCase","fulfilled","action","payload","actions","loadOperations","servicesAddresses","operationsPromises","servicesService","flat","operationsSlice","clearOperations","PendingOperationStatus","loadServices","dispatch","updateService","waitOperationConfirmation","reloadServices","setPaused","setDeleted","clearServices","_","operationName","confirmationsNumber","pendingOperation","hash","targetConfirmationCount","confirmationCount","status","loading","createPendingOperation","opHash","addPendingOperation","reject","confirmationObservable","subscribe","confirmation","setPendingOperationConfirmationCount","currentConfirmation","setPendingOperationStatus","deletePendingOperation","success","servicesSlice","o","filter","loadActiveAccount","connectAccount","disconnectAccount","accountsSlice","nextAccount","enUS","resources","common","comingSoon","copy","copyLink","open","new","cancel","save","yes","no","header","accountActions","copyAddress","viewOn","connectAnotherAccount","balances","incoming","outgoing","operationCount","volume","connectTo","detailedTitle","build","poweredBy","tzKt","api","operationList","paymentData","donationData","income","expense","cancelled","pending","noOperationsPerformedYet","active","updating","createNewService","acceptPaymentsDescription","youDoNotHaveAnyServicesYet","createYourFirstService","paymentsEnabled","donationsEnabled","allowedCurrencies","dangerZone","pauseService","pauseServiceConfirmation","pauseServiceDescription","unPauseService","unPauseServiceConfirmation","unPauseServiceDescription","deleteService","deleteServiceConfirmation","deleteServiceDescription","unDeleteService","unDeleteServiceConfirmation","unDeleteServiceDescription","devZone","addKey","saveKeys","algorithm","secretKey","saveSecretKeyWarning","saveSecretKeyConfirm","noApiKeysAddedYet","deleteKeyConfirmation","editing","editService","addCurrency","addLink","serviceName","accept","acceptDonations","settings","paymentPublicData","orderId","orderIdHelpText","shortDescription","shortDescriptionHelpText","directLinkPaymentHelpText","directLinkDonationHelpText","fillRequiredData","useCurrentLanguageResources","useAppDispatch","useDispatch","useAppSelector","useSelector","useAppContext","useContext","defaultConnectPath","PrivateRoute","children","isConnected","connectPath","routeProps","props","to","pathname","location","PrivateRouteContainer","TokenList","className","Item","valueClassNames","combineClassNames","highlightSign","sign","abs","allDecimalsShown","valueSpan","toLocaleString","minimumFractionDigits","src","iconSrc","alt","ticker","ExplorerLink","appContext","commonLangResources","handleCopyAddressClick","useCallback","navigator","clipboard","writeText","href","tezosExplorer","getEntityUrl","target","rel","showCopyButton","CopyOutlined","onClick","ExplorerLinkPure","memo","ExternalLink","NoServicesCreated","servicesLangResources","history","useHistory","handleCreateServiceClick","NoServicesCreatedPure","ViewTitle","createElement","defaultProps","View","useEffect","document","Title","OperationCountChart","month","xField","yField","height","meta","alias","paragraph","rows","OperationCountChartPure","VolumeChart","quarter","sum","smooth","VolumeChartPure","selectBalancesState","balancesState","Balances","acceptTezos","items","BalancesPure","Incoming","IncomingPure","Outgoing","OutgoingPure","Overview","langResources","overviewLangResources","size","OverviewPure","getSortedOperations","operationsState","OperationIcon","operationsLangResources","isIncoming","direction","Cancelled","ArrowRightOutlined","ArrowLeftOutlined","Pending","ClockCircleTwoTone","ExclamationCircleFilled","OperationIconPure","OperationList","getShortHash","substr","accountAddress","amountClassNames","serviceLink","toFormat","colSpan","NoOperationsPerformed","NoOperationsPerformedPure","Operations","operationProps","publicPayloadExists","public","sender","OperationsPure","NewServiceCard","handleCardClick","bodyStyle","padding","PlusOutlined","NewServiceCardPure","ActiveTag","isUpdating","SyncOutlined","spin","CloseCircleOutlined","PauseCircleOutlined","CheckCircleOutlined","ActiveTagPure","CustomTag","CustomTagPure","ServiceCard","tagName","toLowerCase","logoClassName","getAvatarText","ServiceCardPure","Services","servicesCards","has","ServicesPure","ActionsZone","readOnly","handleAcceptPaymentsClick","disabled","ActionsZonePure","DangerZone","dangerZoneLangResources","handlePauseModalOkClick","handleDeleteModalOkClick","confirm","isDanger","onOk","Modal","content","okText","okType","cancelText","centered","transitionName","maskTransitionName","handlePauseClick","handleDeleteClick","danger","DangerZonePure","Search","Input","algorithmOptions","values","v","label","AddApiKeyModal","algorithmType","setAlgorithmType","useState","Ed25519","handleAlgorithmTypeChanges","setName","handleNameChanged","getKeys","publicKeyRef","useRef","secretKeyRef","handleCopyClick","ref","input","current","select","handleAddKeyConfirm","onCancel","destroyOnClose","visible","footer","placement","onConfirm","autoFocus","onChange","Group","options","enterButton","onSearch","Text","mark","AddApiKeyModalPure","Secp256k1","P256","ApiKeyList","apiKeys","useMemo","handleRemoveItem","item","bordered","apiKey","DeleteOutlined","ApiKeyListPure","DevZone","addKeyModalVisible","setAddKeyModalVisible","handleAddKeyButtonClick","handleClosePopupClick","DevZonePure","Header","arePaymentsAllowed","All","areDonationsAllowed","handleEditClick","EditFilled","HeaderPure","_g","_extends","assign","arguments","source","prototype","hasOwnProperty","call","apply","SvgTelegram","titleId","svgRef","width","viewBox","xmlns","xmlnsXlink","stroke","strokeWidth","fill","fillRule","cx","cy","r","ForwardRef","iconIdMap","LinkOutlined","MailOutlined","Telegram","TelegramIcon","Facebook","FacebookOutlined","Twitter","TwitterOutlined","Instagram","InstagramOutlined","GitHub","GithubOutlined","Reddit","RedditOutlined","serviceLinkHelper","ServiceLink","Icon","ServiceLinks","Boolean","ServiceLinkEditor","handleChange","onDelete","ServiceLinksEditor","handleDelete","splice","handleAdd","editors","l","Tokens","tokenItems","TokensPure","ServiceEditForm","handleCancelClick","isFormValid","setIsFormValid","setDescription","setLinks","isValid","every","handleNameChange","handleDescriptionChange","handleLinksChange","setAcceptPayments","setAcceptDonations","handleAcceptPaymentsChange","checked","handleDonationsPaymentsChange","handleUpdateClick","updatedService","isCreateMode","placeholder","TextArea","ServiceEditFormPure","ViewZone","ViewZonePure","ServiceViewMode","Service","isEdit","URLSearchParams","useLocation","search","useParams","isInitialized","mode","Create","ServicePure","About","aboutLangResources","tezosPayments","webSite","GlobalOutlined","gitHub","GithubFilled","telegram","twitter","TwitterCircleFilled","reddit","RedditCircleFilled","AboutPure","ConnectDropdown","handleConnectButtonClick","handleMenuItemButtonClick","selectedNetwork","n","connectLangResources","connectMenuItems","style","backgroundColor","color","connectMenu","connectButtonTitle","Button","overlay","ConnectDropdownPure","Connect","ConnectPure","PaymentAmount","imageUrl","Option","min","PaymentAmountPure","AcceptPaymentsSettings","acceptPaymentsLangResources","serviceLangResources","operationsByService","serviceOptions","typeOptions","onServiceAddressChange","optionType","buttonStyle","paymentType","onPaymentTypeChange","onAmountChange","onPublicDataChange","onDonationDataChange","showCount","defaultNetworkName","paymentAppBaseUrl","getErrorMessageByValidationErrors","validationErrors","brief","index","TezosPaymentsError","message","super","InvalidTezosPaymentsOptionsError","messageOrValidationErrors","InvalidPaymentCreateParametersError","InvalidPaymentError","UnsupportedPaymentUrlTypeError","PaymentUrlError","DonationUrlError","PaymentUrlFactory","urlType","Base64PaymentUrlFactory","baseUrl","createPaymentUrl","paymentOrDonation","createPaymentUrlInternal","createDonationUrlInternal","paymentSerializer","createUrl","donationSerializer","native","isPayment","paymentUrlType","serializedPaymentOrDonationBase64","getEncodedPaymentUrlType","constants","SigningType","TezosPaymentsSigner","signingType","ApiSecretKeySigner","apiSecretKey","_payment","WalletSigner","walletSigning","CustomSigner","customSigning","TezosPayments","validateOptions","createSigner","defaultPaymentParameters","createParameters","validateDefaultPaymentParameters","paymentWithoutUrl","createPaymentByCreateParameters","paymentValidator","paymentUrl","getPaymentUrl","applyPaymentUrl","getPaymentUrlFactory","paymentUrlFactory","paymentUrlFactories","createPaymentUrlFactory","signingOptions","nanoid","validateServiceContractAddress","validateSigningOptions","currentErrors","Base64","invalidServiceContractAddressType","serviceContractAddressHasInvalidLength","serviceContractAddressIsNotContractAddress","invalidSigningOption","invalidApiSecretKeyType","emptyApiSecretKey","invalidWalletSigningOptionType","invalidDefaultPaymentParameters","emptyNetworkName","invalidNetwork","invalidNetworkName","invalidNetworkId","invalidUrlType","internal","signers","base64PaymentUrlFactory","tezosPaymentsInternal","paymentsApp","DirectLinkGenerator","getPaymentLink","defaultNetwork","helpText","DirectLinkGeneratorPure","FailedValidationResult","_props","Generator","tabList","tab","activeTabKey","results","GeneratorPure","AcceptPayments","addressFromUrl","setServiceAddress","setPaymentType","setAmount","setPublicData","setDonationData","handleServiceAddressChange","handlePaymentTypeChange","handleAmountChange","rawValue","handlePublicDataChange","handleDonationDataChange","AcceptPaymentsPure","Account","AccountNetworkGroup","AccountNetworkGroupPure","AccountDropDown","actionsLangResources","accountsByNetwork","currentAccountAddress","currentNetworkConfig","currentExplorer","explorers","default","explorer","handleViewOnExplorerClick","window","getAccountUrl","handleDisconnectButtonClick","keys","k","ItemGroup","UserOutlined","blue","primary","menu","Divider","LoginOutlined","LogoutOutlined","borderColor","getShortAddress","AccountDropDownPure","NavBar","viewsLangResources","selectedKeys","DashboardOutlined","UnorderedListOutlined","ProfileOutlined","SettingOutlined","InfoCircleOutlined","NavBarPure","Notifications","confirmations","duration","NotificationsPure","App","exact","path","template","ViewAndEdit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","appReducer","combineReducers","reducer","enableMapSet","webApp","storeFactory","store","reactAppContext","tezosWallet","BeaconWallet","colorMode","ColorMode","LIGHT","_network","_tezosToolkit","_services","onStoreChangedListener","onStoreChanged","bind","unsubscribeStoreChanged","createHistory","applyNetwork","createReactAppContext","getNetworkError","appState","createBrowserHistory","createTezosBlockchainUrlExplorer","networkConfig","TezosToolkit","rpcUrls","rpc","setSignerProvider","setWalletProvider","createServicesProvider","client","indexer","TzKTDataProvider","indexerUrls","BetterCallDevDataProvider","betterCallDev","TzKTBlockchainUrlExplorer","TzStatsBlockchainUrlExplorer","tzStats","BetterCallDevBlockchainUrlExplorer","configureStore","devTools","middleware","getDefaultMiddleware","thunk","extraArgument","serializableCheck","isSerializable","isPlain","isBigNumber","getEntries","entries","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.7acaa706.chunk.js","sourcesContent":["import { MichelsonMap, TezosToolkit, TransactionWalletOperation, Wallet } from '@taquito/taquito';\n\nimport type { Service, ServiceOperation, ServiceSigningKey } from '@tezospayments/common';\nimport type { ServicesProvider, TezosPaymentsFactoryImplementationContract, TezosPaymentsServiceContract } from '@tezospayments/react-web-core';\n\nimport type { Account } from '../models/blockchain';\nimport type { ServiceFactoryStorage } from '../models/contracts';\n\nexport class ServicesService {\n  constructor(\n    private readonly tezosToolkit: TezosToolkit,\n    private readonly servicesProvider: ServicesProvider,\n    private readonly servicesFactoryContractAddress: string\n  ) {\n  }\n\n  async getServices(account: Account): Promise<readonly Service[]> {\n    return this.servicesProvider.getServices(account.address);\n  }\n\n  async getService(serviceContractAddress: string): Promise<Service> {\n    return this.servicesProvider.getService(serviceContractAddress);\n  }\n\n  async getOperations(serviceContractAddress: string): Promise<readonly ServiceOperation[]> {\n    return this.servicesProvider.getOperations(serviceContractAddress);\n  }\n\n  async updateService(service: Service): Promise<TransactionWalletOperation> {\n    const serviceContract = await this.getServiceContract(service.contractAddress);\n    const encodedServiceMetadata = this.encodeMetadata(service);\n    return await serviceContract.methods.update_service_parameters(\n      encodedServiceMetadata,\n      service.allowedTokens.tez,\n      service.allowedTokens.assets,\n      service.allowedOperationType\n    ).send();\n  }\n\n  async setPaused(service: Service, paused: boolean): Promise<TransactionWalletOperation> {\n    const serviceContract = await this.getServiceContract(service.contractAddress);\n    return await serviceContract.methods.set_pause(paused).send();\n  }\n\n  async setDeleted(service: Service, deleted: boolean): Promise<TransactionWalletOperation> {\n    const serviceContract = await this.getServiceContract(service.contractAddress);\n    return await serviceContract.methods.set_deleted(deleted).send();\n  }\n\n  async createService(service: Service): Promise<TransactionWalletOperation> {\n    const factoryContract = await this.tezosToolkit.contract.at(this.servicesFactoryContractAddress);\n    const factoryStorage = await factoryContract.storage<ServiceFactoryStorage>();\n    const factoryImplementationContract = await this.getFactoryImplementationContract(factoryStorage.factory_implementation);\n\n    const encodedServiceMetadata = this.encodeMetadata(service);\n\n    return await factoryImplementationContract.methods.create_service(\n      encodedServiceMetadata,\n      service.allowedTokens.tez,\n      service.allowedTokens.assets,\n      service.allowedOperationType,\n      new MichelsonMap()\n    ).send();\n  }\n\n  addApiKey(service: Service, signingKey: ServiceSigningKey): Promise<TransactionWalletOperation> {\n    const signingKeyUpdatesMap = new MichelsonMap<string, { public_key: string, name?: string }>();\n    signingKeyUpdatesMap.set(signingKey.publicKey, { public_key: signingKey.publicKey, name: signingKey.name });\n\n    return this.updateSigningKeys(service, signingKeyUpdatesMap);\n  }\n\n  deleteApiKey(service: Service, publicKey: ServiceSigningKey['publicKey']): Promise<TransactionWalletOperation> {\n    const signingKeyUpdatesMap = new MichelsonMap<string, undefined>();\n    signingKeyUpdatesMap.set(publicKey, undefined);\n\n    return this.updateSigningKeys(service, signingKeyUpdatesMap);\n  }\n\n  private async updateSigningKeys(\n    service: Service,\n    signingKeyUpdatesMap: MichelsonMap<string, { public_key: string, name?: string } | undefined>\n  ): Promise<TransactionWalletOperation> {\n    const serviceContract = await this.getServiceContract(service.contractAddress);\n    return await serviceContract.methods.update_signing_keys(signingKeyUpdatesMap).send();\n  }\n\n  private encodeMetadata(service: Service): string {\n    const serviceMetadata = {\n      name: service.name || undefined,\n      links: service.links.length ? service.links : undefined,\n      description: service.description || undefined,\n      iconUrl: service.iconUrl || undefined\n    };\n\n    return Buffer.from(JSON.stringify(serviceMetadata), 'utf8').toString('hex');\n  }\n\n  private async getServiceContract(contractAddress: string): Promise<TezosPaymentsServiceContract<Wallet>> {\n    return await this.tezosToolkit.wallet.at<TezosPaymentsServiceContract<Wallet>>(contractAddress);\n  }\n\n  private async getFactoryImplementationContract(contractAddress: string): Promise<TezosPaymentsFactoryImplementationContract<Wallet>> {\n    return await this.tezosToolkit.wallet.at<TezosPaymentsFactoryImplementationContract<Wallet>>(contractAddress);\n  }\n}\n","import { Buffer } from 'buffer';\n\ntype ValidBase64Format = 'base64' | 'base64url';\n\n// Node.js < 15\nconst isBase64UrlFormatSupported = Buffer.isEncoding('base64url');\n\nexport const decode = (base64String: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (!isBase64UrlFormatSupported) {\n    format = 'base64';\n    base64String = base64UrlPreprocessor.prepareValueForDecoding(base64String);\n  }\n\n  return Buffer.from(base64String, format).toString('utf8');\n};\n\nexport const encode = (value: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (isBase64UrlFormatSupported)\n    return Buffer.from(value, 'utf8').toString(format);\n\n  const encodedValue = Buffer.from(value, 'utf8').toString('base64');\n  return base64UrlPreprocessor.prepareEncodedValue(encodedValue);\n};\n\nconst base64UrlPreprocessor = {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  prepareEncodedValue: (base64value: string) => base64value\n    .split('=')[0]!\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_'),\n\n  prepareValueForDecoding: (base64value: string) => {\n    base64value = base64value\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n\n    switch (base64value.length % 4) {\n      case 0: return base64value;\n      case 2: return base64value + '==';\n      case 3: return base64value + '=';\n      default:\n        throw new Error('Invalid base64url value');\n    }\n  }\n};\n","import { Buffer } from 'buffer';\n\nexport const stringToUint8Array = (hex: string): Uint8Array => {\n  const integers = hex.match(/[\\da-f]{2}/gi)?.map(val => parseInt(val, 16));\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return new Uint8Array(integers!);\n};\n\nexport const stringToBytes = (value: string): string => Buffer.from(value, 'utf8').toString('hex');\nexport const bytesToString = (value: string): string => Buffer.from(stringToUint8Array(value)).toString('utf8');\n\nexport const objectToBytes = (value: Record<string, unknown>): string => stringToBytes(JSON.stringify(value));\nexport const bytesToObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: string): T | null => {\n  try {\n    return JSON.parse(bytesToString(value));\n  }\n  catch {\n    return null;\n  }\n};\n\nexport function tezToMutez(tez: number): number;\nexport function tezToMutez(tez: bigint): bigint;\nexport function tezToMutez(tez: bigint | number): bigint | number {\n  return typeof tez === 'number'\n    ? tez * 1000000\n    : tez * BigInt(1000000);\n}\n","import isPlainObjectLodashFunction from 'lodash.isplainobject';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isArray = (arg: any): arg is any[] => {\n  return Array.isArray(arg);\n};\n\nexport const isReadonlyArray = (arg: unknown): arg is readonly unknown[] => {\n  return Array.isArray(arg);\n};\n\nexport const isPlainObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: unknown): value is T => {\n  return isPlainObjectLodashFunction(value);\n};\n","const defaultEqualityCheck = <T>(a: T, b: T) => a === b;\n\nconst areArgumentsShallowlyEqual = <T extends IArguments | null>(equalityCheck: (a: T, b: T) => boolean, prev: T, next: T) => {\n    if (prev === null || next === null || prev.length !== next.length) {\n        return false;\n    }\n\n    // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n    const length = prev.length;\n    for (let i = 0; i < length; i++) {\n        if (!equalityCheck(prev[i], next[i])) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/* eslint-disable prefer-rest-params  */\n/* eslint-disable prefer-spread */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const memoize = <TF extends (...args: any) => any>(func: TF, equalityCheck = defaultEqualityCheck): TF => {\n    let lastArgs: IArguments | null = null;\n    let lastResult: unknown = null;\n\n    return (function () {\n        if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n            // apply arguments instead of spreading for performance.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            lastResult = func.apply(null, arguments as any);\n        }\n\n        lastArgs = arguments;\n        return lastResult;\n    } as TF);\n};\n/* eslint-enable prefer-spread */\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/no-explicit-any */\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst emptyArray: any[] = [];\nconst emptyObject = {};\nconst emptyMap = new Map();\nconst emptySet: Set<any> = new Set();\n\nexport default {\n    emptyArray,\n    emptyMap,\n    emptySet,\n    emptyObject\n};\n","export const capitalize = (value: string): string => value && (value[0]?.toLocaleUpperCase() + value.slice(1));\n\nexport const getAvatarText = (value: string, maxLength = 2) => {\n  if (!value || !maxLength)\n    return '';\n\n  let result = '';\n\n  for (let i = 0, j = 0, isWord = false; i < value.length; i++) {\n    if (!isWord && value[i] !== ' ') {\n      isWord = true;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      result += value[i]!;\n\n      if (++j === maxLength)\n        return result;\n    }\n    else if (isWord && value[i] === ' ') {\n      isWord = false;\n    }\n  }\n\n  return result;\n};\n\nconst stringPad = (string: string, isStart: boolean, maxLength: number, fillString = ' ') => {\n  if (String.prototype.padStart !== undefined)\n    return string.padStart(maxLength, fillString);\n\n  const stringLength = string.length;\n  // eslint-disable-next-line eqeqeq\n  if (maxLength <= stringLength || fillString == '')\n    return string;\n\n  const fillLength = maxLength - stringLength;\n  let filler = fillString.repeat(Math.ceil(fillLength / fillString.length));\n\n  if (filler.length > fillLength)\n    filler = filler.slice(0, fillLength);\n\n  return isStart ? filler + string : string + filler;\n};\n\nexport const padStart = (string: string, maxLength: number, fillString = ' ') => String.prototype.padStart !== undefined\n  ? string.padStart(maxLength, fillString)\n  : stringPad(string, true, maxLength, fillString);\n\nexport const padEnd = (string: string, maxLength: number, fillString = ' ') => String.prototype.padEnd !== undefined\n  ? string.padEnd(maxLength, fillString)\n  : stringPad(string, false, maxLength, fillString);\n","import combineClassNames from 'clsx';\n\nimport * as base64 from './base64';\nimport * as converters from './converters';\nimport * as guards from './guards';\nimport { memoize } from './memoize';\nimport optimization from './optimization';\nimport shallowEqual from './shallowEqual';\nimport * as text from './text';\n\nconst wait = (ms: number) => new Promise<void>(resolve => setTimeout(resolve, ms));\n\nexport {\n  wait,\n  combineClassNames,\n  memoize,\n  shallowEqual,\n  base64,\n  optimization,\n  guards,\n  text,\n  converters\n};\n","import { memoize } from '../utils';\n\nexport enum IconId {\n  Common = 0,\n  Email = 1,\n  Telegram = 2,\n  Facebook = 3,\n  Twitter = 4,\n  Instagram = 5,\n  GitHub = 6,\n  Reddit = 7\n}\n\ninterface LinkInfo {\n  readonly rawLink: string;\n  readonly formattedLink: string;\n  readonly displayLink: string;\n  readonly icon: IconId;\n}\n\nconst getInvalidLinkInfo = (link: string): LinkInfo => ({\n  rawLink: link,\n  formattedLink: '#',\n  displayLink: 'Invalid Link',\n  icon: IconId.Common\n});\n\ntype LinkInfoProvider = (link: string) => LinkInfo | false;\n\nconst prepareFormattedLink = memoize((link: string) => link.trim());\nconst prepareDisplayLink = memoize((link: string) => link.trim().replace(/\\/$/, ''));\n\nconst socialMediaLinkInfoProvider = (link: string, baseUrl: string, icon: IconId): LinkInfo | false => {\n  if (!link.startsWith(baseUrl))\n    return false;\n\n  const formattedLink = prepareFormattedLink(link);\n  if (formattedLink === baseUrl)\n    return false;\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link).replace(baseUrl, ''),\n    icon\n  };\n};\n\nconst telegramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://t.me/', IconId.Telegram);\nconst facebookLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://facebook.com/', IconId.Facebook);\nconst twitterLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://twitter.com/', IconId.Twitter);\nconst instagramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://instagram.com/', IconId.Instagram);\nconst gitHubLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://github.com/', IconId.GitHub);\nconst redditLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://www.reddit.com/', IconId.Reddit);\n\n// This regex should not use for email validation\nconst emailCheckingRegEx = /^[^\\s/@]+@[^\\s@/]+$/;\nconst emailLinkInfoProvider: LinkInfoProvider = link => {\n  const preparedFormattedLink = prepareFormattedLink(link);\n\n  return emailCheckingRegEx.test(preparedFormattedLink) && {\n    rawLink: link,\n    formattedLink: `mailto:${preparedFormattedLink}`,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Email\n  };\n};\n\nconst javascriptLinkInfoProvider: LinkInfoProvider = link => link.startsWith('javascript') ? getInvalidLinkInfo(link) : false;\n\n// https://datatracker.ietf.org/doc/html/rfc3986#section-3.1\nconst urlSchemeRegEx = /^([a-z][a-z0-9+\\-.]*):/;\nconst commonLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return urlSchemeRegEx.test(formattedLink) && {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nconst editLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nexport class ServiceLinkHelper {\n  // Order is important\n  static readonly linkInfoProviders: readonly LinkInfoProvider[] = [\n    // Disallowed\n    javascriptLinkInfoProvider,\n    // Allowed\n    telegramLinkInfoProvider,\n    facebookLinkInfoProvider,\n    twitterLinkInfoProvider,\n    instagramLinkInfoProvider,\n    gitHubLinkInfoProvider,\n    emailLinkInfoProvider,\n    redditLinkInfoProvider,\n    commonLinkInfoProvider\n  ];\n\n  getLinkInfo(link: string, isEditMode = false): LinkInfo | null {\n    for (const provider of ServiceLinkHelper.linkInfoProviders) {\n      const linkInfo = provider(link);\n\n      if (linkInfo)\n        return this.linkInfoIsValid(linkInfo) ? linkInfo : null;\n    }\n\n    if (isEditMode)\n      return editLinkInfoProvider(link) as LinkInfo;\n\n    return null;\n  }\n\n  linkInfoIsValid(linkInfo: LinkInfo) {\n    return linkInfo.formattedLink !== '#';\n  }\n}\n","export enum PaymentType {\n  Payment = 1,\n  Donation = 2\n}\n\nexport interface PaymentBase {\n  readonly type: PaymentType;\n  readonly targetAddress: string;\n}\n","import { PaymentBase } from '../../models/payment/paymentBase';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { guards } from '../../utils';\nimport { PaymentValidationMethod } from './paymentValidationMethod';\n\nexport abstract class PaymentValidatorBase<TPayment extends PaymentBase> {\n  protected readonly abstract validationMethods: ReadonlyArray<PaymentValidationMethod<TPayment>>;\n  protected readonly abstract invalidPaymentObjectError: string;\n\n  validate(payment: TPayment, bail = false): FailedValidationResults {\n    if (!guards.isPlainObject(payment))\n      return [this.invalidPaymentObjectError];\n\n    let failedValidationResults: FailedValidationResults;\n    for (const validationMethod of this.validationMethods) {\n      const currentFailedValidationResults = validationMethod(payment);\n      if (currentFailedValidationResults) {\n        if (!bail)\n          return currentFailedValidationResults;\n\n        failedValidationResults = (failedValidationResults || []).concat(currentFailedValidationResults);\n      }\n    }\n\n    return failedValidationResults;\n  }\n}\n","const networksInternal = {\n  // mainnet: {\n  //   id: 'NetXdQprcVkpaWU',\n  //   name: 'mainnet',\n  // },\n  granadanet: {\n    id: 'NetXz969SFaFn8k',\n    name: 'granadanet',\n  },\n} as const;\n\ninterface NetworkInternal {\n  readonly id: string;\n  readonly name: string;\n}\n\ntype Networks = {\n  readonly [P in keyof typeof networksInternal]: (typeof networksInternal)[P] extends NetworkInternal & {\n    readonly name: P;\n  }\n  ? (typeof networksInternal)[P]\n  : never\n};\n\nexport type Network = Networks[keyof Networks];\nexport interface CustomNetwork {\n  readonly id?: string;\n  readonly name: string;\n}\n\nexport const networks: Networks = networksInternal;\nexport const networksCollection = Object.values(networksInternal);\n\nexport const networkIdRegExp = /^[a-zA-Z]\\w*$/;\nexport const networkNameRegExp = networkIdRegExp;\n","import { Network, networks } from './network';\n\ninterface TokenBase {\n  readonly network: Network;\n  readonly contractAddress: string;\n  readonly metadata?: TokenMetadata;\n}\n\nexport interface TokenFA12 extends TokenBase {\n  readonly type: 'fa1.2';\n}\n\nexport interface TokenFA2 extends TokenBase {\n  readonly type: 'fa2';\n  readonly fa2TokenId: number;\n}\n\nexport type Token = TokenFA12 | TokenFA2;\n\nexport type TokenMetadata = {\n  readonly decimals: number;\n  readonly symbol: string;\n  readonly name: string;\n  readonly thumbnailUri: string;\n};\n\nexport const tezosMeta: TokenMetadata = {\n  symbol: 'XTZ',\n  name: 'Tezos',\n  decimals: 6,\n  thumbnailUri: 'https://dashboard.tezospayments.com/tokens/tezos.png'\n};\n\nexport const tokenWhitelist: readonly Token[] = [\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa1.2',\n  //   contractAddress: 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV',\n  //   metadata: {\n  //     decimals: 18,\n  //     symbol: 'KUSD',\n  //     name: 'Kolibri',\n  //     thumbnailUri: 'https://kolibri-data.s3.amazonaws.com/logo.png',\n  //   },\n  // },\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa2',\n  //   contractAddress: 'KT1REEb5VxWRjcHm5GzDMwErMmNFftsE5Gpf',\n  //   fa2TokenId: 0,\n  //   metadata: {\n  //     decimals: 6,\n  //     symbol: 'USDS',\n  //     name: 'Stably USD',\n  //     thumbnailUri: 'https://quipuswap.com/tokens/stably.png',\n  //   },\n  // },\n  {\n    network: networks.granadanet,\n    type: 'fa1.2',\n    contractAddress: 'KT1KcuD9MmgZuGcptdD3qRqxXpGg4WxFsfVc',\n    metadata: {\n      decimals: 0,\n      symbol: 'fa12',\n      name: 'Test fa12',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  },\n  {\n    network: networks.granadanet,\n    type: 'fa2',\n    contractAddress: 'KT1BBfxboq63dbaKCAc4uwVKLFzVn1b4fy37',\n    fa2TokenId: 0,\n    metadata: {\n      decimals: 0,\n      symbol: 'fa20',\n      name: 'Test fa20',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  },\n];\n\nexport const tokenWhitelistMap: ReadonlyMap<Token['contractAddress'], Token> = new Map<Token['contractAddress'], Token>(\n  tokenWhitelist.map(token => [token.contractAddress, token])\n);\n","const contractAddressPrefixes = ['KT'] as const;\nconst implicitAddressPrefixes = ['tz1', 'tz2', 'tz3'] as const;\nconst addressPrefixes = [...contractAddressPrefixes, ...implicitAddressPrefixes] as const;\n\nexport const tezosInfo = {\n  addressLength: 36,\n  contractAddressPrefixes,\n  implicitAddressPrefixes,\n  addressPrefixes,\n} as const;\n","export enum KeyType {\n  Ed25519 = 'Ed25519',\n  Secp256k1 = 'Secp256k1',\n  P256 = 'P256'\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { URL as NodeURL } from 'url';\n\nexport type URL = NodeURL;\nexport const URL = NodeURL || (globalThis as any).URL;\n","import BigNumber from 'bignumber.js';\n\nimport { tezosInfo } from '../../models/blockchain';\nimport { Payment } from '../../models/payment';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { URL } from '../../native';\nimport { guards } from '../../utils';\n\ntype Errors<FieldNames extends string> = {\n  readonly [P in FieldNames]: string;\n};\n\nexport const validateTargetAddress = (\n  targetAddress: string,\n  errors: Errors<'invalidTargetAddress' | 'targetAddressHasInvalidLength' | 'targetAddressIsNotNetworkAddress'>\n): FailedValidationResults => {\n  if (typeof targetAddress !== 'string')\n    return [errors.invalidTargetAddress];\n\n  if (targetAddress.length !== tezosInfo.addressLength)\n    return [errors.targetAddressHasInvalidLength];\n\n  if (!tezosInfo.addressPrefixes.some(prefix => targetAddress.startsWith(prefix)))\n    return [errors.targetAddressIsNotNetworkAddress];\n};\n\nexport const validateId = (\n  id: string,\n  errors: Errors<'invalidId' | 'emptyId'>\n): FailedValidationResults => {\n  if (typeof id !== 'string')\n    return [errors.invalidId];\n\n  if (id === '')\n    return [errors.emptyId];\n};\n\nexport const validateAmount = (\n  amount: BigNumber,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  if (!BigNumber.isBigNumber(amount) || amount.isNaN() || !amount.isFinite())\n    return [errors.invalidAmount];\n\n  if (amount.isZero() || amount.isNegative())\n    return [errors.amountIsNonPositive];\n};\n\nexport const validateDesiredAmount = (\n  desiredAmount: BigNumber | undefined,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  return desiredAmount === undefined ? undefined : validateAmount(desiredAmount, errors);\n};\n\nexport const validateAsset = (\n  asset: string | undefined,\n  errors: Errors<'invalidAsset' | 'assetHasInvalidLength' | 'assetIsNotContractAddress'>\n): FailedValidationResults => {\n  if (asset === undefined)\n    return;\n\n  if (typeof asset !== 'string')\n    return [errors.invalidAsset];\n\n  if (asset.length !== tezosInfo.addressLength)\n    return [errors.assetHasInvalidLength];\n\n  if (!tezosInfo.contractAddressPrefixes.some(prefix => asset.startsWith(prefix)))\n    return [errors.assetIsNotContractAddress];\n};\n\nexport const validateCreatedDate = (\n  date: Date,\n  errors: Errors<'invalidCreatedDate'>\n): FailedValidationResults => {\n  if (!(date instanceof Date) || isNaN(date.getTime()))\n    return [errors.invalidCreatedDate];\n};\n\nexport const validateUrl = (\n  url: URL | undefined,\n  errors: Errors<'invalidUrl' | 'invalidProtocol'>\n): FailedValidationResults => {\n  if (url === undefined)\n    return;\n\n  if (!(url instanceof URL))\n    return [errors.invalidUrl];\n\n  if (url.protocol.indexOf('javascript') > -1)\n    return [errors.invalidProtocol];\n};\n\nexport const validateExpiredDate = (\n  expiredDate: Date | undefined,\n  createdDate: Date,\n  minimumPaymentLifetime: number,\n  errors: Errors<'invalidExpiredDate' | 'paymentLifetimeIsShort'>\n): FailedValidationResults => {\n  if (expiredDate === undefined)\n    return;\n\n  if (!(expiredDate instanceof Date) || isNaN(expiredDate.getTime()))\n    return [errors.invalidExpiredDate];\n\n  if (expiredDate.getTime() - createdDate.getTime() < minimumPaymentLifetime) {\n    return [errors.paymentLifetimeIsShort];\n  }\n};\n\nexport const validateData = (\n  data: Payment['data'],\n  errors: Errors<'invalidData' | 'invalidPublicData' | 'publicDataShouldBeFlat' | 'invalidPrivateData' | 'privateDataShouldBeFlat'>\n): FailedValidationResults => {\n  if (!guards.isPlainObject(data) || Object.keys(data).some(key => key !== 'public' && key !== 'private'))\n    return [errors.invalidData];\n\n  const publicData = (data as Exclude<Payment['data'], { private: unknown }>).public;\n  const privateData = (data as Exclude<Payment['data'], { public: unknown }>).private;\n  if (!(publicData || privateData))\n    return [errors.invalidData];\n\n  if (publicData !== undefined) {\n    if (!guards.isPlainObject(publicData))\n      return [errors.invalidPublicData];\n    if (!isFlatObject(publicData))\n      return [errors.publicDataShouldBeFlat];\n  }\n\n  if (privateData !== undefined) {\n    if (!guards.isPlainObject(privateData))\n      return [errors.invalidPrivateData];\n    if (!isFlatObject(privateData))\n      return [errors.privateDataShouldBeFlat];\n  }\n};\n\nconst isFlatObject = (obj: Record<string, unknown>) => {\n  for (const propertyName of Object.getOwnPropertyNames(obj)) {\n    const property = obj[propertyName];\n    if (typeof property === 'object' || typeof property === 'function')\n      return false;\n  }\n\n  return true;\n};\n","import type { Payment } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport {\n  validateTargetAddress, validateId, validateAmount, validateData, validateAsset,\n  validateCreatedDate, validateExpiredDate, validateUrl\n} from './validationMethods';\n\nexport class PaymentValidator extends PaymentValidatorBase<Payment> {\n  static readonly errors = {\n    invalidPaymentObject: 'Payment is undefined or not object',\n    invalidType: 'Payment type is invalid',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidId: 'Id is invalid',\n    emptyId: 'Id is empty',\n    invalidAmount: 'Amount is invalid',\n    amountIsNonPositive: 'Amount is less than or equal to zero',\n    invalidData: 'Payment data is invalid',\n    invalidPublicData: 'Payment public data is invalid',\n    invalidPrivateData: 'Payment private data is invalid',\n    publicDataShouldBeFlat: 'Public data should be flat',\n    privateDataShouldBeFlat: 'Private data should be flat',\n    invalidAsset: 'Asset address is invalid',\n    assetIsNotContractAddress: 'Asset address isn\\'t a contract address',\n    assetHasInvalidLength: 'Asset address has an invalid address',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol',\n    invalidCreatedDate: 'Created date is invalid',\n    invalidExpiredDate: 'Expired date is invalid',\n    paymentLifetimeIsShort: 'Payment lifetime is short'\n  } as const;\n  static readonly minimumPaymentLifetime = 600000; // 10 * 60 * 1000;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Payment>> = [\n    payment => payment.type !== PaymentType.Payment ? [PaymentValidator.errors.invalidType] : undefined,\n    payment => validateTargetAddress(payment.targetAddress, PaymentValidator.errors),\n    payment => validateId(payment.id, PaymentValidator.errors),\n    payment => validateAmount(payment.amount, PaymentValidator.errors),\n    payment => validateData(payment.data, PaymentValidator.errors),\n    payment => validateAsset(payment.asset, PaymentValidator.errors),\n    payment => validateUrl(payment.successUrl, PaymentValidator.successUrlErrors),\n    payment => validateUrl(payment.cancelUrl, PaymentValidator.cancelUrlErrors),\n    payment => validateCreatedDate(payment.created, PaymentValidator.errors),\n    payment => validateExpiredDate(payment.expired, payment.created, PaymentValidator.minimumPaymentLifetime, PaymentValidator.errors),\n  ];\n\n  protected readonly invalidPaymentObjectError = PaymentValidator.errors.invalidPaymentObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidSuccessUrl,\n    invalidProtocol: PaymentValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidCancelUrl,\n    invalidProtocol: PaymentValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","import type { Donation } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport { validateTargetAddress, validateDesiredAmount, validateAsset, validateUrl } from './validationMethods';\n\nexport class DonationValidator extends PaymentValidatorBase<Donation> {\n  static readonly errors = {\n    invalidDonationObject: 'Donation is undefined or not object',\n    invalidType: 'Donation type is invalid',\n    invalidAmount: 'Desired amount is invalid',\n    amountIsNonPositive: 'Desired amount is less than or equal to zero',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidAsset: 'Desired asset address is invalid',\n    assetIsNotContractAddress: 'Desired asset address isn\\'t a contract address',\n    assetHasInvalidLength: 'Desired asset address has an invalid address',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol'\n  } as const;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Donation>> = [\n    donation => donation.type !== PaymentType.Donation ? [DonationValidator.errors.invalidType] : undefined,\n    donation => validateTargetAddress(donation.targetAddress, DonationValidator.errors),\n    donation => validateDesiredAmount(donation.desiredAmount, DonationValidator.errors),\n    donation => validateAsset(donation.desiredAsset, DonationValidator.errors),\n    donation => validateUrl(donation.successUrl, DonationValidator.successUrlErrors),\n    donation => validateUrl(donation.cancelUrl, DonationValidator.cancelUrlErrors)\n  ];\n\n  protected readonly invalidPaymentObjectError = DonationValidator.errors.invalidDonationObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidSuccessUrl,\n    invalidProtocol: DonationValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidCancelUrl,\n    invalidProtocol: DonationValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","export abstract class StateModel {\n    protected constructor() {\n    // All derived classes should be static\n    }\n}\n","import { SerializedFieldType } from './serializedFieldType';\n\nexport class ObjectSerializationValidator<T extends Record<string | number, unknown>> {\n  private _minObjectFieldsCount: number | undefined;\n\n  constructor(\n    protected readonly objectFieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>\n  ) {\n  }\n\n  private get minObjectFieldsCount() {\n    if (!this._minObjectFieldsCount) {\n      let count = 0;\n      for (const info of this.objectFieldTypes) {\n        if (typeof info[1] === 'string' ? info[1] !== 'undefined' : info[1].every(type => type !== 'undefined'))\n          count++;\n      }\n\n      this._minObjectFieldsCount = count;\n    }\n\n    return this._minObjectFieldsCount;\n  }\n\n  private get maxObjectFieldsCount() {\n    return this.objectFieldTypes.size;\n  }\n\n  validate(value: T): value is T {\n    if (!value)\n      return false;\n\n    const fieldNames = Object.getOwnPropertyNames(value) as ReadonlyArray<keyof T>;\n\n    // Prevent the field checking if the deserializedValue has an invalid number of fields\n    if (fieldNames.length < this.minObjectFieldsCount || fieldNames.length > this.maxObjectFieldsCount)\n      return false;\n\n    for (const [fieldName, expectedFieldType] of this.objectFieldTypes) {\n      const fieldValue = value[fieldName];\n      const actualFieldType = fieldValue === null ? 'null' : typeof fieldValue;\n\n      if (Array.isArray(expectedFieldType)\n        ? !expectedFieldType.some(expectedType => actualFieldType === expectedType)\n        : actualFieldType !== expectedFieldType\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Serializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  serialize(value: T): string | null {\n    try {\n      if (!this.objectSerializationValidator.validate(value))\n        return null;\n\n      const jsonString = JSON.stringify(value);\n      return base64.encode(jsonString, 'base64url');\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Deserializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  deserialize(serializedValue: string): T | null {\n    try {\n      let value: T;\n\n      if (serializedValue) {\n        const serializedValueString = base64.decode(serializedValue, 'base64url');\n        value = JSON.parse(serializedValueString);\n      }\n      else\n        value = {} as T;\n\n      return this.objectSerializationValidator.validate(value)\n        ? value\n        : null;\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { LegacySerializedPayment, SerializedPayment } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nexport const serializedPaymentFieldTypes: ReadonlyMap<\n  keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  // id\n  .set('i', 'string')\n  // amount\n  .set('a', 'string')\n  // data\n  .set('d', 'object')\n  // asset\n  .set('as', ['string', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null'])\n  // created\n  .set('c', 'number')\n  // expired\n  .set('e', ['number', 'undefined', 'null']);\n\nexport const legacySerializedPaymentFieldTypes: ReadonlyMap<\n  keyof LegacySerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof LegacySerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  .set('amount', 'string')\n  .set('data', 'object')\n  .set('asset', ['string', 'undefined', 'null'])\n  .set('successUrl', ['string', 'undefined', 'null'])\n  .set('cancelUrl', ['string', 'undefined', 'null'])\n  .set('created', 'number')\n  .set('expired', ['number', 'undefined', 'null']);\n","import type { Payment, SerializedPayment } from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentSerializer {\n  protected static readonly serializedPaymentBase64Serializer = new Base64Serializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  serialize(payment: Payment): string | null {\n    try {\n      const serializedPayment = this.mapPaymentToSerializedPayment(payment);\n      return PaymentSerializer.serializedPaymentBase64Serializer.serialize(serializedPayment);\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapPaymentToSerializedPayment(payment: Payment): SerializedPayment {\n    return {\n      i: payment.id,\n      a: payment.amount.toString(),\n      d: payment.data,\n      as: payment.asset,\n      su: payment.successUrl?.toString(),\n      cu: payment.cancelUrl?.toString(),\n      c: payment.created.getTime(),\n      e: payment.expired?.getTime(),\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedPaymentSlice, Payment, SerializedPayment } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment | null {\n    try {\n      const serializedPayment = PaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment, nonSerializedPaymentSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: SerializedPayment, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment {\n    return {\n      type: PaymentType.Payment,\n      id: serializedPayment.i,\n      amount: new BigNumber(serializedPayment.a),\n      data: serializedPayment.d,\n      asset: serializedPayment.as,\n      successUrl: serializedPayment.su ? new URL(serializedPayment.su) : undefined,\n      cancelUrl: serializedPayment.cu ? new URL(serializedPayment.cu) : undefined,\n      created: new Date(serializedPayment.c),\n      expired: serializedPayment.e ? new Date(serializedPayment.e) : undefined,\n      targetAddress: nonSerializedPaymentSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedPaymentSlice, Payment, LegacySerializedPayment } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { legacySerializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class LegacyPaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<LegacySerializedPayment>(\n    legacySerializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment | null {\n    try {\n      const serializedPayment = LegacyPaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment, nonSerializedPaymentSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: LegacySerializedPayment, nonSerializedPaymentSlice: NonSerializedPaymentSlice): Payment {\n    return {\n      type: PaymentType.Payment,\n      id: 'legacy-payment',\n      amount: new BigNumber(serializedPayment.amount),\n      data: serializedPayment.data,\n      asset: serializedPayment.asset,\n      successUrl: serializedPayment.successUrl ? new URL(serializedPayment.successUrl) : undefined,\n      cancelUrl: serializedPayment.cancelUrl ? new URL(serializedPayment.cancelUrl) : undefined,\n      created: new Date(serializedPayment.created),\n      expired: serializedPayment.expired ? new Date(serializedPayment.expired) : undefined,\n      targetAddress: nonSerializedPaymentSlice.targetAddress\n    };\n  }\n}\n","import { LegacySerializedDonation, SerializedDonation } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nexport const serializedDonationFieldTypes: ReadonlyMap<\n  keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  // desiredAmount\n  .set('da', ['string', 'undefined', 'null'])\n  // desiredAsset\n  .set('das', ['string', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null']);\n\nexport const legacySerializedDonationFieldTypes: ReadonlyMap<\n  keyof LegacySerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof LegacySerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  .set('desiredAmount', ['string', 'undefined', 'null'])\n  .set('desiredAsset', ['string', 'undefined', 'null'])\n  .set('successUrl', ['string', 'undefined', 'null'])\n  .set('cancelUrl', ['string', 'undefined', 'null']);\n","import type { Donation, SerializedDonation } from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nconst serializedEmptyObjectBase64 = 'e30';\nexport class DonationSerializer {\n  protected static readonly serializedDonationBase64Serializer = new Base64Serializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  serialize(donation: Donation): string | null {\n    try {\n      const serializedDonation = this.mapDonationToSerializedDonation(donation);\n      const serializedDonationBase64 = DonationSerializer.serializedDonationBase64Serializer.serialize(serializedDonation);\n\n      return serializedDonationBase64 === serializedEmptyObjectBase64 ? '' : serializedDonationBase64;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapDonationToSerializedDonation(donation: Donation): SerializedDonation {\n    return {\n      da: donation.desiredAmount?.toString(),\n      das: donation.desiredAsset,\n      su: donation.successUrl?.toString(),\n      cu: donation.cancelUrl?.toString(),\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedDonationSlice, Donation, SerializedDonation } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class DonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = DonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: SerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      desiredAmount: serializedDonation.da ? new BigNumber(serializedDonation.da) : undefined,\n      desiredAsset: serializedDonation.das,\n      successUrl: serializedDonation.su ? new URL(serializedDonation.su) : undefined,\n      cancelUrl: serializedDonation.cu ? new URL(serializedDonation.cu) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type { NonSerializedDonationSlice, Donation, LegacySerializedDonation } from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { legacySerializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class LegacyDonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<LegacySerializedDonation>(\n    legacySerializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = LegacyDonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: LegacySerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      desiredAmount: serializedDonation.desiredAmount ? new BigNumber(serializedDonation.desiredAmount) : undefined,\n      desiredAsset: serializedDonation.desiredAsset,\n      successUrl: serializedDonation.successUrl ? new URL(serializedDonation.successUrl) : undefined,\n      cancelUrl: serializedDonation.cancelUrl ? new URL(serializedDonation.cancelUrl) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { PaymentValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { LegacyPaymentDeserializer, PaymentDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedPaymentSlice } from './serializedPayment';\n\ninterface PublicPaymentData {\n  readonly public: { readonly [fieldName: string]: unknown; };\n}\n\ninterface PrivatePaymentData {\n  readonly private: { readonly [fieldName: string]: unknown; };\n}\n\ntype PaymentData =\n  | PublicPaymentData\n  | PrivatePaymentData\n  | PublicPaymentData & PrivatePaymentData;\n\nexport interface Payment extends PaymentBase {\n  readonly type: PaymentType.Payment;\n  readonly id: string;\n  readonly amount: BigNumber;\n  readonly asset?: string;\n  readonly data: PaymentData;\n  readonly created: Date;\n  readonly expired?: Date;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n}\n\nexport class Payment extends StateModel {\n  static readonly defaultDeserializer: PaymentDeserializer = new PaymentDeserializer();\n  static readonly defaultLegacyDeserializer: LegacyPaymentDeserializer = new LegacyPaymentDeserializer();\n  static readonly defaultValidator: PaymentValidator = new PaymentValidator();\n\n  static validate(payment: Payment) {\n    return this.defaultValidator.validate(payment);\n  }\n\n  static deserialize(serializedPayment: string, nonSerializedPaymentSlice: NonSerializedPaymentSlice, isLegacy = false): Payment | null {\n    return !isLegacy\n      ? Payment.defaultDeserializer.deserialize(serializedPayment, nonSerializedPaymentSlice)\n      : Payment.defaultLegacyDeserializer.deserialize(serializedPayment, nonSerializedPaymentSlice);\n  }\n\n  static publicDataExists(payment: Payment): payment is Payment & { readonly data: PublicPaymentData };\n  static publicDataExists(paymentData: Payment['data']): paymentData is Payment['data'] & PublicPaymentData;\n  static publicDataExists(\n    paymentOrPaymentDataOrPaymentData: Payment | Payment['data']\n  ): paymentOrPaymentDataOrPaymentData is (Payment & { readonly data: PublicPaymentData }) | (Payment['data'] & PublicPaymentData) {\n    return this.publicDataExistsInternal(paymentOrPaymentDataOrPaymentData);\n  }\n\n  static privateDataExists(payment: Payment): payment is Payment & { readonly data: PrivatePaymentData } {\n    return !!(payment.data as PrivatePaymentData).private;\n  }\n\n  protected static publicDataExistsInternal(\n    paymentOrPaymentDataOrPaymentData: Payment | Payment['data']\n  ): paymentOrPaymentDataOrPaymentData is (Payment & { readonly data: PublicPaymentData }) | (Payment['data'] & PublicPaymentData) {\n    return !!(Payment.isPayment(paymentOrPaymentDataOrPaymentData)\n      ? (paymentOrPaymentDataOrPaymentData.data as PublicPaymentData).public\n      : (paymentOrPaymentDataOrPaymentData as PublicPaymentData).public\n    );\n  }\n\n  private static isPayment(paymentOrPaymentDataOrPaymentData: Payment | Payment['data']): paymentOrPaymentDataOrPaymentData is Payment {\n    return !!(paymentOrPaymentDataOrPaymentData as Payment).amount;\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { DonationValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { DonationDeserializer, LegacyDonationDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedDonationSlice } from './serializedDonation';\n\nexport interface Donation extends PaymentBase {\n  readonly type: PaymentType.Donation;\n  readonly desiredAmount?: BigNumber;\n  readonly desiredAsset?: string;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n}\n\nexport class Donation extends StateModel {\n  static readonly defaultDeserializer: DonationDeserializer = new DonationDeserializer();\n  static readonly defaultLegacyDeserializer: LegacyDonationDeserializer = new LegacyDonationDeserializer();\n  static readonly defaultValidator: DonationValidator = new DonationValidator();\n\n  static validate(donation: Donation) {\n    return this.defaultValidator.validate(donation);\n  }\n\n  static deserialize(serializedDonation: string, nonSerializedDonationSlice: NonSerializedDonationSlice, isLegacy = false): Donation | null {\n    return !isLegacy\n      ? Donation.defaultDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice)\n      : Donation.defaultLegacyDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice);\n  }\n}\n\n","import { text } from '../../utils';\n\nexport enum PaymentUrlType {\n  Base64 = 0\n}\n\nconst encodedPaymentUrlTypeMap = new Map<PaymentUrlType, string>(\n  Object.keys(PaymentUrlType)\n    .filter(value => !isNaN(+value))\n    .map(value => [+value, text.padStart(value, 2, '0')])\n);\n\nexport const getEncodedPaymentUrlType = (paymentUrlType: PaymentUrlType) => encodedPaymentUrlTypeMap.get(paymentUrlType) || '';\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ParameterizedRouteFactory = (...args: any[]) => string;\nexport type ParameterizedRoute<Factory extends ParameterizedRouteFactory> = Factory & {\n  readonly template: string;\n};\n\nexport const getParameterizedRoute = <Factory extends ParameterizedRouteFactory>(\n  factory: Factory, template: string\n): ParameterizedRoute<Factory> => {\n  (factory as Factory & { template: string }).template = template;\n\n  return factory as ParameterizedRoute<Factory>;\n};\n","export enum ServiceOperationType {\n  Payment = 1,\n  Donation = 2,\n\n  All = Payment | Donation\n}\n","import { optimization } from '../../utils';\nimport { Network, networks } from '../blockchain/network';\nimport { ServiceOperationType } from './serviceOperationType';\nimport { ServiceSigningKey } from './serviceSigningKey';\n\nexport interface Service {\n  readonly name: string;\n  readonly links: readonly string[];\n  readonly description?: string;\n  readonly iconUrl?: string;\n  readonly version: number;\n  readonly metadata: string;\n\n  readonly contractAddress: string;\n  readonly network: Network;\n  readonly allowedTokens: {\n    readonly tez: boolean;\n    readonly assets: readonly string[];\n  }\n  readonly allowedOperationType: ServiceOperationType;\n\n  readonly owner: string;\n  readonly paused: boolean;\n  readonly deleted: boolean;\n  readonly signingKeys: ReadonlyMap<ServiceSigningKey['publicKey'], ServiceSigningKey>;\n}\n\nexport const emptyService: Service = {\n  name: '',\n  description: '',\n  links: optimization.emptyArray,\n  version: 0,\n  metadata: '',\n  contractAddress: '',\n  allowedTokens: {\n    tez: true,\n    assets: optimization.emptyArray\n  },\n  allowedOperationType: ServiceOperationType.Payment,\n  owner: '',\n  paused: false,\n  deleted: false,\n  network: networks.granadanet,\n  signingKeys: optimization.emptyMap\n};\n","import BigNumber from 'bignumber.js';\n\nimport { converters } from '../../utils';\nimport { StateModel } from '../core';\nimport { ServiceOperationDirection } from './serviceOperationDirection';\nimport { ServiceOperationStatus } from './serviceOperationStatus';\nimport { ServiceOperationType } from './serviceOperationType';\n\ninterface ServiceOperationPayloadData {\n  readonly value: { readonly [fieldName: string]: unknown; } | null;\n  readonly valueString: string;\n  readonly encodedValue: string;\n}\n\ninterface PublicServiceOperationPayload {\n  readonly public: ServiceOperationPayloadData;\n}\n\ninterface PrivateServiceOperationPayload {\n  readonly private: ServiceOperationPayloadData;\n}\n\ntype ServiceOperationPayload =\n  | PublicServiceOperationPayload\n  | PrivateServiceOperationPayload\n  | PublicServiceOperationPayload & PrivateServiceOperationPayload;\n\nexport interface ServiceOperation {\n  readonly hash: string;\n  readonly type: ServiceOperationType;\n  readonly direction: ServiceOperationDirection;\n  readonly status: ServiceOperationStatus;\n  readonly amount: BigNumber;\n  readonly payload: ServiceOperationPayload;\n  readonly asset?: string;\n  readonly timestamp: string;\n  readonly date: Date;\n  readonly sender: string;\n  readonly target: string;\n}\n\nexport class ServiceOperation extends StateModel {\n  static publicPayloadExists(operation: ServiceOperation): operation is ServiceOperation & { readonly payload: PublicServiceOperationPayload } {\n    return !!(operation.payload as PublicServiceOperationPayload).public;\n  }\n\n  static privatePayloadExists(operation: ServiceOperation): operation is ServiceOperation & { readonly payload: PrivateServiceOperationPayload } {\n    return !!(operation.payload as PrivateServiceOperationPayload).private;\n  }\n\n  static isPayloadDecoded(\n    data: ServiceOperationPayloadData\n  ): data is ServiceOperationPayloadData & { readonly value: NonNullable<ServiceOperationPayloadData['value']> } {\n    return !!data.value;\n  }\n\n  static parseServiceOperationPayload(encodedValue: string): ServiceOperationPayloadData {\n    const valueString = converters.bytesToString(encodedValue);\n\n    let value: ServiceOperationPayloadData['value'] = null;\n    try { value = JSON.parse(valueString); } catch { /**/ }\n\n    return {\n      value,\n      valueString,\n      encodedValue,\n    };\n  }\n}\n","export enum ServiceOperationDirection {\n  Incoming = 0,\n  Outgoing = 1\n}\n","export enum ServiceOperationStatus {\n  Pending = 0,\n  Success = 1,\n  Cancelled = 2\n}\n","export const defaultConfig = {\n    links: {\n        tezosPayments: {\n            webSite: 'https://tezospayments.com',\n            paymentsApp: 'https://payment.tezospayments.com',\n            gitHub: 'https://github.com/fastwaterbear/tezospayments',\n            telegram: 'https://t.me/fastwaterbear',\n            twitter: 'https://twitter.com/fastwaterbear',\n            reddit: 'https://www.reddit.com/user/fastwaterbear'\n        }\n    },\n    tezos: {\n        defaultNetwork: 'granadanet',\n        networks: {\n            granadanet: {\n                title: 'Granada Testnet',\n                color: '#667eea',\n                default: {\n                    rpc: 'smartPy',\n                    indexer: 'tzKT',\n                    explorer: 'tzKT'\n                },\n                rpcUrls: {\n                    smartPy: 'https://granadanet.smartpy.io'\n                },\n                indexerUrls: {\n                    tzKT: 'https://api.granadanet.tzkt.io',\n                    betterCallDev: 'https://api.better-call.dev'\n                },\n                explorers: {\n                    tzKT: { baseUrl: 'https://granadanet.tzkt.io', title: 'TzKT' },\n                    betterCallDev: { baseUrl: 'https://better-call.dev', title: 'Better Call Dev' },\n                    tzStats: { baseUrl: 'https://granada.tzstats.com', title: 'TzStats' }\n                },\n                servicesFactoryContractAddress: 'KT1NxBzCJtvHFLKfiSAX3PGxdiJMAC8CtSZV'\n            }\n        }\n    }\n};\n//# sourceMappingURL=defaultConfig.js.map","export class BlockchainUrlExplorer {\n    constructor(network, baseUrl) {\n        this.network = network;\n        this.baseUrl = baseUrl;\n    }\n}\n//# sourceMappingURL=blockchainUrlExplorer.js.map","import { BlockchainUrlExplorer } from './blockchainUrlExplorer';\nexport class TzKTBlockchainUrlExplorer extends BlockchainUrlExplorer {\n    getEntityUrl(entity) {\n        return `${this.baseUrl}/${entity}`;\n    }\n    getOperationUrl(operationHash) {\n        return this.getEntityUrl(operationHash);\n    }\n    getAccountUrl(contractAddress) {\n        return this.getEntityUrl(contractAddress);\n    }\n}\n//# sourceMappingURL=tzKTBlockchainUrlExplorer.js.map","import { tezosInfo } from '@tezospayments/common';\nimport { BlockchainUrlExplorer } from './blockchainUrlExplorer';\nexport class BetterCallDevBlockchainUrlExplorer extends BlockchainUrlExplorer {\n    getEntityUrl(entity) {\n        return tezosInfo.addressPrefixes.some(prefix => entity.startsWith(prefix))\n            ? this.getAccountUrl(entity)\n            : this.getOperationUrl(entity);\n    }\n    getOperationUrl(operationHash) {\n        return `${this.baseUrl}/${this.network.name}/opg/${operationHash}/contents`;\n    }\n    getAccountUrl(contractAddress) {\n        return `${this.baseUrl}/${this.network.name}/${contractAddress}`;\n    }\n}\n//# sourceMappingURL=betterCallDevUrlBlockchainExplorer.js.map","import { BlockchainUrlExplorer } from './blockchainUrlExplorer';\nexport class TzStatsBlockchainUrlExplorer extends BlockchainUrlExplorer {\n    getEntityUrl(entity) {\n        return `${this.baseUrl}/${entity}`;\n    }\n    getOperationUrl(operationHash) {\n        return this.getEntityUrl(operationHash);\n    }\n    getAccountUrl(contractAddress) {\n        return this.getEntityUrl(contractAddress);\n    }\n}\n//# sourceMappingURL=tzStatsBlockchainUrlExplorer.js.map","import BigNumber from 'bignumber.js';\nimport { converters, guards, optimization, ServiceOperation, ServiceOperationDirection, ServiceOperationStatus, tezosMeta } from '@tezospayments/common';\nexport class TzKTDataProvider {\n    constructor(network, baseUrl, servicesFactoryContractAddress) {\n        this.network = network;\n        this.baseUrl = baseUrl;\n        this.servicesFactoryContractAddress = servicesFactoryContractAddress;\n    }\n    async getService(serviceContractAddress) {\n        const response = await fetch(`${this.baseUrl}/v1/contracts/${serviceContractAddress}/storage`);\n        const serviceDto = await response.json();\n        const result = this.mapServiceDtoToService(serviceDto, serviceContractAddress, this.network);\n        if (!result)\n            throw new Error('Service not found');\n        return result;\n    }\n    async getServices(ownerAddress) {\n        const response = await fetch(`${this.baseUrl}/v1/contracts/${this.servicesFactoryContractAddress}/bigmaps/services/keys/${ownerAddress}`);\n        const keyValue = await response.json();\n        const contractAddresses = keyValue.value;\n        return Promise.all(contractAddresses.map(contractAddress => this.getService(contractAddress)));\n    }\n    async getOperations(serviceContractAddress) {\n        const url = new URL(`v1/accounts/${serviceContractAddress}/operations`, this.baseUrl);\n        url.searchParams.set('type', 'transaction');\n        url.searchParams.set('entrypoint', 'send_payment');\n        const response = await fetch(url.href);\n        const operations = await response.json();\n        return operations.map(operation => this.mapOperationToServiceOperation(operation));\n    }\n    mapServiceDtoToService(serviceDto, serviceAddress, network) {\n        const metadataJson = converters.bytesToObject(serviceDto.metadata);\n        return (metadataJson && typeof metadataJson.name === 'string'\n            && (guards.isArray(metadataJson.links) || metadataJson.links === undefined)\n            && (typeof metadataJson.description === 'string' || metadataJson.description === undefined)\n            && (typeof metadataJson.iconUrl === 'string' || metadataJson.iconUrl === undefined))\n            ? {\n                name: metadataJson.name,\n                links: metadataJson.links || optimization.emptyArray,\n                description: metadataJson.description,\n                iconUrl: metadataJson.iconUrl,\n                version: +serviceDto.version,\n                metadata: serviceDto.metadata,\n                contractAddress: serviceAddress,\n                network,\n                allowedTokens: {\n                    tez: serviceDto.allowed_tokens.tez,\n                    assets: serviceDto.allowed_tokens.assets\n                },\n                allowedOperationType: +serviceDto.allowed_operation_type,\n                owner: serviceDto.owner,\n                paused: serviceDto.paused,\n                deleted: serviceDto.deleted,\n                signingKeys: this.mapSigningKeyDtosToSigningKeys(serviceDto.signing_keys)\n            }\n            : null;\n    }\n    mapSigningKeyDtosToSigningKeys(signingKeyDtos) {\n        return Object.keys(signingKeyDtos)\n            .reduce((map, signingKey) => map.set(signingKey, { publicKey: signingKey, name: signingKeyDtos[signingKey]?.name || undefined }), new Map());\n    }\n    mapOperationToServiceOperation(operationDto) {\n        return {\n            hash: operationDto.hash,\n            type: +operationDto.parameter.value.operation_type || 0,\n            direction: ServiceOperationDirection.Incoming,\n            status: operationDto.status === 'applied' ? ServiceOperationStatus.Success : ServiceOperationStatus.Cancelled,\n            amount: new BigNumber(operationDto.amount.toString()).div(10 ** tezosMeta.decimals),\n            payload: {\n                public: ServiceOperation.parseServiceOperationPayload(operationDto.parameter.value.payload.public),\n            },\n            asset: undefined,\n            timestamp: operationDto.timestamp,\n            date: new Date(operationDto.timestamp),\n            sender: operationDto.sender.address,\n            target: operationDto.target.address,\n        };\n    }\n}\n//# sourceMappingURL=tzKTDataProvider.js.map","import BigNumber from 'bignumber.js';\nimport { converters, guards, optimization, ServiceOperation, ServiceOperationDirection, ServiceOperationStatus, tezosMeta } from '@tezospayments/common';\nexport class BetterCallDevDataProvider {\n    constructor(network, baseUrl, servicesFactoryContractAddress) {\n        this.network = network;\n        this.baseUrl = baseUrl;\n        this.servicesFactoryContractAddress = servicesFactoryContractAddress;\n    }\n    async getService(serviceContractAddress) {\n        const response = await fetch(`${this.baseUrl}/v1/contract/${this.network.name}/${serviceContractAddress}/storage`);\n        const serviceDto = await response.json();\n        const result = this.mapServiceDtoToService(serviceDto, serviceContractAddress, this.network);\n        if (!result)\n            throw new Error('Service not found');\n        return result;\n    }\n    async getServices(ownerAddress) {\n        const servicesFactoryDto = await this.getServicesFactoryDto();\n        const servicesBigMapId = servicesFactoryDto[0].children[4].value;\n        const response = await fetch(`${this.baseUrl}/v1/bigmap/${this.network.name}/${servicesBigMapId}/keys`);\n        const servicesBigMapDto = await response.json();\n        const servicesSet = servicesBigMapDto.find(pair => pair.data.key_string === ownerAddress);\n        if (!servicesSet)\n            return optimization.emptyArray;\n        const contractAddresses = servicesSet.data.value.children.map(serviceAddressDto => serviceAddressDto.value);\n        return Promise.all(contractAddresses.map(contractAddress => this.getService(contractAddress)));\n    }\n    async getOperations(serviceContractAddress) {\n        const url = new URL(`v1/contract/${this.network.name}/${serviceContractAddress}/operations`, this.baseUrl);\n        url.searchParams.set('entrypoints', 'send_payment');\n        const response = await fetch(url.href);\n        const operations = (await response.json()).operations;\n        return operations.filter(operation => !operation.internal)\n            .map(operation => this.mapSendPaymentOperationToServiceOperation(operation));\n    }\n    async getServicesFactoryDto() {\n        const response = await fetch(`${this.baseUrl}/v1/contract/${this.network.name}/${this.servicesFactoryContractAddress}/storage`);\n        return response.json();\n    }\n    mapServiceDtoToService(serviceDto, serviceAddress, network) {\n        let metadataJson;\n        try {\n            metadataJson = JSON.parse(serviceDto[0].children[3].value);\n        }\n        catch {\n            return null;\n        }\n        return (metadataJson && typeof metadataJson.name === 'string'\n            && (guards.isArray(metadataJson.links) || metadataJson.links === undefined)\n            && (typeof metadataJson.description === 'string' || metadataJson.description === undefined)\n            && (typeof metadataJson.iconUrl === 'string' || metadataJson.iconUrl === undefined))\n            ? {\n                name: metadataJson.name,\n                links: metadataJson.links || optimization.emptyArray,\n                description: metadataJson.description,\n                iconUrl: metadataJson.iconUrl,\n                version: +serviceDto[0].children[7].value,\n                metadata: converters.stringToBytes(serviceDto[0].children[3].value),\n                contractAddress: serviceAddress,\n                network,\n                allowedTokens: {\n                    tez: serviceDto[0].children[1].children[0].value,\n                    assets: optimization.emptyArray\n                },\n                allowedOperationType: +serviceDto[0].children[0].value,\n                owner: serviceDto[0].children[4].value,\n                paused: serviceDto[0].children[5].value,\n                deleted: serviceDto[0].children[2].value,\n                signingKeys: serviceDto[0].children[6].children\n                    ? this.mapSigningKeyDtosToSigningKeys(serviceDto[0].children[6].children)\n                    : new Map()\n            }\n            : null;\n    }\n    mapSigningKeyDtosToSigningKeys(signingKeyDtos) {\n        return signingKeyDtos.reduce((map, signingKeyDto) => {\n            const publicKey = signingKeyDto.children[0].value;\n            const rawName = signingKeyDto.children[1].value;\n            return map.set(publicKey, { publicKey, name: rawName !== 'None' ? rawName : undefined });\n        }, new Map());\n    }\n    mapSendPaymentOperationToServiceOperation(operationDto) {\n        const rawAssetValue = operationDto.parameters[0].children[0].value;\n        return {\n            hash: operationDto.hash,\n            type: +operationDto.parameters[0].children[1].value || 0,\n            direction: ServiceOperationDirection.Incoming,\n            status: operationDto.status === 'applied' ? ServiceOperationStatus.Success : ServiceOperationStatus.Cancelled,\n            amount: new BigNumber(operationDto.amount.toString()).div(10 ** tezosMeta.decimals),\n            payload: {\n                public: ServiceOperation.parseServiceOperationPayload(converters.stringToBytes(operationDto.parameters[0].children[2].children[0].value)),\n            },\n            asset: rawAssetValue !== 'None' ? rawAssetValue : undefined,\n            timestamp: operationDto.timestamp,\n            date: new Date(operationDto.timestamp),\n            sender: operationDto.source,\n            target: operationDto.destination,\n        };\n    }\n}\n//# sourceMappingURL=betterCallDevDataProvider.js.map","import { NetworkType } from '@airgap/beacon-sdk';\nimport { networks } from '@tezospayments/common';\nexport const beaconNetworkToNetwork = networkType => {\n    switch (networkType) {\n        case NetworkType.GRANADANET:\n            return networks.granadanet;\n        default:\n            throw new Error('Not Supported network type');\n    }\n};\nexport const networkToBeaconNetwork = network => {\n    switch (network) {\n        case networks.granadanet:\n            return NetworkType.GRANADANET;\n        default:\n            throw new Error('Not Supported network type');\n    }\n};\n//# sourceMappingURL=converters.js.map","import { getParameterizedRoute } from '@tezospayments/common';\nimport { defaultConfig } from '@tezospayments/react-web-core';\n\nimport type { AppConfig } from './appConfig';\n\nconst commitShortSha = process.env.REACT_APP_COMMIT_SHORT_SHA || '';\n\nexport const config: AppConfig = {\n  ...defaultConfig,\n  app: {\n    publicUrl: process.env.PUBLIC_URL || '/',\n    name: 'Tezos Payments',\n    title: 'Tezos Payments',\n    version: {\n      name: 'Dev Version',\n      link: 'https://github.com/fastwaterbear/tezospayments/tree/master'\n    },\n    buildInfo: {\n      commitShortSha,\n      link: `https://github.com/fastwaterbear/tezospayments/tree/${commitShortSha}`\n    }\n  },\n  routers: {\n    overview: '/',\n    operations: '/operations',\n    services: '/services',\n    service: getParameterizedRoute(address => `/services/${address}`, '/services/:address'),\n    createService: '/services/create',\n    acceptPayments: '/accept',\n    acceptServicePayments: getParameterizedRoute(address => `/accept/${address}`, '/accept/:address'),\n    connect: '/connect',\n    about: '/about'\n  },\n  links: {\n    ...defaultConfig.links,\n    tzKT: 'https://tzkt.io'\n  }\n};\n","import { DAppClient } from '@airgap/beacon-sdk';\nimport { TezosToolkit } from '@taquito/taquito';\nimport BigNumber from 'bignumber.js';\n\nimport { Token, TokenFA2, TokenFA12, Network } from '@tezospayments/common';\nimport { converters } from '@tezospayments/react-web-core';\n\nimport { Account } from '../models/blockchain';\n\nexport class AccountsService {\n  constructor(\n    private readonly tezosToolkit: TezosToolkit,\n    private readonly dAppClient: DAppClient\n  ) {\n  }\n\n  async connect(network: Network): Promise<string | null> {\n    return this.dAppClient.requestPermissions({ network: { type: converters.networkToBeaconNetwork(network) } })\n      .then(permissions => permissions.address)\n      .catch(e => {\n        console.error(e);\n        this.dAppClient.clearActiveAccount();\n        return null;\n      });\n  }\n\n  disconnect(): Promise<void> {\n    return this.dAppClient.clearActiveAccount();\n  }\n\n  async getActiveAccount(): Promise<Pick<Account, 'address' | 'network'> | undefined> {\n    const activeAccount = await this.dAppClient.getActiveAccount();\n\n    return activeAccount\n      ? { address: activeAccount.address, network: converters.beaconNetworkToNetwork(activeAccount.network.type) }\n      : undefined;\n  }\n\n  async getTezosBalance(account: Account): Promise<number> {\n    const balance = await this.tezosToolkit.tz.getBalance(account.address);\n\n    return +balance / 1000000;\n  }\n\n  async getTokenBalance(account: Account, token: Token): Promise<number> {\n    let result = null;\n\n    switch (token.type) {\n      case 'fa1.2':\n        result = await this.getTokenFA12Balance(account, token);\n        break;\n      case 'fa2':\n        result = await this.getTokenFA2Balance(account, token);\n        break;\n      default:\n        throw new Error('Not Supported');\n    }\n\n    return result.toNumber();\n  }\n\n  private async getTokenFA12Balance(account: Account, token: TokenFA12): Promise<BigNumber> {\n    const contract = await this.tezosToolkit.contract.at(token.contractAddress);\n    const result = await contract.views.getBalance?.(account.address).read();\n\n    return result || 0;\n  }\n\n  private async getTokenFA2Balance(account: Account, token: TokenFA2): Promise<BigNumber> {\n    const contract = await this.tezosToolkit.contract.at(token.contractAddress);\n    const response = await contract.views?.['balance_of']?.([{ owner: account.address, token_id: token.fa2TokenId }])\n      .read();\n\n    const result = response[0].balance;\n\n    return result || 0;\n  }\n}\n","export class ReadOnlySigner {\n  async publicKeyHash() {\n    return 'tz1fVQangAfb9J1hRRMP2bSB6LvASD6KpY8A';\n  }\n\n  async publicKey() {\n    return 'edpkvWbk81uh1DEvdWKR4g1bjyTGhdu1mDvznPUFE2zDwNsLXrEb9K';\n  }\n\n  async secretKey(): Promise<string> {\n    throw new Error('Secret key cannot be exposed');\n  }\n\n  async sign(): Promise<{\n    bytes: string;\n    sig: string;\n    prefixSig: string;\n    sbytes: string;\n  }> {\n    throw new Error('Cannot sign');\n  }\n}\n","import React from 'react';\n\nimport type { BlockchainUrlExplorer } from '@tezospayments/react-web-core';\n\nexport interface ReactAppContext {\n  readonly tezosExplorer: BlockchainUrlExplorer;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const ReactAppContext = React.createContext<ReactAppContext>({} as ReactAppContext);\n","import { createSelector } from 'reselect';\n\nimport { Network } from '@tezospayments/common';\n\nimport { config } from '../../config';\nimport { Account } from '../../models/blockchain';\nimport type { AppState } from '../index';\n\nexport const selectAccountsState = (state: AppState) => state.accountsState;\nexport const getCurrentAccount = createSelector(\n  selectAccountsState,\n  accountsState => accountsState.currentAccount\n    ? (accountsState.connectedAccounts.find(account =>\n      account.address === accountsState.currentAccount?.address && account.network.id === accountsState.currentAccount.network.id) || null)\n    : null\n);\nexport const getAccountsByNetwork = createSelector(\n  selectAccountsState,\n  accountsState => accountsState.connectedAccounts.reduce((p, c) => p.set(c.network, [...(p.get(c.network) || []), c]), new Map<Network, Account[]>())\n);\nexport const getCurrentNetworkConfig = createSelector(\n  getCurrentAccount,\n  account => account && config.tezos.networks[account.network.name]\n);\n","import { createSelector } from 'reselect';\n\nimport { Token, tokenWhitelistMap } from '@tezospayments/common';\n\nimport { AppState } from '../index';\nimport { PendingOperation } from './slice';\n\n// TODO\nexport const selectTokensState = (_state: AppState) => tokenWhitelistMap;\n\nexport const selectServicesState = (state: AppState) => state.servicesState;\nexport const getAllAcceptedTokens = createSelector(\n  selectServicesState,\n  selectTokensState,\n  (servicesState, tokensState) => {\n    const result = new Set<Token>();\n\n    servicesState.services.forEach(s => s.allowedTokens.assets\n      .forEach(assetAddress => {\n        const token = tokensState.get(assetAddress);\n        if (!token)\n          return;\n\n        result.add(token);\n      })\n    );\n\n    return [...result];\n  }\n);\n\nexport const getAcceptTezos = createSelector(\n  selectServicesState,\n  servicesState => {\n    return servicesState.services.some(s => s.allowedTokens.tez);\n  }\n);\n\nexport const getSortedServices = createSelector(\n  selectServicesState,\n  servicesState => {\n    return [...servicesState.services].sort((a, b) => a.name.localeCompare(b.name));\n  }\n);\n\nexport const getOperationsByService = createSelector(\n  selectServicesState,\n  servicesState => {\n    const operationsMap = new Map<string, PendingOperation[]>();\n\n    servicesState.pendingOperations.forEach(op => {\n      const operations = operationsMap.get(op.serviceAddress);\n\n      if (operations)\n        operations.push(op);\n      else\n        operationsMap.set(op.serviceAddress, [op]);\n    });\n\n    return operationsMap;\n  }\n);\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nimport { optimization } from '@tezospayments/common';\n\nimport { Account } from '../../models/blockchain';\nimport { getAllAcceptedTokens } from '../services/selectors';\nimport { AppThunkAPI } from '../thunk';\n\nexport interface BalancesState {\n  readonly tezos: number;\n  readonly tokens: { [key: string]: number };\n  readonly initialized: boolean;\n}\n\nconst initialState: BalancesState = {\n  tezos: 0,\n  tokens: optimization.emptyObject,\n  initialized: false\n};\n\nconst namespace = 'balances';\n\nexport const loadBalances = createAsyncThunk<Pick<BalancesState, 'tezos' | 'tokens'>, Account, AppThunkAPI>(\n  `${namespace}/loadBalances`,\n  async (account, { extra: app, getState }) => {\n    const tezos = await app.services.accountsService.getTezosBalance(account);\n\n    const acceptedTokens = getAllAcceptedTokens(getState());\n    const tokens: { [key: string]: number } = {};\n    const balancesPromises = acceptedTokens.map(t => app.services.accountsService.getTokenBalance(account, t));\n    const balances = await Promise.all(balancesPromises);\n\n    balances.forEach((b, i) => {\n      const address = acceptedTokens[i]?.contractAddress;\n      if (address) {\n        tokens[address] = b;\n      }\n    });\n\n    return { tezos, tokens };\n  }\n);\n\nexport const balancesSlice = createSlice({\n  name: namespace,\n  initialState,\n  reducers: {\n    clearBalances: state => {\n      state.tezos = 0;\n      state.initialized = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loadBalances.fulfilled, (state, action) => {\n      const { tezos, tokens } = action.payload;\n      state.tezos = tezos;\n      state.tokens = tokens;\n      state.initialized = true;\n    });\n  }\n});\n\nexport const { clearBalances } = balancesSlice.actions;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nimport { ServiceOperation, Network, optimization } from '@tezospayments/common';\n\nimport { AppThunkAPI } from '../thunk';\n\nexport interface OperationsState {\n  readonly operations: readonly ServiceOperation[];\n  readonly initialized: boolean;\n}\n\nconst initialState: OperationsState = {\n  operations: optimization.emptyArray,\n  initialized: false\n};\n\nconst namespace = 'operations';\n\nexport const loadOperations = createAsyncThunk<ServiceOperation[], { servicesAddresses: string[], network: Network }, AppThunkAPI>(\n  `${namespace}/loadOperations`,\n  async ({ servicesAddresses }, { extra: app }) => {\n    const operationsPromises = servicesAddresses.map(s => app.services.servicesService.getOperations(s));\n    const operations = (await Promise.all(operationsPromises)).flat();\n\n    return operations;\n  }\n);\n\nexport const operationsSlice = createSlice({\n  name: namespace,\n  initialState,\n  reducers: {\n    clearOperations: state => {\n      state.operations = optimization.emptyArray;\n      state.initialized = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loadOperations.fulfilled, (state, action) => {\n      state.operations = action.payload;\n      state.initialized = true;\n    });\n  }\n});\n\nexport const { clearOperations } = operationsSlice.actions;\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { WalletOperation } from '@taquito/taquito';\n\nimport { Service, optimization, ServiceSigningKey, wait } from '@tezospayments/common';\n\nimport { AppDispatch, AppState } from '..';\nimport { Account } from '../../models/blockchain';\nimport { getCurrentAccount } from '../accounts/selectors';\nimport { clearBalances, loadBalances } from '../balances/slice';\nimport { loadOperations } from '../operations/slice';\nimport { AppThunkAPI } from '../thunk';\n\nexport enum PendingOperationStatus { loading, success, error }\n\nexport interface PendingOperation {\n  readonly hash: string;\n  readonly serviceAddress: string;\n  readonly action: string;\n  readonly confirmationCount: number;\n  readonly targetConfirmationCount: number;\n  readonly status: PendingOperationStatus;\n}\n\nexport interface ServicesState {\n  readonly services: readonly Service[];\n  readonly initialized: boolean;\n  readonly pendingOperations: PendingOperation[];\n}\n\nconst initialState: ServicesState = {\n  services: optimization.emptyArray,\n  initialized: false,\n  pendingOperations: optimization.emptyArray\n};\n\nconst namespace = 'services';\n\nexport const loadServices = createAsyncThunk<readonly Service[], Account, AppThunkAPI>(\n  `${namespace}/loadServices`,\n  async (account, { extra: app, dispatch }) => {\n    const services = await app.services.servicesService.getServices(account);\n\n    if (services.length) {\n      dispatch(loadBalances(account));\n      dispatch(loadOperations({ servicesAddresses: services.map(s => s.contractAddress), network: account.network }));\n    }\n\n    return services;\n  }\n);\n\nexport const updateService = createAsyncThunk<void, Service, AppThunkAPI>(\n  `${namespace}/updateService`,\n  async (service, { extra: app, dispatch, getState }) => {\n    const operation = await app.services.servicesService.updateService(service);\n    await waitOperationConfirmation(dispatch, operation, service.contractAddress, 'updating');\n    reloadServices(dispatch, getState);\n  }\n);\n\nexport const createService = createAsyncThunk<void, Service, AppThunkAPI>(\n  `${namespace}/createService`,\n  async (service, { extra: app, dispatch, getState }) => {\n    const operation = await app.services.servicesService.createService(service);\n    await waitOperationConfirmation(dispatch, operation, service.contractAddress, 'creating new service');\n    reloadServices(dispatch, getState);\n  }\n);\n\nexport const setPaused = createAsyncThunk<void, { service: Service, paused: boolean }, AppThunkAPI>(\n  `${namespace}/setPaused`,\n  async ({ service, paused }, { extra: app, dispatch, getState }) => {\n    const operation = await app.services.servicesService.setPaused(service, paused);\n    await waitOperationConfirmation(dispatch, operation, service.contractAddress, paused ? 'pausing' : 'unpausing');\n    reloadServices(dispatch, getState);\n  }\n);\n\nexport const setDeleted = createAsyncThunk<void, { service: Service, deleted: boolean }, AppThunkAPI>(\n  `${namespace}/setDeleted`,\n  async ({ service, deleted }, { extra: app, dispatch, getState }) => {\n    const operation = await app.services.servicesService.setDeleted(service, deleted);\n    await waitOperationConfirmation(dispatch, operation, service.contractAddress, deleted ? 'deleting' : 'undeleting');\n    reloadServices(dispatch, getState);\n  }\n);\n\nexport const addApiKey = createAsyncThunk<void, { service: Service, signingKey: ServiceSigningKey }, AppThunkAPI>(\n  `${namespace}/addApiKey`,\n  async ({ service, signingKey }, { extra: app, dispatch, getState }) => {\n    const operation = await app.services.servicesService.addApiKey(service, signingKey);\n    await waitOperationConfirmation(dispatch, operation, service.contractAddress, 'adding API key');\n    reloadServices(dispatch, getState);\n  }\n);\n\nexport const deleteApiKey = createAsyncThunk<void, { service: Service, publicKey: string }, AppThunkAPI>(\n  `${namespace}/deleteApiKey`,\n  async ({ service, publicKey }, { extra: app, dispatch, getState }) => {\n    const operation = await app.services.servicesService.deleteApiKey(service, publicKey);\n    await waitOperationConfirmation(dispatch, operation, service.contractAddress, 'deleting API key');\n    reloadServices(dispatch, getState);\n  }\n);\n\nexport const clearServices = createAsyncThunk<void, void, AppThunkAPI>(\n  `${namespace}/clearServices`,\n  async (_, { dispatch }) => {\n    dispatch(clearBalances());\n  }\n);\n\nconst createPendingOperation = (hash: string, serviceAddress: string, action: string, targetConfirmationCount: number): PendingOperation => ({\n  hash,\n  action,\n  serviceAddress,\n  targetConfirmationCount,\n  confirmationCount: 0,\n  status: PendingOperationStatus.loading,\n});\n\nconst reloadServices = (dispatch: AppDispatch, getState: () => AppState) => {\n  const account = getCurrentAccount(getState());\n  if (account) {\n    dispatch(loadServices(account));\n  }\n};\n\nconst waitOperationConfirmation = (\n  dispatch: AppDispatch,\n  operation: WalletOperation,\n  serviceAddress: string,\n  operationName: string,\n  confirmationsNumber = 2\n): Promise<void> => {\n  const pendingOperation = createPendingOperation(operation.opHash, serviceAddress, operationName, confirmationsNumber);\n  dispatch(addPendingOperation(pendingOperation));\n\n  return new Promise<void>((resolve, reject) => {\n    operation.confirmationObservable(confirmationsNumber)\n      .subscribe(\n        confirmation => dispatch(setPendingOperationConfirmationCount(\n          { hash: pendingOperation.hash, confirmationCount: confirmation.currentConfirmation })\n        ),\n        async error => {\n          dispatch(setPendingOperationStatus({ hash: pendingOperation.hash, status: PendingOperationStatus.error }));\n          reject(error);\n          await wait(1000);\n          dispatch(deletePendingOperation(pendingOperation.hash));\n        },\n        async () => {\n          dispatch(setPendingOperationStatus({ hash: pendingOperation.hash, status: PendingOperationStatus.success }));\n          resolve();\n          await wait(1000);\n          dispatch(deletePendingOperation(pendingOperation.hash));\n        }\n      );\n  });\n};\n\nexport const servicesSlice = createSlice({\n  name: namespace,\n  initialState,\n  reducers: {\n    addPendingOperation: (state, action: PayloadAction<PendingOperation>) => {\n      const operation = action.payload;\n      state.pendingOperations.push(operation);\n    },\n    setPendingOperationStatus: (state, action: PayloadAction<{ hash: string, status: PendingOperationStatus }>) => {\n      const operation = state.pendingOperations.find(o => o.hash === action.payload.hash);\n      if (operation)\n        operation.status = action.payload.status;\n    },\n    setPendingOperationConfirmationCount: (state, action: PayloadAction<{ hash: string, confirmationCount: number }>) => {\n      const operation = state.pendingOperations.find(o => o.hash === action.payload.hash);\n      if (operation)\n        operation.confirmationCount = action.payload.confirmationCount;\n    },\n    deletePendingOperation: (state, action: PayloadAction<string>) => {\n      state.pendingOperations = state.pendingOperations.filter(o => o.hash !== action.payload);\n    },\n  },\n  extraReducers: builder => {\n    builder.addCase(loadServices.fulfilled, (state, action) => ({\n      ...state,\n      services: action.payload,\n      initialized: true\n    }));\n\n    builder.addCase(clearServices.fulfilled, state => ({\n      ...state,\n      services: optimization.emptyArray,\n      initialized: false\n    }));\n  }\n});\n\nexport const { addPendingOperation, setPendingOperationStatus, setPendingOperationConfirmationCount, deletePendingOperation } = servicesSlice.actions;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nimport { optimization, Network } from '@tezospayments/common';\n\nimport type { Account, CurrentAccountInfo } from '../../models/blockchain';\nimport { clearServices, loadServices } from '../services/slice';\nimport { AppThunkAPI } from '../thunk';\n\nexport interface AccountsState {\n  readonly currentAccount: CurrentAccountInfo | null;\n  readonly connectedAccounts: readonly Account[];\n  readonly initialized: boolean;\n}\n\nconst initialState: AccountsState = {\n  currentAccount: null,\n  connectedAccounts: optimization.emptyArray,\n  initialized: false\n};\n\nconst namespace = 'accounts';\n\nexport const loadActiveAccount = createAsyncThunk<Account | null, void, AppThunkAPI>(\n  `${namespace}/loadActiveAccount`,\n  async (_, { extra: app, dispatch }) => {\n    const account = await app.services.accountsService.getActiveAccount();\n\n    if (account) {\n      dispatch(loadServices(account));\n    }\n\n    return account || null;\n  }\n);\n\nexport const connectAccount = createAsyncThunk<Account | null, Network, AppThunkAPI>(\n  `${namespace}/connect`,\n  async (network: Network, { extra: app, dispatch }) => {\n    const address = await app.services.accountsService.connect(network);\n    const account = address ? { address, network } : null;\n\n    if (account) {\n      dispatch(loadServices(account));\n    }\n\n    return account;\n  }\n);\n\nexport const disconnectAccount = createAsyncThunk<void, void, AppThunkAPI>(\n  `${namespace}/disconnect`,\n  async (_, { extra: app, dispatch }) => {\n    const result = await app.services.accountsService.disconnect();\n    dispatch(clearServices());\n\n    return result;\n  }\n);\n\nexport const accountsSlice = createSlice({\n  name: namespace,\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(loadActiveAccount.fulfilled, (state, action) => {\n      const account = action.payload;\n      if (account) {\n        state.currentAccount = {\n          address: account.address,\n          network: account.network\n        };\n\n        if (!state.connectedAccounts.some(a => a.address === account.address)) {\n          state.connectedAccounts.push(account);\n        }\n      }\n      state.initialized = true;\n    });\n\n    builder.addCase(connectAccount.fulfilled, (state, action) => {\n      const account = action.payload;\n      if (account) {\n        state.currentAccount = {\n          address: account.address,\n          network: account.network\n        };\n\n        if (!state.connectedAccounts.some(a => a.address === account.address)) {\n          state.connectedAccounts.push(account);\n        }\n      }\n    });\n\n    builder.addCase(disconnectAccount.fulfilled, state => {\n      state.connectedAccounts = state.connectedAccounts.filter(a =>\n        a.address !== state.currentAccount?.address || a.network.id !== state.currentAccount?.network.id\n      );\n\n      const nextAccount = state.connectedAccounts[0];\n      state.currentAccount = nextAccount ? { address: nextAccount.address, network: nextAccount.network } : null;\n    });\n  }\n});\n","import { common } from './common';\nimport { overview, createService, connect, header, about, operations, services, settings, acceptPayments } from './views';\n\nexport const enUS = {\n  id: 'en-US',\n  resources: {\n    common,\n    views: {\n      header,\n      overview,\n      createService,\n      connect,\n      about,\n      operations,\n      services,\n      settings,\n      acceptPayments\n    },\n  }\n} as const;\n","export const common = {\n  comingSoon: 'Coming soon',\n  copy: 'Copy',\n  copyLink: 'Copy Link',\n  open: 'Open',\n  new: 'New',\n  cancel: 'Cancel',\n  save: 'Save',\n  yes: 'Yes',\n  no: 'No'\n};\n","export const header = {\n  accountActions: {\n    copyAddress: {\n      title: 'Copy address'\n    },\n    viewOn: 'View on',\n    connectAnotherAccount: {\n      title: 'Connect another account'\n    },\n    disconnect: {\n      title: 'Disconnect'\n    }\n  }\n};\n","export const overview = {\n  title: 'Overview',\n  balances: {\n    title: 'Balances'\n  },\n  incoming: {\n    title: 'Incoming'\n  },\n  outgoing: {\n    title: 'Outgoing'\n  },\n  operationCount: {\n    title: 'Operation count'\n  },\n  volume: {\n    title: 'Volume'\n  }\n};\n","export const createService = {\n  title: 'Create Service'\n};\n","import { config } from '../../../config';\n\nexport const connect = {\n  actions: {\n    connect: {\n      title: 'Connect',\n      connectTo: 'Connect to',\n      description: `In order to use the ${config.app.title} service you have to connect a Tezos account`\n    }\n  }\n};\n","export const about = {\n  title: 'About',\n  detailedTitle: 'Decentralized Payment Solution built on Tezos blockchain',\n  build: 'build',\n  poweredBy: 'Powered by',\n  tzKt: 'TzKT',\n  api: 'API'\n};\n","export const operations = {\n  title: 'Operations',\n  operationList: {\n    paymentData: 'Payment Data:',\n    donationData: 'Donation Data:',\n    income: 'Income',\n    expense: 'Expense',\n    cancelled: 'Cancelled',\n    pending: 'Pending',\n    noOperationsPerformedYet: 'No operations performed yet'\n  }\n};\n","export const services = {\n  title: 'Services',\n  status: {\n    active: 'Active',\n    paused: 'Paused',\n    deleted: 'Deleted',\n    updating: 'Updating'\n  },\n  createNewService: 'Create New Service',\n  acceptPayments: 'Accept Payments',\n  acceptPaymentsDescription: 'Generate a payment link using our constructor to accept payments on your service',\n  youDoNotHaveAnyServicesYet: 'You don\\'t have any services yet',\n  createYourFirstService: 'Create your first service to accept payments or connect another Tezos account',\n  operations: {\n    paymentsEnabled: 'Payments Enabled',\n    donationsEnabled: 'Donations Enabled',\n  },\n  allowedCurrencies: 'Allowed Currencies',\n  service: 'Service',\n  links: 'Links',\n  dangerZone: {\n    title: 'Danger Zone',\n    pauseService: 'Pause Service',\n    pauseServiceConfirmation: 'Are you sure you want to pause the service',\n    pauseServiceDescription: 'Pause accepting payments and donations',\n    unPauseService: 'Unpause Service',\n    unPauseServiceConfirmation: 'Are you sure you want to unpause the service',\n    unPauseServiceDescription: 'Accepting payments and donations are paused',\n    deleteService: 'Delete Service',\n    deleteServiceConfirmation: 'Are you sure you want to delete the service',\n    deleteServiceDescription: 'Delete this service. After deleting this service can’t accept payments and donations. You can restore the deleted service',\n    unDeleteService: 'Undelete Service',\n    unDeleteServiceConfirmation: 'Are you sure you want to undelete the service',\n    unDeleteServiceDescription: 'Service is marked as deleted',\n  },\n  devZone: {\n    title: 'API Keys',\n    addKey: 'Add Key',\n    saveKeys: 'Save Keys',\n    name: 'Name',\n    algorithm: 'Algorithm',\n    publicKey: 'Public Key',\n    secretKey: 'Secret Key',\n    saveSecretKeyWarning: 'Write down the secret key, we will never show it again',\n    saveSecretKeyConfirm: 'Have you written down the secret key?',\n    noApiKeysAddedYet: 'No API keys added yet',\n    deleteKeyConfirmation: 'Are you sure you want to delete the API key',\n  },\n  editing: {\n    editService: 'Edit Service',\n    updateService: 'Update Service',\n    createService: 'Create Service',\n    addCurrency: 'Add Currency',\n    addLink: 'Add Link',\n    serviceName: 'Service Name',\n    description: 'Description',\n    accept: 'Accept',\n    acceptPayments: 'Accept Payments',\n    acceptDonations: 'Accept Donations',\n  }\n};\n","export const settings = {\n  title: 'Settings',\n};\n","export const acceptPayments = {\n  title: 'Accept Payments',\n  type: 'Type',\n  amount: 'Amount',\n  paymentPublicData: 'Payment Public Data',\n  orderId: 'Order ID',\n  orderIdHelpText: 'Order ID/invoice number/any unique identifier in your system',\n  donationData: 'Donation Data',\n  shortDescription: 'Short description on the page',\n  shortDescriptionHelpText: 'This message will be shown to your donators when they will donate',\n  directLinkPaymentHelpText: 'Copy the following link and paste it into your website or send to your customer directly using messengers, email, social networks, etc',\n  directLinkDonationHelpText: 'Copy the following link and paste it into your profile on social networks or website so your subscribers can donate to you by opening this link',\n  errors: {\n    fillRequiredData: 'Fill required data to generate corresponding content'\n  }\n};\n","import { enUS } from '../../localization/en-US';\nimport { Language } from '../../models/system';\n\nexport const useCurrentLanguage = (): Language => {\n    // TODO: implement language change\n    return enUS;\n};\n\nexport const useCurrentLanguageResources = () => {\n    const currentLanguage = useCurrentLanguage();\n\n    return currentLanguage.resources;\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { AppDispatch, AppState } from '../../store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\n\n","import { useContext } from 'react';\n\nimport { ReactAppContext } from '../../app';\n\nexport const useAppContext = () => useContext(ReactAppContext);\n","import { Route, RouteProps, Redirect } from 'react-router';\n\nimport { config } from '../../config';\nimport { useAppSelector } from '../hooks';\n\nconst defaultConnectPath = config.routers.connect;\ninterface PrivateRouteProps extends RouteProps {\n    children: NonNullable<RouteProps['children']>;\n    connectPath?: string;\n    isConnected: boolean;\n}\n\nexport const PrivateRoute = ({ children, isConnected, connectPath = defaultConnectPath, ...routeProps }: PrivateRouteProps) => (\n    <Route {...routeProps} children={props => isConnected\n        ? children\n        : <Redirect to={{\n            pathname: connectPath,\n            state: { from: props.location }\n        }} />\n    } />\n);\n\ntype PrivateRouteContainerProps = Omit<PrivateRouteProps, 'isConnected'>;\n\nexport const PrivateRouteContainer = (props: PrivateRouteContainerProps) => {\n    const currentAccount = useAppSelector(state => state.accountsState.currentAccount);\n\n    return <PrivateRoute {...props} isConnected={!!currentAccount} />;\n};\n","import { Tooltip } from 'antd';\n\nimport { combineClassNames } from '@tezospayments/common';\n\nimport './TokenList.scss';\n\ninterface TokenListProps {\n  children: React.ReactNode;\n}\n\nexport const TokenList = (props: TokenListProps) => {\n  return <ul className=\"token-list\">\n    {props.children}\n  </ul>;\n};\n\ninterface TokenListItemProps {\n  name: string;\n  ticker: string;\n  iconSrc?: string;\n  value?: number;\n  decimals: number;\n  highlightSign?: boolean;\n  className?: string;\n}\n\nconst TokenListItem = (props: TokenListItemProps) => {\n  const valueClassNames = combineClassNames('token-list-item__value',\n    { 'token-list-item__value_positive': props.highlightSign && props.value && props.value > 0 },\n    { 'token-list-item__value_negative': props.highlightSign && props.value && props.value < 0 }\n  );\n\n  const sign = !props.value ? ''\n    : props.value > 0 && props.highlightSign\n      ? '+'\n      : props.value < 0\n        ? '−'\n        : '';\n\n  const displayedDecimals = 6;\n  const value = props.value && Math.abs(props.value);\n  const allDecimalsShown = displayedDecimals < props.decimals;\n  const valueSpan = value !== undefined && value !== null ? <span className={valueClassNames}>\n    {`${sign}${value.toLocaleString(undefined, { minimumFractionDigits: displayedDecimals })}${allDecimalsShown ? '...' : ''}`}\n  </span> : null;\n\n  return <li className={combineClassNames('token-list-item', props.className)}>\n    <img className=\"token-list-item__icon\" src={props.iconSrc} alt={props.name} />\n    <div>\n      <div className=\"token-list-item__name-container\">\n        <span className=\"token-list-item__ticker\">{props.ticker}</span>\n        <span className=\"token-list-item__name\">{props.name}</span>\n      </div>\n      {allDecimalsShown && value !== undefined && value !== null\n        ? <Tooltip title={value.toLocaleString(undefined, { minimumFractionDigits: props.decimals })}>\n          {valueSpan}\n        </Tooltip>\n        : valueSpan\n      }\n    </div>\n  </li>;\n};\n\nTokenList.Item = TokenListItem;\n","import { CopyOutlined } from '@ant-design/icons';\nimport React, { useCallback } from 'react';\n\nimport { useAppContext, useCurrentLanguageResources } from '../../hooks';\n\nimport './ExplorerLink.scss';\n\ninterface ExplorerLinkProps {\n  hash: string;\n  className?: string;\n  showCopyButton?: boolean;\n  children: React.ReactNode;\n}\n\nexport const ExplorerLink = (props: ExplorerLinkProps) => {\n  const appContext = useAppContext();\n  const langResources = useCurrentLanguageResources();\n  const commonLangResources = langResources.common;\n\n  const handleCopyAddressClick = useCallback(() => {\n    navigator.clipboard.writeText(props.hash);\n  }, [props.hash]);\n\n  return <div className=\"explorer-link__container\">\n    <a href={appContext.tezosExplorer.getEntityUrl(props.hash)} target=\"_blank\" rel=\"noreferrer\" className={props.className}>\n      {props.children}\n    </a>\n    {props.showCopyButton && <CopyOutlined className=\"explorer-link__copy-icon\" title={commonLangResources.copy} onClick={handleCopyAddressClick} />}\n  </div>;\n};\n\nexport const ExplorerLinkPure = React.memo(ExplorerLink);\n","type ExternalLinkProps = Omit<JSX.IntrinsicElements['a'], 'target' | 'rel'>;\n\nexport const ExternalLink = (props: ExternalLinkProps) => <a {...props} target=\"_blank\" rel=\"noopener noreferrer\">\n  {props.children}\n</a>;\n","import { Button } from 'antd';\nimport React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { config } from '../../../config';\nimport { useCurrentLanguageResources } from '../../hooks';\n\nimport './NoServicesCreated.scss';\n\nexport const NoServicesCreated = () => {\n  const langResources = useCurrentLanguageResources();\n  const servicesLangResources = langResources.views.services;\n  const history = useHistory();\n\n  const handleCreateServiceClick = useCallback(() => {\n    history.push(config.routers.createService);\n  }, [history]);\n\n  return <div className=\"no-services-created\">\n    <div>\n      <p>{servicesLangResources.youDoNotHaveAnyServicesYet}</p>\n      <p>{servicesLangResources.createYourFirstService}</p>\n      <Button type=\"primary\" onClick={handleCreateServiceClick}>{servicesLangResources.editing.createService}</Button>\n    </div>\n  </div>;\n};\n\nexport const NoServicesCreatedPure = React.memo(NoServicesCreated);\n","import React from 'react';\n\nimport { combineClassNames } from '@tezospayments/common';\n\ninterface ViewTitleProps {\n    className?: string;\n    children?: React.ReactNode;\n    as?: keyof React.ReactHTML;\n}\n\ntype DefaultViewTitleProps = Required<Pick<ViewTitleProps, 'as'>>;\n\nexport const defaultProps: DefaultViewTitleProps = {\n    as: 'h1',\n};\n\nconst viewTitleClassName = 'view__title';\nexport const ViewTitle = (props: ViewTitleProps & DefaultViewTitleProps) => {\n    const className = combineClassNames(props.className, viewTitleClassName);\n\n    return React.createElement(props.as, { className }, props.children);\n};\nViewTitle.defaultProps = defaultProps;\n","import React from 'react';\n\nimport { combineClassNames } from '@tezospayments/common';\n\nimport { config } from '../../../config';\nimport { useViewTitle } from '../../hooks';\nimport { ViewTitle } from './ViewTitle';\nimport './View.scss';\n\ninterface ViewProps {\n    className?: string;\n    title?: string;\n    children?: React.ReactNode;\n    as?: keyof React.ReactHTML;\n}\n\ntype DefaultViewProps = Required<Pick<ViewProps, 'as'>>;\n\nconst defaultProps: DefaultViewProps = {\n    as: 'main'\n};\n\nexport const View = (props: ViewProps & DefaultViewProps) => {\n    useViewTitle(props.title ? `${props.title} | ${config.app.title}` : config.app.title);\n    const className = combineClassNames('view', props.className);\n\n    return React.createElement(props.as, { className }, props.children);\n};\n\nView.defaultProps = defaultProps;\nView.Title = ViewTitle;\n","import { useEffect } from 'react';\n\nexport const useViewTitle = (title: string) => {\n    useEffect(() => {\n        document.title = title;\n    }, [title]);\n};\n","import { Column } from '@ant-design/charts';\nimport { Skeleton } from 'antd';\nimport React from 'react';\n\nimport { selectServicesState } from '../../../../store/services/selectors';\nimport { useAppSelector } from '../../../hooks';\n\nexport const OperationCountChart = () => {\n  const data = [\n    {\n      month: 'May',\n      operationCount: 900,\n    },\n    {\n      month: 'June',\n      operationCount: 1600,\n    },\n    {\n      month: 'July',\n      operationCount: 600,\n    },\n    {\n      month: 'August',\n      operationCount: 2200,\n    },\n    {\n      month: 'September',\n      operationCount: 950,\n    },\n    {\n      month: 'October',\n      operationCount: 1100,\n    },\n  ];\n\n  const config: React.ComponentProps<typeof Column> = {\n    data,\n    xField: 'month',\n    yField: 'operationCount',\n    height: 400,\n    meta: {\n      operationCount: { alias: 'Operation count' },\n    },\n  };\n\n  const services = useAppSelector(selectServicesState);\n\n  if (!services.initialized) {\n    return <Skeleton active paragraph={{ rows: 12 }} />;\n  }\n\n  return <Column {...config} />;\n};\n\nexport const OperationCountChartPure = React.memo(OperationCountChart);\n","import { Line } from '@ant-design/charts';\nimport { Skeleton } from 'antd';\nimport React from 'react';\n\nimport { selectServicesState } from '../../../../store/services/selectors';\nimport { useAppSelector } from '../../../hooks';\n\nexport const VolumeChart = () => {\n  const data = [\n    {\n      quarter: 'Q1 2020',\n      sum: 24756,\n    },\n    {\n      quarter: 'Q2 2020',\n      sum: 22178,\n    },\n    {\n      quarter: 'Q3 2020',\n      sum: 13613,\n    },\n    {\n      quarter: 'Q4 2020',\n      sum: 29436,\n    },\n    {\n      quarter: 'Q1 2021',\n      sum: 25679,\n    },\n    {\n      quarter: 'Q2 2021',\n      sum: 26483,\n    },\n    {\n      quarter: 'Q3 2021',\n      sum: 41835,\n    },\n    {\n      quarter: 'Q4 2021',\n      sum: 32412,\n    },\n  ];\n\n  const config: React.ComponentProps<typeof Line> = {\n    data,\n    xField: 'quarter',\n    yField: 'sum',\n    height: 400,\n    smooth: true,\n    meta: {\n      sum: { alias: 'Sum' },\n    },\n  };\n\n  const services = useAppSelector(selectServicesState);\n\n  if (!services.initialized) {\n    return <Skeleton active paragraph={{ rows: 12 }} />;\n  }\n\n  return <Line {...config} />;\n};\n\nexport const VolumeChartPure = React.memo(VolumeChart);\n","import { AppState } from '..';\n\nexport const selectBalancesState = (state: AppState) => state.balancesState;\n","import { Skeleton } from 'antd';\nimport React from 'react';\n\nimport { tezosMeta } from '@tezospayments/common';\n\nimport { selectBalancesState } from '../../../../store/balances/selectors';\nimport { getAcceptTezos, getAllAcceptedTokens, selectServicesState } from '../../../../store/services/selectors';\nimport { TokenList } from '../../../common';\nimport { useAppSelector } from '../../../hooks';\n\nexport const Balances = () => {\n  const acceptTezos = useAppSelector(getAcceptTezos);\n  const tokens = useAppSelector(getAllAcceptedTokens);\n  const services = useAppSelector(selectServicesState);\n  const balances = useAppSelector(selectBalancesState);\n\n  if (!services.initialized || !balances.initialized) {\n    return <Skeleton active />;\n  }\n\n  const items = [];\n\n  if (acceptTezos) {\n    items.push(<TokenList.Item\n      key={tezosMeta.symbol}\n      ticker={tezosMeta.symbol}\n      name={tezosMeta.name}\n      decimals={tezosMeta.decimals}\n      value={balances.tezos}\n      iconSrc={tezosMeta.thumbnailUri} />);\n  }\n\n  tokens.forEach(t => {\n    items.push(<TokenList.Item\n      key={t.metadata?.symbol}\n      ticker={t.metadata?.symbol || 'unknown'}\n      name={t.metadata?.name || 'unknown'}\n      decimals={t.metadata ? t.metadata.decimals : 2}\n      value={balances.tokens[t.contractAddress] || 0}\n      iconSrc={t.metadata?.thumbnailUri} />);\n  });\n\n  return <TokenList>\n    {items}\n  </TokenList>;\n};\n\nexport const BalancesPure = React.memo(Balances);\n","import { Skeleton } from 'antd';\nimport React from 'react';\n\nimport { tezosMeta } from '@tezospayments/common';\n\nimport { getAcceptTezos, getAllAcceptedTokens, selectServicesState } from '../../../../store/services/selectors';\nimport { TokenList } from '../../../common';\nimport { useAppSelector } from '../../../hooks';\n\nexport const Incoming = () => {\n  const acceptTezos = useAppSelector(getAcceptTezos);\n  const services = useAppSelector(selectServicesState);\n  const tokens = useAppSelector(getAllAcceptedTokens);\n\n  if (!services.initialized) {\n    return <Skeleton active />;\n  }\n\n  const items = [];\n\n  if (acceptTezos) {\n    items.push(<TokenList.Item\n      key={tezosMeta.symbol}\n      ticker={tezosMeta.symbol}\n      name={tezosMeta.name}\n      decimals={tezosMeta.decimals}\n      value={52.4}\n      iconSrc={tezosMeta.thumbnailUri}\n      highlightSign />);\n  }\n\n  tokens.forEach(t => {\n    items.push(<TokenList.Item\n      key={t.metadata?.symbol}\n      ticker={t.metadata?.symbol || 'unknown'}\n      name={t.metadata?.name || 'unknown'}\n      decimals={t.metadata ? t.metadata.decimals : 2}\n      value={462518}\n      iconSrc={t.metadata?.thumbnailUri}\n      highlightSign />);\n  });\n\n  return <TokenList>\n    {items}\n  </TokenList>;\n};\n\nexport const IncomingPure = React.memo(Incoming);\n","import { Skeleton } from 'antd';\nimport React from 'react';\n\nimport { tezosMeta } from '@tezospayments/common';\n\nimport { getAcceptTezos, getAllAcceptedTokens, selectServicesState } from '../../../../store/services/selectors';\nimport { TokenList } from '../../../common';\nimport { useAppSelector } from '../../../hooks';\n\nexport const Outgoing = () => {\n  const acceptTezos = useAppSelector(getAcceptTezos);\n  const services = useAppSelector(selectServicesState);\n  const tokens = useAppSelector(getAllAcceptedTokens);\n\n  if (!services.initialized) {\n    return <Skeleton active />;\n  }\n\n  const items = [];\n\n  if (acceptTezos) {\n    items.push(<TokenList.Item\n      key={tezosMeta.symbol}\n      ticker={tezosMeta.symbol}\n      name={tezosMeta.name}\n      decimals={tezosMeta.decimals}\n      value={-52.4}\n      iconSrc={tezosMeta.thumbnailUri}\n      highlightSign />);\n  }\n\n  tokens.forEach(t => {\n    items.push(<TokenList.Item\n      key={t.metadata?.symbol}\n      ticker={t.metadata?.symbol || 'unknown'}\n      name={t.metadata?.name || 'unknown'}\n      decimals={t.metadata ? t.metadata.decimals : 2}\n      value={-462518.0000006}\n      iconSrc={t.metadata?.thumbnailUri}\n      highlightSign />);\n  });\n\n  return <TokenList>\n    {items}\n  </TokenList>;\n};\n\nexport const OutgoingPure = React.memo(Outgoing);\n","import { Card } from 'antd';\nimport React from 'react';\n\nimport { selectServicesState } from '../../../store/services/selectors';\nimport { NoServicesCreatedPure } from '../../common/NoServicesCreated';\nimport { useAppSelector, useCurrentLanguageResources } from '../../hooks';\nimport { View } from '../View';\nimport { OperationCountChartPure, VolumeChartPure } from './LargeCards';\nimport { BalancesPure, IncomingPure, OutgoingPure } from './SmallCards';\nimport './Overview.scss';\n\nexport const Overview = () => {\n  const langResources = useCurrentLanguageResources();\n  const commonLangResources = langResources.common;\n  const overviewLangResources = langResources.views.overview;\n\n  const servicesState = useAppSelector(selectServicesState);\n\n  return <View title={overviewLangResources.title} className=\"overview\">\n    <View.Title>{overviewLangResources.title}</View.Title>\n\n    {servicesState.initialized && !servicesState.services.length\n      ? <NoServicesCreatedPure />\n      : <div className=\"cards-container\">\n        <Card className=\"cards-container__small-card\" size=\"small\" title={overviewLangResources.balances.title}>\n          <BalancesPure />\n        </Card>\n\n        {/*eslint-disable-next-line max-len*/}\n        <Card className=\"cards-container__small-card\" size=\"small\" title={`${overviewLangResources.incoming.title} (${commonLangResources.comingSoon})`} extra={<a href=\"#void\">All Month</a>}>\n          <IncomingPure />\n        </Card>\n\n        {/*eslint-disable-next-line max-len*/}\n        <Card className=\"cards-container__small-card\" size=\"small\" title={`${overviewLangResources.outgoing.title} (${commonLangResources.comingSoon})`} extra={<a href=\"#void\">All Month</a>}>\n          <OutgoingPure />\n        </Card>\n\n        <Card className=\"cards-container__large-card\" title={`${overviewLangResources.operationCount.title} (${commonLangResources.comingSoon})`} extra={<a href=\"#void\">6 Months</a>}>\n          <OperationCountChartPure />\n        </Card>\n\n        <Card className=\"cards-container__large-card\" title={`${overviewLangResources.volume.title} (${commonLangResources.comingSoon})`} extra={<a href=\"#void\">Last 2 Years</a>}>\n          <VolumeChartPure />\n        </Card>\n      </div>}\n  </View >;\n};\n\nexport const OverviewPure = React.memo(Overview);\n","import { createSelector } from 'reselect';\n\nimport { AppState } from '../index';\n\nexport const selectOperationsState = (state: AppState) => state.operationsState;\n\nexport const getSortedOperations = createSelector(\n  selectOperationsState,\n  operationsState => [...operationsState.operations].sort((a, b) => +b.date - +a.date)\n);\n","import { ArrowRightOutlined, ArrowLeftOutlined, ClockCircleTwoTone, ExclamationCircleFilled } from '@ant-design/icons';\nimport React from 'react';\n\nimport { combineClassNames, ServiceOperationDirection, ServiceOperationStatus } from '@tezospayments/common';\n\nimport './OperationIcon.scss';\nimport { useCurrentLanguageResources } from '../../hooks';\n\ninterface OperationIconProps {\n  className?: string;\n  direction: ServiceOperationDirection;\n  status: ServiceOperationStatus;\n}\n\nexport const OperationIcon = (props: OperationIconProps) => {\n  const langResources = useCurrentLanguageResources();\n  const operationsLangResources = langResources.views.operations.operationList;\n\n  const isIncoming = props.direction === ServiceOperationDirection.Incoming;\n\n  const className = combineClassNames(\n    props.className,\n    'operation-icon',\n    { 'operation-icon_income': isIncoming },\n    { 'operation-icon_expense': !isIncoming },\n    { 'operation-icon_cancelled': props.status === ServiceOperationStatus.Cancelled }\n  );\n\n  return <div className={className}>\n    {isIncoming ? <ArrowRightOutlined title={operationsLangResources.income} /> : <ArrowLeftOutlined title={operationsLangResources.expense} />}\n    {props.status === ServiceOperationStatus.Pending && <ClockCircleTwoTone className=\"operation-icon__status operation-icon__status_pending\" title={operationsLangResources.pending} />}\n    {props.status === ServiceOperationStatus.Cancelled && <ExclamationCircleFilled className=\"operation-icon__status operation-icon__status_cancelled\" title={operationsLangResources.cancelled} />}\n  </div >;\n};\n\nexport const OperationIconPure = React.memo(OperationIcon);\n","import { BigNumber } from 'bignumber.js';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport {\n  ServiceOperationDirection, ServiceOperationType,\n  ServiceOperationStatus, combineClassNames\n} from '@tezospayments/common';\n\nimport { config } from '../../../config';\nimport { useCurrentLanguageResources } from '../../hooks';\nimport { ExplorerLink } from '../ExplorerLink/ExplorerLink';\nimport { OperationIconPure } from './OperationIcon';\n\nimport './OperationList.scss';\n\ninterface OperationListProps {\n  children: React.ReactNode;\n}\n\nexport const OperationList = (props: OperationListProps) => {\n  return <table className=\"operation-list\">\n    {props.children}\n  </table>;\n};\n\ninterface OperationListItemProps {\n  type: ServiceOperationType;\n  direction: ServiceOperationDirection;\n  status: ServiceOperationStatus;\n  date: Date;\n  hash: string;\n  serviceAddress: string;\n  serviceName: string;\n  accountAddress: string;\n  data: string;\n  value: BigNumber;\n  ticker: string;\n}\n\nconst OperationListItem = (props: OperationListItemProps) => {\n  const langResources = useCurrentLanguageResources();\n  const operationsLangResources = langResources.views.operations.operationList;\n\n  const isIncoming = props.direction === ServiceOperationDirection.Incoming;\n  const from = isIncoming ? props.accountAddress : props.serviceAddress;\n  const to = isIncoming ? props.serviceAddress : props.accountAddress;\n\n  const hash = getShortHash(props.hash);\n  const isDonation = props.type === ServiceOperationType.Donation;\n  const data = `${isDonation ? operationsLangResources.donationData : operationsLangResources.paymentData} ${props.data}`;\n\n  const sign = isIncoming ? '+' : '−';\n  const amountClassNames = combineClassNames('operation-list-item__amount',\n    { 'operation-list-item__amount_income': isIncoming },\n    { 'operation-list-item__amount_expense': !isIncoming },\n    { 'operation-list-item__amount_cancelled': props.status === ServiceOperationStatus.Cancelled }\n  );\n\n  const serviceLink = `${config.routers.services}/${props.serviceAddress}`;\n\n  return <tbody className=\"operation-list-group\">\n    <tr className=\"operation-list-row operation-list-row_general\">\n      <td className=\"operation-list-item__icon\">\n        <OperationIconPure direction={props.direction} status={props.status} />\n      </td>\n      <td className=\"operation-list-item__main-info\">\n        <span className=\"operation-list-item__date\">{props.date.toLocaleString()}</span>\n        <ExplorerLink hash={props.hash} className=\"operation-list-item__operation-hash\">{hash}</ExplorerLink>\n      </td>\n      <td className=\"operation-list-item__transfer-info\">\n        {from === props.serviceAddress\n          ? <Link to={serviceLink}>{props.serviceName}</Link>\n          : <ExplorerLink hash={from}>{getShortHash(from)}</ExplorerLink>}\n        &nbsp;→&nbsp;\n        {to === props.serviceAddress\n          ? <Link to={serviceLink}>{props.serviceName}</Link>\n          : <ExplorerLink hash={to}>{getShortHash(to)}</ExplorerLink>}\n      </td>\n      <td className={amountClassNames}>{sign}{props.value.toFormat()} {props.ticker}</td>\n    </tr>\n    <tr className=\"operation-list-row operation-list-row_order-data\">\n      <td></td>\n      <td className=\"operation-list-item__data\" colSpan={3}>\n        {data}\n      </td>\n    </tr>\n  </tbody>;\n};\n\nconst getShortHash = (hash: string) => `${hash.substr(0, 9)}...${hash.substr(hash.length - 6, 6)}`;\n\nOperationList.Item = OperationListItem;\n","import React from 'react';\n\nimport { useCurrentLanguageResources } from '../../../hooks';\n\nimport './NoOperationsPerformed.scss';\n\nexport const NoOperationsPerformed = () => {\n  const langResources = useCurrentLanguageResources();\n  const operationsLangResources = langResources.views.operations.operationList;\n\n  return <div className=\"no-operations-performed-container\">\n    {operationsLangResources.noOperationsPerformedYet}\n  </div>;\n};\n\nexport const NoOperationsPerformedPure = React.memo(NoOperationsPerformed);\n","import { Skeleton } from 'antd';\nimport React from 'react';\n\nimport { ServiceOperation, ServiceOperationDirection } from '@tezospayments/common';\n\nimport { getSortedOperations } from '../../../store/operations/selectors';\nimport { selectServicesState } from '../../../store/services/selectors';\nimport { NoServicesCreated } from '../../common/NoServicesCreated';\nimport { OperationList } from '../../common/OperationList';\nimport { useAppSelector, useCurrentLanguageResources } from '../../hooks';\nimport { View } from '../View';\nimport { NoOperationsPerformedPure } from './NoOperationsPerformed';\n\nexport const Operations = () => {\n  const langResources = useCurrentLanguageResources();\n  const operationsLangResources = langResources.views.operations;\n\n  const operations = useAppSelector(getSortedOperations);\n\n  const servicesState = useAppSelector(selectServicesState);\n\n  const operationProps: Array<React.ComponentProps<typeof OperationList.Item>> = operations.map(o => ({\n    date: o.date,\n    hash: o.hash,\n    data: ServiceOperation.publicPayloadExists(o) ? o.payload.public.valueString : '',\n    accountAddress: o.sender,\n    serviceAddress: o.target,\n    serviceName: servicesState.services.filter(s => s.contractAddress === o.target)[0]?.name || '',\n    ticker: 'XTZ',\n    value: o.amount,\n    status: o.status,\n    type: o.type,\n    direction: ServiceOperationDirection.Incoming\n  }));\n\n  return <View title={operationsLangResources.title}>\n    <View.Title>{operationsLangResources.title}</View.Title>\n    {!servicesState.initialized\n      ? <Skeleton active />\n      : !servicesState.services.length\n        ? <NoServicesCreated />\n        : !operations.length\n          ? <NoOperationsPerformedPure />\n          : <OperationList>\n            {operationProps.map(o => <OperationList.Item key={o.hash} {...o} />)}\n          </OperationList>}\n  </View>;\n};\n\nexport const OperationsPure = React.memo(Operations);\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Card } from 'antd';\nimport React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { config } from '../../../../config';\nimport { useCurrentLanguageResources } from '../../../hooks';\n\nimport './NewServiceCard.scss';\n\nexport const NewServiceCard = () => {\n  const langResources = useCurrentLanguageResources();\n  const commonLangResources = langResources.common;\n  const servicesLangResources = langResources.views.services;\n  const history = useHistory();\n\n  const handleCardClick = useCallback(() => {\n    history.push(config.routers.createService);\n  }, [history]);\n\n  return <Card bodyStyle={{ padding: 0 }} className=\"new-service-card-container\" onClick={handleCardClick}>\n    <div className=\"new-service-card\" title={servicesLangResources.createNewService}>\n      <div className=\"new-service-card__info\">\n        <PlusOutlined className=\"new-service-card__icon\" />\n        <span>{commonLangResources.new}</span>\n      </div>\n    </div>\n  </Card>;\n};\n\nexport const NewServiceCardPure = React.memo(NewServiceCard);\n","import { CheckCircleOutlined, CloseCircleOutlined, PauseCircleOutlined, SyncOutlined } from '@ant-design/icons';\nimport { Tag } from 'antd';\nimport React from 'react';\n\nimport { useCurrentLanguageResources } from '../../../hooks';\n\nimport './ActiveTag.scss';\n\ninterface ActiveTagProps {\n  paused: boolean;\n  deleted: boolean;\n  isUpdating: boolean;\n}\n\nexport const ActiveTag = (props: ActiveTagProps) => {\n  const langResources = useCurrentLanguageResources();\n  const servicesLangResources = langResources.views.services;\n\n  return props.isUpdating ?\n    <Tag icon={<SyncOutlined spin />} className=\"tag-active tag-active_updating\">{servicesLangResources.status.updating}</Tag>\n    : props.deleted\n      ? <Tag icon={<CloseCircleOutlined />} className=\"tag-active tag-active_deleted\">{servicesLangResources.status.deleted}</Tag>\n      : props.paused\n        ? <Tag icon={<PauseCircleOutlined />} className=\"tag-active tag-active_paused\">{servicesLangResources.status.paused}</Tag>\n        : <Tag icon={<CheckCircleOutlined />} className=\"tag-active tag-active_active\">{servicesLangResources.status.active}</Tag>;\n};\n\nexport const ActiveTagPure = React.memo(ActiveTag);\n","import { Tag } from 'antd';\nimport React from 'react';\n\nimport './CustomTag.scss';\n\ninterface CustomTagProps {\n  text: string;\n}\n\nexport const CustomTag = (props: CustomTagProps) => {\n  return <Tag className=\"tag-custom\">{props.text}</Tag>;\n};\n\nexport const CustomTagPure = React.memo(CustomTag);\n","import { Button, Card } from 'antd';\nimport React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { Service, combineClassNames, text } from '@tezospayments/common';\n\nimport { config } from '../../../../config';\nimport { ExplorerLinkPure } from '../../../common';\nimport { ActiveTagPure } from '../../../common/Tags';\nimport { useCurrentLanguageResources } from '../../../hooks';\n\nimport './ServiceCard.scss';\n\ninterface ServiceCardProps {\n  service: Service;\n  isUpdating: boolean;\n}\n\nexport const ServiceCard = (props: ServiceCardProps) => {\n  const history = useHistory();\n  const langResources = useCurrentLanguageResources();\n  const commonLangResources = langResources.common;\n\n  const handleCardClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    const tagName = (e.target as HTMLElement).tagName.toLowerCase();\n    if (tagName !== 'svg' && tagName !== 'a' && tagName !== 'path') {\n      history.push(`${config.routers.services}/${props.service.contractAddress}`);\n    }\n  }, [history, props.service.contractAddress]);\n\n  const logoClassName = combineClassNames(\n    'service-card__logo',\n    props.service.iconUrl ? 'service-card__logo_image' : 'service-card__logo_text',\n  );\n\n  return <Card size=\"small\" bodyStyle={{ padding: 0 }} className=\"service-card-container\" onClick={handleCardClick}>\n    <div className=\"service-card\">\n      <div className=\"service-card__info-container\">\n        <div className=\"service-card__main-info\">\n          {props.service.iconUrl\n            ? <img className={logoClassName} alt=\"logo\" src={props.service.iconUrl} />\n            : <span className={logoClassName}>{text.getAvatarText(props.service.name)}</span>}\n          <div className=\"service-card__name-container\">\n            <span className=\"service-card__name\" title={props.service.name}>{props.service.name}</span>\n            <div className=\"service-card__tags-container\">\n              <ActiveTagPure paused={props.service.paused} deleted={props.service.deleted} isUpdating={props.isUpdating} />\n            </div>\n          </div>\n        </div>\n        <div className=\"service-card__link-container\">\n          <ExplorerLinkPure hash={props.service.contractAddress} className=\"service-card__link\" showCopyButton>\n            {props.service.contractAddress}\n          </ExplorerLinkPure>\n        </div>\n      </div>\n      <div className=\"service-card__button-container\">\n        <Button className=\"service-card__button\" type=\"primary\">{commonLangResources.open}</Button>\n      </div>\n    </div>\n  </Card>;\n};\n\nexport const ServiceCardPure = React.memo(ServiceCard);\n","import { Skeleton } from 'antd';\nimport React from 'react';\n\nimport { getOperationsByService, getSortedServices, selectServicesState } from '../../../store/services/selectors';\nimport { NoServicesCreatedPure } from '../../common/NoServicesCreated';\nimport { useAppSelector, useCurrentLanguageResources } from '../../hooks';\nimport { View } from '../View';\nimport { NewServiceCardPure, ServiceCardPure } from './ServiceCards';\nimport './Services.scss';\n\nexport const Services = () => {\n  const langResources = useCurrentLanguageResources();\n  const servicesLangResources = langResources.views.services;\n\n  const servicesState = useAppSelector(selectServicesState);\n  const pendingOperations = useAppSelector(getOperationsByService);\n\n  const services = useAppSelector(getSortedServices);\n  const servicesCards = services.map(s => <ServiceCardPure\n    key={s.contractAddress}\n    service={s}\n    isUpdating={pendingOperations.has(s.contractAddress)}\n  />);\n\n  return <View title={servicesLangResources.title}>\n    <View.Title>{servicesLangResources.title}</View.Title>\n    {!servicesState.initialized\n      ? <Skeleton active />\n      : !servicesState.services.length\n        ? <NoServicesCreatedPure />\n        : <div className=\"services-container\">\n          {servicesCards}\n          <NewServiceCardPure />\n        </div>}\n  </View >;\n};\n\nexport const ServicesPure = React.memo(Services);\n","import { Button } from 'antd';\nimport React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { Service } from '@tezospayments/common';\n\nimport { config } from '../../../../config';\nimport { useCurrentLanguageResources } from '../../../hooks';\n\nimport './ActionsZone.scss';\n\ninterface ActionsZoneProps {\n  service: Service;\n  readOnly: boolean;\n}\n\nexport const ActionsZone = ({ service, readOnly }: ActionsZoneProps) => {\n  const langResources = useCurrentLanguageResources();\n  const servicesLangResources = langResources.views.services;\n  const history = useHistory();\n\n  const handleAcceptPaymentsClick = useCallback(() => {\n    history.push(config.routers.acceptServicePayments(service.contractAddress));\n  }, [history, service.contractAddress]);\n\n  return <div className=\"service-actions-zone\">\n    <span className=\"service-actions-zone__header\">Actions</span>\n\n    <div className=\"service-actions-zone__button-container\">\n      <p>{servicesLangResources.acceptPaymentsDescription}</p>\n      <Button disabled={readOnly} onClick={handleAcceptPaymentsClick} className=\"service-button\" type=\"primary\">{servicesLangResources.acceptPayments}</Button>\n    </div>\n  </div>;\n};\n\nexport const ActionsZonePure = React.memo(ActionsZone);\n","import { Button, Modal } from 'antd';\nimport React, { useCallback } from 'react';\n\nimport { Service } from '@tezospayments/common';\n\nimport { setDeleted, setPaused } from '../../../../store/services/slice';\nimport { useAppDispatch, useCurrentLanguageResources } from '../../../hooks';\n\nimport './DangerZone.scss';\n\ninterface DangerZoneProps {\n  service: Service;\n  readOnly: boolean;\n}\n\nexport const DangerZone = (props: DangerZoneProps) => {\n  const langResources = useCurrentLanguageResources();\n  const dangerZoneLangResources = langResources.views.services.dangerZone;\n  const dispatch = useAppDispatch();\n\n  const handlePauseModalOkClick = useCallback(() => {\n    dispatch(setPaused({ service: props.service, paused: !props.service.paused }));\n  }, [dispatch, props.service]);\n\n  const handleDeleteModalOkClick = useCallback(() => {\n    dispatch(setDeleted({ service: props.service, deleted: !props.service.deleted }));\n  }, [dispatch, props.service]);\n\n  const confirm = useCallback((text: string, isDanger: boolean, onOk: () => void) => {\n    Modal.confirm({\n      title: 'Confirm Operation',\n      onOk,\n      content: <p>{text}</p>,\n      okText: 'Yes',\n      okType: isDanger ? 'danger' : 'primary',\n      cancelText: 'No',\n      centered: true,\n      transitionName: '',\n      maskTransitionName: ''\n    });\n  }, []);\n\n  const handlePauseClick = useCallback(() => {\n    const text = props.service.paused ? dangerZoneLangResources.unPauseServiceConfirmation : dangerZoneLangResources.pauseServiceConfirmation;\n    confirm(text, false, handlePauseModalOkClick);\n  }, [confirm, dangerZoneLangResources.pauseServiceConfirmation, dangerZoneLangResources.unPauseServiceConfirmation, handlePauseModalOkClick, props.service.paused]);\n\n  const handleDeleteClick = useCallback(() => {\n    const text = props.service.deleted ? dangerZoneLangResources.unDeleteServiceConfirmation : dangerZoneLangResources.deleteServiceConfirmation;\n    confirm(text, !props.service.deleted, handleDeleteModalOkClick);\n  }, [confirm, dangerZoneLangResources.deleteServiceConfirmation, dangerZoneLangResources.unDeleteServiceConfirmation, handleDeleteModalOkClick, props.service.deleted]);\n\n  return <>\n    <div className=\"service-danger-zone\">\n      <span className=\"service-danger-zone__header\">{dangerZoneLangResources.title}</span>\n      <div className=\"service-danger-zone__button-container\">\n        <p>{props.service.paused ? dangerZoneLangResources.unPauseServiceDescription : dangerZoneLangResources.pauseServiceDescription}</p>\n        <Button disabled={props.readOnly} className=\"service-button\" type=\"default\" onClick={handlePauseClick}>\n          {props.service.paused ? dangerZoneLangResources.unPauseService : dangerZoneLangResources.pauseService}\n        </Button>\n      </div>\n      <hr className=\"service-danger-zone__divider\" />\n      <div className=\"service-danger-zone__button-container\">\n        <p>{props.service.deleted ? dangerZoneLangResources.unDeleteServiceDescription : dangerZoneLangResources.deleteServiceDescription}</p>\n        <Button disabled={props.readOnly} className=\"service-button\" type=\"primary\" danger onClick={handleDeleteClick}>\n          {props.service.deleted ? dangerZoneLangResources.unDeleteService : dangerZoneLangResources.deleteService}\n        </Button>\n      </div>\n    </div>\n  </>;\n};\n\nexport const DangerZonePure = React.memo(DangerZone);\n","import { CopyOutlined } from '@ant-design/icons';\nimport { Button, Divider, Input, Modal, Radio, RadioChangeEvent, Typography, Popconfirm } from 'antd';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { KeyType, Service } from '@tezospayments/common';\n\nimport { addApiKey } from '../../../../../store/services/slice';\nimport { useCurrentLanguageResources } from '../../../../hooks';\n\nimport './AddApiKeyModal.scss';\n\nconst Search = Input.Search;\n\ninterface AddApiKeyModalProps {\n  service: Service;\n  visible: boolean;\n  onCancel: () => void;\n}\n\nconst algorithmOptions = Object.values(KeyType).map(v => ({ label: v, value: v }));\n\nexport const AddApiKeyModal = (props: AddApiKeyModalProps) => {\n  const langResources = useCurrentLanguageResources();\n  const commonLangResources = langResources.common;\n  const servicesLangResources = langResources.views.services;\n  const dispatch = useDispatch();\n\n  const [algorithmType, setAlgorithmType] = useState(algorithmOptions[0]?.value || KeyType.Ed25519);\n  const handleAlgorithmTypeChanges = useCallback((e: RadioChangeEvent) => {\n    setAlgorithmType(e.target.value);\n  }, []);\n\n  const [name, setName] = useState('');\n  const handleNameChanged = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n  }, []);\n\n  const [publicKey, secretKey] = getKeys(algorithmType);\n\n  const publicKeyRef = useRef<Input>(null);\n  const secretKeyRef = useRef<Input>(null);\n\n  const handleCopyClick = useCallback((ref: React.RefObject<Input>) => {\n    const input = ref.current;\n\n    if (input) {\n      input.select();\n      navigator.clipboard.writeText(input.state.value);\n    }\n  }, []);\n\n  const handleAddKeyConfirm = useCallback(() => {\n    dispatch(addApiKey({ service: props.service, signingKey: { name, publicKey } }));\n    props.onCancel();\n  }, [dispatch, name, props, publicKey]);\n\n  return <Modal className=\"api-key-modal\" title={`${servicesLangResources.devZone.addKey} (${langResources.common.comingSoon.toLowerCase()})`}\n    centered destroyOnClose visible={props.visible} onCancel={props.onCancel}\n    footer={<div className=\"api-key-modal__footer\">\n      <Button key=\"back\" onClick={props.onCancel}>\n        {commonLangResources.cancel}\n      </Button>\n      <Popconfirm\n        disabled={!name}\n        title={servicesLangResources.devZone.saveSecretKeyConfirm}\n        placement=\"topRight\"\n        onConfirm={handleAddKeyConfirm}\n        okText={commonLangResources.yes}\n        cancelText={commonLangResources.no}\n      >\n        <Button key=\"submit\" className=\"api-key-modal__ok-button\" type=\"primary\" disabled={!name}>\n          {servicesLangResources.devZone.saveKeys}\n        </Button>\n      </Popconfirm>\n    </div>}\n  >\n    <span className=\"api-key-modal__label\">{servicesLangResources.devZone.name}:</span>\n    <Input autoFocus value={name} onChange={handleNameChanged} />\n    <span className=\"api-key-modal__label\">{servicesLangResources.devZone.algorithm}:</span>\n    <Radio.Group options={algorithmOptions} value={algorithmType} onChange={handleAlgorithmTypeChanges} />\n    <Divider />\n    <span className=\"api-key-modal__label\">{servicesLangResources.devZone.publicKey}:</span>\n    <Search ref={publicKeyRef} readOnly value={publicKey} enterButton={<Button icon={<CopyOutlined />} />} onSearch={() => handleCopyClick(publicKeyRef)} />\n    <span className=\"api-key-modal__label\">{servicesLangResources.devZone.secretKey}:</span>\n    <Search ref={secretKeyRef} readOnly value={secretKey} enterButton={<Button icon={<CopyOutlined />} />} onSearch={() => handleCopyClick(secretKeyRef)} />\n    <Typography.Text mark>{servicesLangResources.devZone.saveSecretKeyWarning}</Typography.Text>\n  </Modal>;\n};\n\nexport const AddApiKeyModalPure = React.memo(AddApiKeyModal);\n\nconst getKeys = (type: KeyType): [string, string] => {\n  switch (type) {\n    case KeyType.Ed25519:\n      return ['edpkvQXtVcy8YrBLmMhn8EDt4Zb46TWZX1QUxxepFzJgsWU6YKadJP', 'edskRwse4Z8ZZNCC7xzCEUrTBtCeEPhv8gfBiWrE8cysRQpz45HCQjChdDckNEBZZMCxjPMkHhmGkUnwBs22cKr2nrwiGfQHsP'];\n    case KeyType.Secp256k1:\n      return ['sppk7cjayJkatAA6Kzd9w6DSRrRDq6JoRAfugi1fqahpyjCBRCLGfob', 'spsk1VyxSVYfX3CfNpSNDxBdR97LnAdQA59jWpc4HYXtYg1cX53V6Y'];\n    case KeyType.P256:\n      return ['p2pk65H621C6fgfcuhiUcQmx3GRz8iNxjzMB1BG2WQKAYKEcbVzyJMD', 'p2sk2yHAwhsLaRCm8zAfN4K1Py7fBhxgR1kAB5SCYn9yGWofkjqNTN'];\n\n    default:\n      throw new Error('Unknown algorithm type');\n  }\n};\n","import { DeleteOutlined } from '@ant-design/icons';\nimport { Button, List, Modal } from 'antd';\nimport React, { useCallback, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Service, ServiceSigningKey } from '@tezospayments/common';\n\nimport { deleteApiKey } from '../../../../../store/services/slice';\nimport { useCurrentLanguageResources } from '../../../../hooks';\n\nimport './ApiKeyList.scss';\n\ninterface ApiKeyListProps {\n  service: Service;\n  readOnly: boolean;\n}\n\nexport const ApiKeyList = (props: ApiKeyListProps) => {\n  const langResources = useCurrentLanguageResources();\n  const servicesLangResources = langResources.views.services;\n  const dispatch = useDispatch();\n  const apiKeys = useMemo(() => [...props.service.signingKeys.values()], [props.service.signingKeys]);\n\n  const confirm = useCallback((text: string, onOk: () => void) => {\n    Modal.confirm({\n      title: 'Confirm Operation',\n      onOk,\n      content: <p>{text}</p>,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      centered: true,\n      transitionName: '',\n      maskTransitionName: ''\n    });\n  }, []);\n\n  const handleRemoveItem = useCallback((item: ServiceSigningKey) => {\n    const text = servicesLangResources.devZone.deleteKeyConfirmation + (item.name ? `: ${item.name}` : '');\n    confirm(text, () => {\n      dispatch(deleteApiKey({ service: props.service, publicKey: item.publicKey }));\n    });\n  }, [confirm, dispatch, props.service, servicesLangResources.devZone.deleteKeyConfirmation]);\n\n  return <List size=\"small\" bordered>\n    {apiKeys.length\n      ? apiKeys.map(apiKey => <List.Item key={apiKey.publicKey} className=\"api-keys__item\">\n        <span>{apiKey.name}</span>\n        <div>\n          <span className=\"api-keys__item-key\">{apiKey.publicKey}</span>\n          <Button disabled={props.readOnly} onClick={() => handleRemoveItem(apiKey)} icon={<DeleteOutlined />} danger type=\"link\"></Button>\n        </div>\n      </List.Item>\n      ) :\n      <List.Item className=\"api-keys__item api-keys__item_empty\">\n        {servicesLangResources.devZone.noApiKeysAddedYet}\n      </List.Item>}\n  </List>;\n};\n\nexport const ApiKeyListPure = React.memo(ApiKeyList);\n","\nimport { Button, } from 'antd';\nimport React, { useCallback, useState } from 'react';\n\nimport { Service } from '@tezospayments/common';\n\nimport { useCurrentLanguageResources } from '../../../hooks';\nimport { AddApiKeyModalPure } from './AddApiKeyModal';\nimport { ApiKeyListPure } from './ApiKeyList';\n\nimport './DevZone.scss';\n\ninterface DevZoneProps {\n  service: Service;\n  readOnly: boolean;\n}\n\nexport const DevZone = (props: DevZoneProps) => {\n  const langResources = useCurrentLanguageResources();\n  const servicesLangResources = langResources.views.services;\n\n  const [addKeyModalVisible, setAddKeyModalVisible] = useState(false);\n  const handleAddKeyButtonClick = useCallback(() => setAddKeyModalVisible(true), []);\n  const handleClosePopupClick = useCallback(() => setAddKeyModalVisible(false), []);\n\n  return <>\n    <div className=\"service-dev-zone__button-container\">\n      <span className=\"service-dev-zone__header\">{`${servicesLangResources.devZone.title} (${langResources.common.comingSoon.toLowerCase()}`})</span>\n      <Button disabled={props.readOnly} className=\"service-button\" type=\"default\" onClick={handleAddKeyButtonClick}>\n        {servicesLangResources.devZone.addKey}\n      </Button>\n    </div>\n    <ApiKeyListPure service={props.service} readOnly={props.readOnly} />\n    <AddApiKeyModalPure service={props.service} visible={addKeyModalVisible} onCancel={handleClosePopupClick} />\n  </>;\n};\n\nexport const DevZonePure = React.memo(DevZone);\n","import { EditFilled } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { Service, ServiceOperationType, combineClassNames, text } from '@tezospayments/common';\n\nimport { config } from '../../../../config';\nimport { ExplorerLinkPure } from '../../../common';\nimport { ActiveTagPure, CustomTagPure } from '../../../common/Tags';\nimport { useCurrentLanguageResources } from '../../../hooks';\n\nimport './Header.scss';\n\ninterface HeaderProps {\n  service: Service;\n  isUpdating: boolean;\n  readOnly: boolean;\n}\n\nexport const Header = ({ service, isUpdating, readOnly }: HeaderProps) => {\n  const history = useHistory();\n  const langResources = useCurrentLanguageResources();\n  const servicesLangResources = langResources.views.services;\n\n  const logoClassName = combineClassNames(\n    'service__logo',\n    service?.iconUrl ? 'service__logo_image' : 'service__logo_text',\n  );\n\n  const arePaymentsAllowed = service?.allowedOperationType === ServiceOperationType.Payment || service?.allowedOperationType === ServiceOperationType.All;\n  const areDonationsAllowed = service?.allowedOperationType === ServiceOperationType.Donation || service?.allowedOperationType === ServiceOperationType.All;\n\n  const handleEditClick = useCallback(() => {\n    history.push(`${config.routers.services}/${service.contractAddress}?edit=true`);\n  }, [history, service.contractAddress]);\n\n  return <div className=\"service-header\">\n    <div className=\"service-header__logo-container\">\n      {service.iconUrl\n        ? <img className={logoClassName} alt=\"logo\" src={service.iconUrl} />\n        : <span className={logoClassName}>{text.getAvatarText(service.name)}</span>}\n      <div className=\"service-header__main-info\">\n        <h1>{service.name}</h1>\n        <ExplorerLinkPure hash={service.contractAddress} className=\"service__link\" showCopyButton>\n          {service.contractAddress}\n        </ExplorerLinkPure>\n        <div className=\"service-header__tags-container\">\n          <ActiveTagPure paused={service.paused} deleted={service.deleted} isUpdating={isUpdating} />\n          {arePaymentsAllowed && <CustomTagPure text={servicesLangResources.operations.paymentsEnabled} />}\n          {areDonationsAllowed && <CustomTagPure text={servicesLangResources.operations.donationsEnabled} />}\n        </div>\n      </div>\n    </div>\n    <Button disabled={readOnly} className=\"service-button\" icon={<EditFilled />} type=\"primary\" onClick={handleEditClick}>{servicesLangResources.editing.editService}</Button>\n  </div>;\n};\n\nexport const HeaderPure = React.memo(Header);\n","var _g;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgTelegram({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"1000px\",\n    height: \"1000px\",\n    viewBox: \"0 0 1000 1000\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Artboard\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Oval\",\n    fill: \"currentColor\",\n    cx: 500,\n    cy: 500,\n    r: 500\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M226.328419,494.722069 C372.088573,431.216685 469.284839,389.350049 517.917216,369.122161 C656.772535,311.36743 685.625481,301.334815 704.431427,301.003532 C708.567621,300.93067 717.815839,301.955743 723.806446,306.816707 C728.864797,310.92121 730.256552,316.46581 730.922551,320.357329 C731.588551,324.248848 732.417879,333.113828 731.758626,340.040666 C724.234007,419.102486 691.675104,610.964674 675.110982,699.515267 C668.10208,736.984342 654.301336,749.547532 640.940618,750.777006 C611.904684,753.448938 589.856115,731.588035 561.733393,713.153237 C517.726886,684.306416 492.866009,666.349181 450.150074,638.200013 C400.78442,605.66878 432.786119,587.789048 460.919462,558.568563 C468.282091,550.921423 596.21508,434.556479 598.691227,424.000355 C599.00091,422.680135 599.288312,417.758981 596.36474,415.160431 C593.441168,412.561881 589.126229,413.450484 586.012448,414.157198 C581.598758,415.158943 511.297793,461.625274 375.109553,553.556189 C355.154858,567.258623 337.080515,573.934908 320.886524,573.585046 C303.033948,573.199351 268.692754,563.490928 243.163606,555.192408 C211.851067,545.013936 186.964484,539.632504 189.131547,522.346309 C190.260287,513.342589 202.659244,504.134509 226.328419,494.722069 Z\",\n    id: \"Path-3\",\n    fill: \"#FFFFFF\"\n  }))));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTelegram);\nexport default __webpack_public_path__ + \"static/media/telegram.fee81c94.svg\";\nexport { ForwardRef as ReactComponent };","import {\n  LinkOutlined, FacebookOutlined, TwitterOutlined, InstagramOutlined,\n  GithubOutlined, MailOutlined, RedditOutlined\n} from '@ant-design/icons';\n\nimport { IconId } from '@tezospayments/common';\n\nimport { TelegramIcon } from '../../../assets/icons';\n\nexport const iconIdMap = {\n  [IconId.Common]: LinkOutlined,\n  [IconId.Email]: MailOutlined,\n  [IconId.Telegram]: TelegramIcon,\n  [IconId.Facebook]: FacebookOutlined,\n  [IconId.Twitter]: TwitterOutlined,\n  [IconId.Instagram]: InstagramOutlined,\n  [IconId.GitHub]: GithubOutlined,\n  [IconId.Reddit]: RedditOutlined\n};\n","import React from 'react';\n\nimport { ServiceLinkHelper } from '@tezospayments/common';\n\nimport { ExternalLink } from '../../common';\nimport { iconIdMap } from './iconIdMap';\nimport './ServiceLink.scss';\n\ninterface ServiceLinkProps {\n  link: string;\n}\n\nconst serviceLinkHelper = new ServiceLinkHelper();\n\nexport const ServiceLink = (props: ServiceLinkProps) => {\n  const linkInfo = serviceLinkHelper.getLinkInfo(props.link);\n  if (!linkInfo)\n    return null;\n\n  const Icon = iconIdMap[linkInfo.icon];\n\n  return <span className=\"service-link\">\n    <Icon className=\"service-link__icon\" />\n    <ExternalLink className=\"service-link__link\" href={linkInfo.formattedLink}>{linkInfo.displayLink}</ExternalLink>\n  </span>;\n};\n\nexport const ServiceLinkPure = React.memo(ServiceLink);\n","import { combineClassNames } from '@tezospayments/common';\n\nimport { ServiceLink } from './ServiceLink';\nimport './ServiceLinks.scss';\n\ninterface ServiceLinksProps {\n  className?: string;\n  links: readonly string[];\n}\n\nexport const ServiceLinks = (props: ServiceLinksProps) => {\n  return <div className={combineClassNames('service-links', props.className)}>\n    {props.links.map(link => <ServiceLink link={link} key={link} />).filter(Boolean)}\n  </div>;\n};\n","import { DeleteOutlined } from '@ant-design/icons';\nimport { Button, Input } from 'antd';\nimport { useCallback } from 'react';\n\nimport { ServiceLinkHelper } from '@tezospayments/common';\n\nimport { iconIdMap } from './iconIdMap';\n\nimport './ServiceLinkEditor.scss';\n\ninterface ServiceLinkEditorProps {\n  value: string;\n  readOnly: boolean;\n  onChange: (e: { value: string }) => void\n  onDelete: () => void;\n}\n\nconst serviceLinkHelper = new ServiceLinkHelper();\n\nexport const ServiceLinkEditor = (props: ServiceLinkEditorProps) => {\n  const linkInfo = serviceLinkHelper.getLinkInfo(props.value, true);\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    props.onChange({ value: e.target.value });\n  }, [props]);\n\n  if (!linkInfo) {\n    return null;\n  }\n\n  const Icon = iconIdMap[linkInfo.icon];\n\n  return <div className=\"service-link-editor\">\n    <Icon className=\"service-link-editor__icon\" />\n    <Input readOnly={props.readOnly} className=\"service-link-editor__input\" value={props.value} onChange={handleChange} />\n    <Button disabled={props.readOnly} className=\"service-link-editor__delete-button\" type=\"text\" danger icon={<DeleteOutlined />} onClick={props.onDelete} />\n  </div>;\n};\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { useCallback } from 'react';\n\nimport { useCurrentLanguageResources } from '../../hooks';\nimport { ServiceLinkEditor } from './ServiceLinkEditor';\n\nimport './ServiceLinksEditor.scss';\n\ninterface ServiceLinksEditorProps {\n  value: string[];\n  readOnly: boolean;\n  onChange: (e: { value: string[] }) => void;\n}\n\nexport const ServiceLinksEditor = (props: ServiceLinksEditorProps) => {\n  const langResources = useCurrentLanguageResources();\n  const servicesLangResources = langResources.views.services;\n\n  const handleChange = useCallback((i: number, e: { value: string }) => {\n    const value = [...props.value];\n    value[i] = e.value;\n    props.onChange({ value });\n  }, [props]);\n\n  const handleDelete = useCallback((i: number) => {\n    const value = [...props.value];\n    value.splice(i, 1);\n    props.onChange({ value });\n  }, [props]);\n\n  const handleAdd = useCallback(() => {\n    const value = [...props.value, ''];\n    props.onChange({ value });\n  }, [props]);\n\n  const editors = props.value.map((l, i) => <ServiceLinkEditor readOnly={props.readOnly} key={i} value={l} onDelete={() => handleDelete(i)} onChange={e => handleChange(i, e)} />);\n\n  return <div className=\"service-links-editor\">\n    {editors}\n    <Button disabled={props.readOnly} className=\"service-links-editor__button\" icon={<PlusOutlined />} onClick={handleAdd}>\n      {servicesLangResources.editing.addLink}\n    </Button>\n  </div >;\n};\n","import React from 'react';\n\nimport { tezosMeta, Token, Service } from '@tezospayments/common';\n\nimport { selectTokensState } from '../../../../store/services/selectors';\nimport { TokenList } from '../../../common';\nimport { useAppSelector } from '../../../hooks';\n\nimport './Tokens.scss';\n\ninterface TokensProps {\n  service: Service\n}\n\nexport const Tokens = ({ service }: TokensProps) => {\n  const tokens = useAppSelector(selectTokensState);\n  const allowedTokens: Token[] = [];\n  service?.allowedTokens.assets.forEach(a => {\n    const token = tokens.get(a);\n    if (token) {\n      allowedTokens.push(token);\n    }\n  });\n\n  const tokenItems = [];\n  if (service?.allowedTokens.tez) {\n    tokenItems.push(<TokenList.Item\n      key={tezosMeta.symbol}\n      className=\"service-token-list-item\"\n      ticker={tezosMeta.symbol}\n      name={tezosMeta.name}\n      decimals={tezosMeta.decimals}\n      iconSrc={tezosMeta.thumbnailUri}\n      highlightSign />);\n  }\n\n  allowedTokens.forEach(t => {\n    tokenItems.push(<TokenList.Item\n      key={t.metadata?.symbol}\n      className=\"service-token-list-item\"\n      ticker={t.metadata?.symbol || 'unknown'}\n      name={t.metadata?.name || 'unknown'}\n      decimals={t.metadata ? t.metadata.decimals : 2}\n      iconSrc={t.metadata?.thumbnailUri}\n      highlightSign />);\n  });\n\n  return <TokenList>\n    {tokenItems}\n  </TokenList>;\n};\n\nexport const TokensPure = React.memo(Tokens);\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Button, Checkbox, Input } from 'antd';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { ServiceLinkHelper, Service, ServiceOperationType } from '@tezospayments/common';\n\nimport { config } from '../../../../config';\nimport { getCurrentAccount } from '../../../../store/accounts/selectors';\nimport { createService, updateService } from '../../../../store/services/slice';\nimport { ServiceLinksEditor } from '../../../common/ServiceLinks';\nimport { useAppDispatch, useAppSelector, useCurrentLanguageResources } from '../../../hooks';\nimport { View } from '../../View';\nimport { TokensPure } from '../Tokens';\n\nimport './ServiceEditForm.scss';\n\ninterface ServiceEditFormProps {\n  service: Service;\n  isCreateMode: boolean;\n  readOnly: boolean;\n}\n\nconst serviceLinkHelper = new ServiceLinkHelper();\n\nexport const ServiceEditForm = (props: ServiceEditFormProps) => {\n  const history = useHistory();\n  const langResources = useCurrentLanguageResources();\n  const commonLangResources = langResources.common;\n  const servicesLangResources = langResources.views.services;\n  const currentAccount = useAppSelector(getCurrentAccount);\n\n  const dispatch = useAppDispatch();\n\n  const handleCancelClick = useCallback(() => {\n    history.push(`${config.routers.services}/${props.service.contractAddress}`);\n  }, [history, props.service.contractAddress]);\n\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [name, setName] = useState(props.service.name);\n  const [description, setDescription] = useState(props.service.description);\n  const [links, setLinks] = useState(props.service.links);\n\n  const validate = useCallback(() => {\n    const isValid = !!name\n      && links.every(l => !!serviceLinkHelper.getLinkInfo(l));\n\n    setIsFormValid(isValid);\n  }, [links, name]);\n\n  useEffect(() => validate(), [validate]);\n\n  const handleNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    validate();\n  }, [validate]);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setDescription(e.target.value);\n    validate();\n  }, [validate]);\n\n  const handleLinksChange = useCallback((e: { value: string[] }) => {\n    setLinks(e.value);\n    validate();\n  }, [validate]);\n\n  const [acceptPayments, setAcceptPayments] = useState(props.service.allowedOperationType === ServiceOperationType.All || props.service.allowedOperationType === ServiceOperationType.Payment);\n  const [acceptDonations, setAcceptDonations] = useState(props.service.allowedOperationType === ServiceOperationType.All || props.service.allowedOperationType === ServiceOperationType.Donation);\n\n  const handleAcceptPaymentsChange = useCallback((e: CheckboxChangeEvent) => {\n    setAcceptPayments(e.target.checked);\n    if (!e.target.checked && !acceptDonations) {\n      setAcceptDonations(true);\n    }\n  }, [acceptDonations]);\n\n  const handleDonationsPaymentsChange = useCallback((e: CheckboxChangeEvent) => {\n    setAcceptDonations(e.target.checked);\n    if (!e.target.checked && !acceptPayments) {\n      setAcceptPayments(true);\n    }\n  }, [acceptPayments]);\n\n  const handleUpdateClick = useCallback(() => {\n    const allowedOperationType = acceptPayments && acceptDonations\n      ? ServiceOperationType.All\n      : acceptPayments\n        ? ServiceOperationType.Payment\n        : ServiceOperationType.Donation;\n\n    const updatedService: Service = {\n      ...props.service,\n      name,\n      description,\n      allowedOperationType,\n      links,\n      network: props.isCreateMode && currentAccount ? currentAccount.network : props.service.network\n    };\n\n\n    if (props.isCreateMode) {\n      dispatch(createService(updatedService));\n    } else {\n      dispatch(updateService(updatedService));\n    }\n\n    handleCancelClick();\n  }, [acceptDonations, acceptPayments, currentAccount, description, dispatch, handleCancelClick, links, name, props.isCreateMode, props.service]);\n\n  const operationName = props.isCreateMode ? servicesLangResources.editing.createService : servicesLangResources.editing.updateService;\n\n  return <>\n    <View.Title>{operationName}</View.Title>\n    <div className=\"service-edit\">\n      <span className=\"service-edit__caption\">{servicesLangResources.editing.serviceName}</span>\n      <Input readOnly={props.readOnly} placeholder={servicesLangResources.editing.serviceName} value={name} onChange={handleNameChange} />\n      <span className=\"service-edit__caption\">{servicesLangResources.editing.description}</span>\n      <Input.TextArea readOnly={props.readOnly} rows={5} placeholder={servicesLangResources.editing.description} value={description} onChange={handleDescriptionChange} />\n      <div className=\"service-edit__lists-container\">\n        <div className=\"service-edit__list-container\">\n          <span className=\"service-edit__list-header\">{servicesLangResources.allowedCurrencies}</span>\n          <TokensPure service={props.service} />\n          <Button className=\"service-edit__button\" disabled icon={<PlusOutlined />}>\n            {`${servicesLangResources.editing.addCurrency} (${commonLangResources.comingSoon})`}\n          </Button>\n        </div>\n        <div className=\"service-edit__list-container\">\n          <span className=\"service-edit__list-header\">{servicesLangResources.links}</span>\n          <ServiceLinksEditor readOnly={props.readOnly} value={links as string[]} onChange={handleLinksChange} />\n        </div>\n      </div>\n      <span className=\"service-edit__caption\">{servicesLangResources.editing.accept}</span>\n      <div className=\"service-edit__accept-list\">\n        <Checkbox disabled={props.readOnly} className=\"service-edit__accept-list-item\" checked={acceptPayments} onChange={handleAcceptPaymentsChange}>\n          {servicesLangResources.editing.acceptPayments}\n        </Checkbox>\n        <Checkbox disabled={props.readOnly} className=\"service-edit__accept-list-item\" checked={acceptDonations} onChange={handleDonationsPaymentsChange}>\n          {servicesLangResources.editing.acceptDonations}\n        </Checkbox>\n      </div>\n      <div className=\"service-edit__buttons-container\">\n        <Button className=\"service-edit__button\" onClick={handleCancelClick}>{commonLangResources.cancel}</Button>\n        <Button className=\"service-edit__button\" onClick={handleUpdateClick} disabled={!isFormValid || props.readOnly} type=\"primary\">{operationName}</Button>\n      </div>\n    </div>\n  </>;\n};\n\nexport const ServiceEditFormPure = React.memo(ServiceEditForm);\n","import React from 'react';\n\nimport { Service } from '@tezospayments/common';\n\nimport { ServiceLinks } from '../../../common/ServiceLinks';\nimport { useCurrentLanguageResources } from '../../../hooks';\nimport { TokensPure } from '../Tokens';\n\nimport './ViewZone.scss';\n\ninterface ViewZoneProps {\n  service: Service;\n}\n\nexport const ViewZone = ({ service }: ViewZoneProps) => {\n  const langResources = useCurrentLanguageResources();\n  const servicesLangResources = langResources.views.services;\n\n  return <div className=\"service-view-zone\">\n    <p className=\"service-view-zone__description\">{service.description}</p>\n    <div className=\"service-view-zone__lists-container\">\n      <div className=\"service-view-zone__list-container\">\n        <span className=\"service-view-zone__list-header\">{servicesLangResources.allowedCurrencies}</span>\n        <TokensPure service={service} />\n      </div>\n      <div className=\"service-view-zone__list-container\">\n        <span className=\"service-view-zone__list-header\">{servicesLangResources.links}</span>\n        <ServiceLinks className=\"service-info__links\" links={service.links} />\n      </div>\n    </div>\n  </div>;\n};\n\nexport const ViewZonePure = React.memo(ViewZone);\n","import { Skeleton } from 'antd';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { emptyService, Service as ServiceInterface, combineClassNames } from '@tezospayments/common';\n\nimport { getOperationsByService, selectServicesState } from '../../../store/services/selectors';\nimport { useAppSelector, useQuery } from '../../hooks';\nimport { View } from '../View';\nimport { ActionsZonePure } from './ActionsZone';\nimport { DangerZonePure } from './DangerZone';\nimport { DevZonePure } from './DevZone';\nimport { HeaderPure } from './Header';\nimport { ServiceEditFormPure } from './ServiceEditForm';\nimport { ViewZonePure } from './ViewZone';\n\nimport './Service.scss';\n\nexport enum ServiceViewMode {\n  ViewAndEdit, Create\n}\n\ninterface ServiceProps {\n  mode: ServiceViewMode,\n}\n\nexport const Service = (props: ServiceProps) => {\n  const query = useQuery();\n  const isEdit = !!query.get('edit');\n  const { address } = useParams<{ address: string }>();\n  const { services, initialized: isInitialized } = useAppSelector(selectServicesState);\n  const pendingOperations = useAppSelector(getOperationsByService);\n  const isUpdating = pendingOperations.has(address);\n  const readOnly = !!pendingOperations.size;\n  const isCreateMode = props.mode === ServiceViewMode.Create;\n\n  //TODO: Use Map\n  const service = isCreateMode ? { ...emptyService } as ServiceInterface : services.filter(s => s.contractAddress === address)[0];\n\n  const title = isInitialized && service ? service.name : address;\n  const className = combineClassNames('service-container', isEdit || isCreateMode ? 'service-container_edit' : 'service-container_view');\n\n  return <View title={title} className={className}>\n    {!isInitialized || !service\n      ? <Skeleton active />\n      : isEdit || isCreateMode\n        ? <ServiceEditFormPure service={service} isCreateMode={isCreateMode} readOnly={readOnly} />\n        : <>\n          <HeaderPure service={service} isUpdating={isUpdating} readOnly={readOnly} />\n          <ViewZonePure service={service} />\n          <ActionsZonePure service={service} readOnly={isUpdating || service.deleted} />\n          <DevZonePure service={service} readOnly={readOnly} />\n          <DangerZonePure service={service} readOnly={readOnly} />\n        </>}\n  </View>;\n};\n\nexport const ServicePure = React.memo(Service);\n","import { useLocation } from 'react-router-dom';\n\nexport const useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n","import { GlobalOutlined, GithubFilled, TwitterCircleFilled, RedditCircleFilled } from '@ant-design/icons';\nimport React from 'react';\n\nimport { TelegramIcon } from '../../../assets/icons';\nimport { config } from '../../../config';\nimport { ExternalLink } from '../../common';\nimport { useCurrentLanguageResources } from '../../hooks';\nimport { View } from '../View';\nimport './About.scss';\n\nexport const About = () => {\n  const langResources = useCurrentLanguageResources();\n  const aboutLangResources = langResources.views.about;\n\n  return <View title={aboutLangResources.title} className=\"about-view\">\n    <View.Title className=\"about-view__title\">{aboutLangResources.detailedTitle}</View.Title>\n    <div className=\"about-view__version-info\">\n      <ExternalLink href={config.app.version.link}>\n        {config.app.version.name}\n      </ExternalLink>\n      &nbsp;{aboutLangResources.build}&nbsp;\n      <ExternalLink href={config.app.buildInfo.link}>\n        {config.app.buildInfo.commitShortSha}\n      </ExternalLink>\n    </div>\n    <div className=\"about-view__links\">\n      <ExternalLink className=\"about-link\" href={config.links.tezosPayments.webSite}>\n        <GlobalOutlined className=\"about-link__icon\" />\n      </ExternalLink>\n      <ExternalLink className=\"about-link\" href={config.links.tezosPayments.gitHub}>\n        <GithubFilled className=\"about-link__icon\" />\n      </ExternalLink>\n      <ExternalLink className=\"about-link\" href={config.links.tezosPayments.telegram}>\n        <TelegramIcon className=\"about-link__icon\" />\n      </ExternalLink>\n      <ExternalLink className=\"about-link\" href={config.links.tezosPayments.twitter}>\n        <TwitterCircleFilled className=\"about-link__icon\" />\n      </ExternalLink>\n      <ExternalLink className=\"about-link\" href={config.links.tezosPayments.reddit}>\n        <RedditCircleFilled className=\"about-link__icon\" />\n      </ExternalLink>\n    </div>\n    <div className=\"about-view__powered-by\">\n      {aboutLangResources.poweredBy}\n      &nbsp;\n      <ExternalLink href={config.links.tzKT}>\n        {aboutLangResources.tzKt}\n      </ExternalLink>\n      &nbsp;\n      {aboutLangResources.api}\n    </div>\n  </View>;\n};\n\nexport const AboutPure = React.memo(About);\n","import { Button, Dropdown, Menu } from 'antd';\nimport React, { useCallback } from 'react';\n\nimport { Network, networks, networksCollection } from '@tezospayments/common';\n\nimport { config } from '../../../../config';\nimport { connectAccount } from '../../../../store/accounts/slice';\nimport { useAppDispatch, useCurrentLanguageResources } from '../../../hooks';\n\nimport './ConnectDropdown.scss';\n\nexport const ConnectDropdown = () => {\n  const dispatch = useAppDispatch();\n  const handleConnectButtonClick = useCallback(() => {\n    dispatch(connectAccount(networks.granadanet));\n  }, [dispatch]);\n\n  const handleMenuItemButtonClick = useCallback((e: { key: string }) => {\n    const selectedNetwork = networksCollection.find(n => n.id === e.key);\n    if (selectedNetwork) {\n      dispatch(connectAccount(selectedNetwork));\n    }\n  }, [dispatch]);\n\n  const langResources = useCurrentLanguageResources();\n  const connectLangResources = langResources.views.connect.actions.connect;\n\n  const networkTypes: Network[] = [];\n  const connectMenuItems = networkTypes.map(t => {\n    const network = config.tezos.networks[t.name];\n\n    return <Menu.Item key={t.id}>\n      <div className=\"connect-dropdown__item-container\">\n        <div className=\"connect-dropdown__item-icon-container\">\n          <div className=\"connect-dropdown__item-icon\" style={{ backgroundColor: network.color }}></div>\n        </div>\n        <div className=\"connect-dropdown__item-text\">{`${connectLangResources.connectTo} ${network.title}`}</div>\n      </div>\n    </Menu.Item>;\n  });\n\n  const connectMenu = (\n    <Menu onClick={handleMenuItemButtonClick}>\n      {connectMenuItems}\n    </Menu>\n  );\n\n  const connectButtonTitle = `${connectLangResources.connectTo} ${config.tezos.networks.granadanet.title}`;\n\n  return connectMenuItems.length\n    ? <Dropdown.Button className=\"connect-dropdown\" type=\"primary\" onClick={handleConnectButtonClick} overlay={connectMenu}>\n      {connectButtonTitle}\n    </Dropdown.Button>\n    : <Button type=\"primary\" onClick={handleConnectButtonClick}>{connectButtonTitle}</Button>;\n};\n\nexport const ConnectDropdownPure = React.memo(ConnectDropdown);\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { config } from '../../../config';\nimport { getCurrentAccount } from '../../../store/accounts/selectors';\nimport { useAppSelector, useCurrentLanguageResources } from '../../hooks';\nimport { View } from '../View';\nimport './Connect.scss';\nimport { ConnectDropdownPure } from './ConnectDropdown';\n\nexport const Connect = () => {\n  const langResources = useCurrentLanguageResources();\n  const connectLangResources = langResources.views.connect.actions.connect;\n\n  const currentAccount = useAppSelector(getCurrentAccount);\n  if (currentAccount) {\n    return <Redirect push to={config.routers.overview} />;\n  }\n\n  return <View title=\"Connect\" className=\"connect\">\n    <div className=\"connect-info-container\">\n      <div className=\"connect-info-container__message\">{connectLangResources.description}</div>\n      <ConnectDropdownPure />\n    </div>\n  </View >;\n};\nexport const ConnectPure = React.memo(Connect);\n","import { InputNumber, Select } from 'antd';\nimport React from 'react';\n\nimport { tezosMeta } from '@tezospayments/common';\n\nimport './PaymentAmount.scss';\n\ninterface DonationAmountProps {\n  onChange: (rawValue: string) => void;\n  value: string;\n}\n\nexport const PaymentAmount = (props: DonationAmountProps) => {\n  const assets = [\n    { label: tezosMeta.symbol, value: tezosMeta.symbol, imageUrl: tezosMeta.thumbnailUri },\n  ];\n\n  const options = assets.map(a => <Select.Option key={a.label} value={a.value} label={a.label}>\n    <div className=\"payment-amount__select-option\">\n      <img className=\"payment-amount__select-option-image\" alt={a.label} src={a.imageUrl} />\n      <span className=\"payment-amount__select-option-label\">{a.label}</span>\n    </div>\n  </Select.Option>);\n\n  return <div className=\"payment-amount\">\n    <Select className=\"payment-amount__select\" value={tezosMeta.symbol}>\n      {options}\n    </Select>\n    <InputNumber className=\"payment-amount__input\" min={'0'} value={props.value.toString()} onChange={props.onChange} />\n  </div>;\n};\n\nexport const PaymentAmountPure = React.memo(PaymentAmount);\n","import { Input, Radio, RadioChangeEvent, Select } from 'antd';\nimport { SelectValue } from 'antd/lib/select';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { PaymentType } from '@tezospayments/common';\n\nimport { getOperationsByService, getSortedServices } from '../../../../store/services/selectors';\nimport { useAppSelector, useCurrentLanguageResources } from '../../../hooks';\nimport { PaymentAmountPure } from '../PaymentAmount';\n\nimport './AcceptPaymentsSettings.scss';\n\ninterface AcceptPaymentsSettingsProps {\n  serviceAddress: string | undefined;\n  onServiceAddressChange: (value: SelectValue) => void;\n\n  paymentType: PaymentType;\n  onPaymentTypeChange: (e: RadioChangeEvent) => void;\n\n  amount: string;\n  onAmountChange: (rawValue: string) => void;\n\n  publicData: string;\n  onPublicDataChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n\n  donationData: string;\n  onDonationDataChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nexport const AcceptPaymentsSettings = (props: AcceptPaymentsSettingsProps) => {\n  const langResources = useCurrentLanguageResources();\n  const acceptPaymentsLangResources = langResources.views.acceptPayments;\n  const serviceLangResources = langResources.views.services;\n  const operationsByService = useSelector(getOperationsByService);\n\n  const services = useAppSelector(getSortedServices);\n  const serviceOptions = services.filter(s => !s.deleted).map(service => ({\n    label: service.name,\n    value: service.contractAddress,\n    disabled: operationsByService.has(service.contractAddress)\n  }));\n\n  const typeOptions = [\n    { label: 'Payment', value: PaymentType.Payment },\n    { label: 'Donation', value: PaymentType.Donation },\n  ];\n\n  return <div className=\"accept-payments-settings\">\n    <span className=\"accept-payments-settings__caption\">{serviceLangResources.service}</span>\n    <Select\n      className=\"accept-payments-settings__service-select\"\n      options={serviceOptions}\n      value={props.serviceAddress}\n      onChange={props.onServiceAddressChange}\n    />\n\n    <span className=\"accept-payments-settings__caption\">{acceptPaymentsLangResources.type}</span>\n    <Radio.Group\n      className=\"accept-payments-settings__type-select\"\n      optionType=\"button\"\n      buttonStyle=\"outline\"\n      options={typeOptions}\n      value={props.paymentType}\n      onChange={props.onPaymentTypeChange}\n    />\n\n    {props.paymentType === PaymentType.Payment\n      ? <>\n        <span className=\"accept-payments-settings__caption\">{acceptPaymentsLangResources.amount}</span>\n        <PaymentAmountPure onChange={props.onAmountChange} value={props.amount} />\n        <span className=\"accept-payments-settings__header\">{acceptPaymentsLangResources.paymentPublicData}</span>\n        <span className=\"accept-payments-settings__caption\">{acceptPaymentsLangResources.orderId}</span>\n        <Input className=\"accept-payments-settings__order-id-input\" value={props.publicData} onChange={props.onPublicDataChange} />\n        <span className=\"accept-payments-settings__help-text\">{acceptPaymentsLangResources.orderIdHelpText}</span>\n      </>\n      : <>\n        <span className=\"accept-payments-settings__header\">{acceptPaymentsLangResources.donationData}</span>\n        <span className=\"accept-payments-settings__caption\">{acceptPaymentsLangResources.shortDescription}</span>\n        <Input.TextArea className=\"accept-payments-settings__order-id-input\" value={props.donationData} onChange={props.onDonationDataChange}\n          showCount rows={5} maxLength={250} />\n        <span className=\"accept-payments-settings__help-text\">{acceptPaymentsLangResources.shortDescriptionHelpText}</span>\n      </>}\n  </div>;\n};\n\nexport const AcceptPaymentsSettingsPure = React.memo(AcceptPaymentsSettings);\n","export default {\n  defaultNetworkName: 'mainnet',\n  paymentAppBaseUrl: 'https://payment.tezospayments.com'\n} as const;\n","import { guards } from '@tezospayments/common';\n\nconst getErrorMessageByValidationErrors = (validationErrors: readonly string[], brief = '') => validationErrors\n  .reduce((result, error, index) => `${result}\\n\\t${index + 1}. ${error};`, brief);\n\nexport abstract class TezosPaymentsError extends Error {\n  readonly name: string;\n\n  constructor(message?: string) {\n    super(message);\n\n    this.name = this.constructor.name;\n  }\n}\n\nexport class InvalidTezosPaymentsOptionsError extends TezosPaymentsError {\n  constructor(message?: string);\n  constructor(validationErrors: readonly string[]);\n  constructor(messageOrValidationErrors: (string | undefined) | readonly string[]) {\n    super(\n      guards.isReadonlyArray(messageOrValidationErrors)\n        ? InvalidTezosPaymentsOptionsError.getMessage(messageOrValidationErrors)\n        : messageOrValidationErrors\n    );\n  }\n\n  private static getMessage(validationErrors: readonly string[]): string {\n    return getErrorMessageByValidationErrors(validationErrors, 'options are invalid, see details below:');\n  }\n}\n\nexport class InvalidPaymentCreateParametersError extends TezosPaymentsError {\n}\n\nexport class InvalidPaymentError extends TezosPaymentsError {\n  constructor(message?: string);\n  constructor(validationErrors: readonly string[]);\n  constructor(messageOrValidationErrors: (string | undefined) | readonly string[]) {\n    super(\n      guards.isReadonlyArray(messageOrValidationErrors)\n        ? InvalidPaymentError.getMessage(messageOrValidationErrors)\n        : messageOrValidationErrors\n    );\n  }\n\n  private static getMessage(validationErrors: readonly string[]): string {\n    return getErrorMessageByValidationErrors(validationErrors, 'payment is invalid, see details below:');\n  }\n}\n\nexport class UnsupportedPaymentUrlTypeError extends TezosPaymentsError {\n}\n\nexport class PaymentUrlError extends TezosPaymentsError {\n}\n\nexport class DonationUrlError extends TezosPaymentsError {\n}\n","import { CustomNetwork, Donation, Network, Payment, PaymentUrlType } from '@tezospayments/common';\n\nexport abstract class PaymentUrlFactory {\n  constructor(readonly urlType: PaymentUrlType) {\n  }\n\n  abstract createPaymentUrl(paymentOrDonation: Payment | Donation, network: Network | CustomNetwork): string | Promise<string>;\n}\n","import {\n  native, PaymentUrlType,\n  PaymentSerializer, CustomNetwork, Network, Payment, Donation, DonationSerializer, PaymentType, getEncodedPaymentUrlType\n} from '@tezospayments/common';\n\nimport constants from '../constants';\nimport { DonationUrlError, PaymentUrlError } from '../errors';\nimport { PaymentUrlFactory } from './paymentUrlFactory';\n\nexport class Base64PaymentUrlFactory extends PaymentUrlFactory {\n  static readonly baseUrl = constants.paymentAppBaseUrl;\n\n  protected readonly paymentSerializer: PaymentSerializer = new PaymentSerializer();\n  protected readonly donationSerializer: DonationSerializer = new DonationSerializer();\n\n  constructor(readonly baseUrl: string = Base64PaymentUrlFactory.baseUrl) {\n    super(PaymentUrlType.Base64);\n  }\n\n  createPaymentUrl(paymentOrDonation: Payment | Donation, network: Network | CustomNetwork): string {\n    return paymentOrDonation.type === PaymentType.Payment\n      ? this.createPaymentUrlInternal(paymentOrDonation, network)\n      : this.createDonationUrlInternal(paymentOrDonation, network);\n  }\n\n  protected createPaymentUrlInternal(payment: Payment, network: Network | CustomNetwork): string {\n    const serializedPaymentBase64 = this.paymentSerializer.serialize(payment);\n    if (!serializedPaymentBase64)\n      throw new PaymentUrlError('It\\'s impossible to serialize the payment');\n\n    try {\n      return this.createUrl(true, payment.targetAddress, serializedPaymentBase64, network);\n    } catch (error: unknown) {\n      throw new PaymentUrlError('It\\'s impossible to create an URL for the payment');\n    }\n  }\n\n  protected createDonationUrlInternal(donation: Donation, network: Network | CustomNetwork): string {\n    const serializedDonationBase64 = this.donationSerializer.serialize(donation);\n    if (!serializedDonationBase64 && serializedDonationBase64 !== '')\n      throw new DonationUrlError('It\\'s impossible to serialize the donation');\n\n    try {\n      return this.createUrl(false, donation.targetAddress, serializedDonationBase64, network);\n    } catch (error: unknown) {\n      throw new DonationUrlError('It\\'s impossible to create an URL for the donation');\n    }\n  }\n\n  protected createUrl(\n    isPayment: boolean,\n    targetAddress: string,\n    serializedPaymentOrDonationBase64: string,\n    network: Network | CustomNetwork\n  ) {\n    const url = new native.URL(`${targetAddress}/${isPayment ? 'payment' : 'donation'}`, this.baseUrl);\n\n    if (serializedPaymentOrDonationBase64 !== '')\n      url.hash = getEncodedPaymentUrlType(this.urlType) + serializedPaymentOrDonationBase64;\n    if (network.name !== constants.defaultNetworkName)\n      url.searchParams.append('network', network.name);\n\n    return url.href;\n  }\n}\n","export type Payment = import('@tezospayments/common').Payment & {\n  readonly url: string;\n};\n\nexport enum SigningType {\n  ApiSecretKey = 0,\n  Wallet = 1,\n  Custom = 2,\n}\n","import { Payment } from '@tezospayments/common';\n\nimport type { SigningType } from '../models';\n\nexport abstract class TezosPaymentsSigner {\n  constructor(readonly signingType: SigningType) {\n  }\n\n  abstract sign(payment: Payment): string | Promise<string>;\n}\n","import { Payment } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class ApiSecretKeySigner extends TezosPaymentsSigner {\n  constructor(readonly apiSecretKey: string) {\n    super(SigningType.ApiSecretKey);\n  }\n\n  sign(_payment: Payment): string | Promise<string> {\n    throw new Error('Method not implemented.');\n  }\n}\n","import { Payment } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class WalletSigner extends TezosPaymentsSigner {\n  constructor(readonly walletSigning: (dataBytes: string) => Promise<string>) {\n    super(SigningType.Wallet);\n  }\n\n  sign(_payment: Payment): string | Promise<string> {\n    throw new Error('Method not implemented.');\n  }\n}\n","import { Payment } from '@tezospayments/common';\n\nimport { SigningType } from '../models';\nimport { TezosPaymentsSigner } from './tezosPaymentsSigner';\n\nexport class CustomSigner extends TezosPaymentsSigner {\n  constructor(readonly customSigning: (payment: Payment) => Promise<string>) {\n    super(SigningType.Custom);\n  }\n\n  sign(_payment: Payment): string | Promise<string> {\n    throw new Error('Method not implemented.');\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { nanoid } from 'nanoid';\n\nimport {\n  native, networks, tezosInfo, networkNameRegExp, networkIdRegExp, PaymentUrlType,\n  DeepReadonly, FailedValidationResults, Payment as CommonPaymentModel,\n  PaymentType, PaymentValidator, Mutable\n} from '@tezospayments/common';\n\nimport { InvalidPaymentCreateParametersError, InvalidPaymentError, InvalidTezosPaymentsOptionsError, UnsupportedPaymentUrlTypeError } from './errors';\nimport { Payment } from './models';\nimport type { DefaultPaymentParameters, PaymentCreateParameters, TezosPaymentsOptions } from './options';\nimport { Base64PaymentUrlFactory, PaymentUrlFactory } from './paymentUrlFactories';\nimport { ApiSecretKeySigner, CustomSigner, TezosPaymentsSigner, WalletSigner } from './signers';\nimport { tezosPaymentsOptionsValidationErrors } from './validationErrors';\n\nexport class TezosPayments {\n  static readonly defaultPaymentParameters: DeepReadonly<DefaultPaymentParameters> = {\n    network: networks.granadanet,\n    urlType: PaymentUrlType.Base64\n  };\n  protected static readonly optionsValidationErrors = tezosPaymentsOptionsValidationErrors;\n\n  protected readonly paymentValidator: PaymentValidator = new PaymentValidator();\n  protected readonly serviceContractAddress: string;\n  protected readonly signer: TezosPaymentsSigner;\n  protected readonly defaultPaymentParameters: DeepReadonly<DefaultPaymentParameters>;\n\n  private paymentUrlFactories: Map<PaymentUrlType, PaymentUrlFactory> = new Map();\n\n  constructor(options: DeepReadonly<TezosPaymentsOptions>) {\n    const errors = this.validateOptions(options);\n    if (errors)\n      throw new InvalidTezosPaymentsOptionsError(errors);\n\n    this.serviceContractAddress = options.serviceContractAddress;\n    this.defaultPaymentParameters = options.defaultPaymentParameters\n      ? {\n        network: options.defaultPaymentParameters.network || TezosPayments.defaultPaymentParameters.network,\n        urlType: options.defaultPaymentParameters.urlType || TezosPayments.defaultPaymentParameters.urlType\n      }\n      : TezosPayments.defaultPaymentParameters;\n\n    this.signer = this.createSigner(options.signing);\n    this.getPaymentUrlFactory(this.defaultPaymentParameters.urlType);\n  }\n\n  async createPayment(createParameters: PaymentCreateParameters): Promise<Payment> {\n    if (!createParameters)\n      throw new InvalidPaymentCreateParametersError(createParameters);\n\n    let errors: FailedValidationResults;\n    if (createParameters.urlType || createParameters.network) {\n      errors = this.validateDefaultPaymentParameters(createParameters);\n      if (errors)\n        throw new InvalidPaymentError(errors);\n    }\n\n    const paymentWithoutUrl = this.createPaymentByCreateParameters(createParameters);\n    errors = this.paymentValidator.validate(paymentWithoutUrl, true);\n    if (errors)\n      throw new InvalidPaymentError(errors);\n\n    const paymentUrl = await this.getPaymentUrl(paymentWithoutUrl, createParameters.urlType, createParameters.network);\n    const payment = this.applyPaymentUrl(paymentWithoutUrl, paymentUrl);\n\n    return payment;\n  }\n\n  protected getPaymentUrl(\n    payment: CommonPaymentModel,\n    urlType = this.defaultPaymentParameters.urlType,\n    network = this.defaultPaymentParameters.network\n  ): string | Promise<string> {\n    return this.getPaymentUrlFactory(urlType).createPaymentUrl(payment, network);\n  }\n\n  protected applyPaymentUrl(payment: CommonPaymentModel, url: string): Payment {\n    (payment as Mutable<Payment>).url = url;\n\n    return (payment as Payment);\n  }\n\n  protected getPaymentUrlFactory(paymentUrlType: PaymentUrlType): PaymentUrlFactory {\n    let paymentUrlFactory = this.paymentUrlFactories.get(paymentUrlType);\n    if (!paymentUrlFactory) {\n      paymentUrlFactory = this.createPaymentUrlFactory(paymentUrlType);\n      this.paymentUrlFactories.set(paymentUrlType, paymentUrlFactory);\n    }\n\n    return paymentUrlFactory;\n  }\n\n  protected createSigner(signingOptions: TezosPaymentsOptions['signing']): TezosPaymentsSigner {\n    if ('apiSecretKey' in signingOptions)\n      return new ApiSecretKeySigner(signingOptions.apiSecretKey);\n    if ('walletSigning' in signingOptions)\n      return new WalletSigner(signingOptions.walletSigning);\n\n    return new CustomSigner(signingOptions);\n  }\n\n  protected createPaymentUrlFactory(paymentUrlType: PaymentUrlType): PaymentUrlFactory {\n    switch (paymentUrlType) {\n      case PaymentUrlType.Base64:\n        return new Base64PaymentUrlFactory();\n      default:\n        throw new UnsupportedPaymentUrlTypeError(`This payment url type is not supported: ${paymentUrlType}`);\n    }\n  }\n\n  protected createPaymentByCreateParameters(createParameters: PaymentCreateParameters): CommonPaymentModel {\n    const payment: Mutable<CommonPaymentModel> = {\n      type: PaymentType.Payment,\n      id: createParameters.id || nanoid(),\n      targetAddress: this.serviceContractAddress,\n      amount: new BigNumber(createParameters.amount),\n      data: createParameters.data,\n      created: createParameters.created ? new Date(createParameters.created) : new Date(),\n    };\n\n    if (createParameters.asset)\n      payment.asset = createParameters.asset;\n    if (createParameters.expired)\n      payment.expired = new Date(createParameters.expired);\n    if (createParameters.successUrl)\n      payment.successUrl = new native.URL(createParameters.successUrl);\n    if (createParameters.cancelUrl)\n      payment.cancelUrl = new native.URL(createParameters.cancelUrl);\n\n    return payment;\n  }\n\n  protected validateOptions(options: DeepReadonly<TezosPaymentsOptions>): FailedValidationResults {\n    return [\n      this.validateServiceContractAddress(options.serviceContractAddress),\n      this.validateSigningOptions(options.signing),\n      this.validateDefaultPaymentParameters(options.defaultPaymentParameters)\n    ].reduce(\n      (result, currentErrors) => currentErrors ? (result || []).concat(currentErrors) : result,\n      undefined\n    );\n  }\n\n  private validateServiceContractAddress(serviceContractAddress: string): FailedValidationResults {\n    if (!serviceContractAddress || typeof serviceContractAddress !== 'string')\n      return [TezosPayments.optionsValidationErrors.invalidServiceContractAddressType];\n\n    if (serviceContractAddress.length !== tezosInfo.addressLength)\n      return [TezosPayments.optionsValidationErrors.serviceContractAddressHasInvalidLength];\n\n    if (!tezosInfo.contractAddressPrefixes.some(prefix => serviceContractAddress.startsWith(prefix)))\n      return [TezosPayments.optionsValidationErrors.serviceContractAddressIsNotContractAddress];\n  }\n\n  private validateSigningOptions(signingOptions: TezosPaymentsOptions['signing']): FailedValidationResults {\n    if (typeof signingOptions !== 'object')\n      return [TezosPayments.optionsValidationErrors.invalidSigningOption];\n\n    if (typeof signingOptions === 'function')\n      return;\n    else if (!('apiSecretKey' in signingOptions) && !('walletSigning' in signingOptions))\n      return [TezosPayments.optionsValidationErrors.invalidSigningOption];\n\n    if ('apiSecretKey' in signingOptions) {\n      if (typeof signingOptions.apiSecretKey !== 'string')\n        return [TezosPayments.optionsValidationErrors.invalidApiSecretKeyType];\n      if (!signingOptions.apiSecretKey)\n        return [TezosPayments.optionsValidationErrors.emptyApiSecretKey];\n    }\n\n    if ('walletSigning' in signingOptions && typeof signingOptions.walletSigning !== 'function')\n      return [TezosPayments.optionsValidationErrors.invalidWalletSigningOptionType];\n  }\n\n  private validateDefaultPaymentParameters(defaultPaymentParameters: TezosPaymentsOptions['defaultPaymentParameters']): FailedValidationResults {\n    if (defaultPaymentParameters === undefined)\n      return;\n\n    if (typeof defaultPaymentParameters !== 'object')\n      return [TezosPayments.optionsValidationErrors.invalidDefaultPaymentParameters];\n\n    if ('network' in defaultPaymentParameters) {\n      if (typeof defaultPaymentParameters.network !== 'object')\n        return [TezosPayments.optionsValidationErrors.invalidNetwork];\n\n      if (defaultPaymentParameters.network.name === undefined || defaultPaymentParameters.network.name === '')\n        return [TezosPayments.optionsValidationErrors.emptyNetworkName];\n\n      if (typeof defaultPaymentParameters.network.name !== 'string' || !networkNameRegExp.test(defaultPaymentParameters.network.name))\n        return [TezosPayments.optionsValidationErrors.invalidNetworkName];\n\n      if (defaultPaymentParameters.network.id && (typeof defaultPaymentParameters.network.id !== 'string' || !networkIdRegExp.test(defaultPaymentParameters.network.id)))\n        return [TezosPayments.optionsValidationErrors.invalidNetworkId];\n    }\n\n    if ('urlType' in defaultPaymentParameters && defaultPaymentParameters.urlType !== PaymentUrlType.Base64)\n      return [TezosPayments.optionsValidationErrors.invalidUrlType];\n  }\n}\n","export const tezosPaymentsOptionsValidationErrors = {\n  // serviceContractAddress\n  invalidServiceContractAddressType: 'Type of the serviceContractAddress option is invalid',\n  serviceContractAddressHasInvalidLength: 'The serviceContractAddress option has an invalid address',\n  serviceContractAddressIsNotContractAddress: 'The serviceContractAddress option isn\\'t a contract address',\n  // signing\n  invalidSigningOption: 'The signing option is invalid',\n  invalidApiSecretKeyType: 'The API secret key has an invalid type, it should be a string',\n  emptyApiSecretKey: 'The API secret key is empty',\n  invalidWalletSigningOptionType: 'The WalletSigning option has an invalid type, it should be a function',\n  // defaultPaymentParameters\n  invalidDefaultPaymentParameters: 'The default payment parameters are invalid',\n  // defaultPaymentParameters.network\n  emptyNetworkName: 'The network name is empty',\n  invalidNetwork: 'The network is invalid',\n  invalidNetworkName: 'The network name is invalid',\n  invalidNetworkId: 'The network id is invalid',\n  // defaultPaymentParameters.urlType\n  invalidUrlType: 'The url type is invalid'\n} as const;\n","import constants from './constants';\nimport * as errors from './errors';\nimport * as paymentUrlFactories from './paymentUrlFactories';\nimport * as signers from './signers';\n\nexport { PaymentUrlType } from '@tezospayments/common';\n\nexport type { Payment } from './models';\nexport { SigningType } from './models';\n\nexport type { TezosPaymentsOptions, PaymentCreateParameters } from './options';\nexport { TezosPayments } from './tezosPayments';\n\nexport const internal = {\n  constants,\n  errors,\n  paymentUrlFactories,\n  signers\n};\n","import { CopyOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport React, { useCallback } from 'react';\nimport { internal as tezosPaymentsInternal } from 'tezospayments';\n\nimport { Donation, Payment, PaymentType, networks, Network } from '@tezospayments/common';\n\nimport { config } from '../../../../../config';\nimport { getCurrentAccount } from '../../../../../store/accounts/selectors';\nimport { ExternalLink } from '../../../../common';\nimport { useAppSelector, useCurrentLanguageResources } from '../../../../hooks';\n\nimport './DirectLinkGenerator.scss';\n\ninterface DirectLinkGeneratorProps {\n  paymentOrDonation: Payment | Donation;\n}\n\nconst base64PaymentUrlFactory = new tezosPaymentsInternal.paymentUrlFactories.Base64PaymentUrlFactory(\n  config.links.tezosPayments.paymentsApp\n);\n\nconst getPaymentLink = (paymentOrDonation: Payment | Donation, network: Network) => {\n  try {\n    return base64PaymentUrlFactory.createPaymentUrl(paymentOrDonation, network);\n  }\n  catch {\n    return '';\n  }\n};\n\nexport const DirectLinkGenerator = ({ paymentOrDonation }: DirectLinkGeneratorProps) => {\n  const langResources = useCurrentLanguageResources();\n  const commonLangResources = langResources.common;\n  const acceptPaymentsLangResources = langResources.views.acceptPayments;\n  const currentAccount = useAppSelector(getCurrentAccount);\n\n  // TODO: handle errors\n  const url = getPaymentLink(paymentOrDonation, currentAccount?.network || networks[config.tezos.defaultNetwork]);\n\n  const helpText = paymentOrDonation.type === PaymentType.Payment\n    ? acceptPaymentsLangResources.directLinkPaymentHelpText\n    : acceptPaymentsLangResources.directLinkDonationHelpText;\n\n  const handleCopyClick = useCallback(() => {\n    navigator.clipboard.writeText(url);\n  }, [url]);\n\n  return <div className=\"generator__direct-link\">\n    <span className=\"generator__direct-link-help-text\">{helpText}</span>\n    <ExternalLink className=\"generator__direct-link-link\" href={url}>{url}</ExternalLink>\n    <div className=\"generator__direct-link-buttons\">\n      <Button onClick={handleCopyClick} icon={<CopyOutlined />}>{commonLangResources.copyLink}</Button>\n    </div>\n  </div>;\n};\n\nexport const DirectLinkGeneratorPure = React.memo(DirectLinkGenerator);\n","import React from 'react';\n\nimport { FailedValidationResults } from '@tezospayments/common';\n\nimport './FailedValidationResult.scss';\nimport { useCurrentLanguageResources } from '../../../../hooks';\n\ninterface FailedValidationResultProps {\n  results: FailedValidationResults\n}\n\nexport const FailedValidationResult = (_props: FailedValidationResultProps) => {\n  const langResources = useCurrentLanguageResources();\n  const acceptPaymentsLangResources = langResources.views.acceptPayments;\n\n  return <div className=\"failed-validation-result\">\n    {acceptPaymentsLangResources.errors.fillRequiredData}\n  </div>;\n};\n\nexport const FailedValidationResultPure = React.memo(FailedValidationResult);\n","import { Card } from 'antd';\nimport BigNumber from 'bignumber.js';\nimport { nanoid } from 'nanoid';\nimport React from 'react';\n\nimport { Donation, Payment, PaymentType } from '@tezospayments/common';\n\nimport { DirectLinkGeneratorPure } from './DirectLinkGenerator';\nimport { FailedValidationResult } from './FailedValidationResult';\n\nimport './Generator.scss';\n\ninterface GeneratorProps {\n  serviceAddress: string | undefined;\n  paymentType: PaymentType;\n  amount: string;\n  publicData: string;\n  donationData: string;\n}\n\nexport const Generator = (props: GeneratorProps) => {\n  const tabList = [\n    { key: 'directLink', tab: 'Direct Link' },\n    { key: 'widget', tab: 'Widget', disabled: true },\n    { key: 'typescript', tab: 'TypeScript Library', disabled: true },\n    { key: 'dotnet', tab: '.NET Library', disabled: true },\n  ];\n\n  const paymentOrDonation = props.paymentType === PaymentType.Payment\n    ? {\n      type: props.paymentType,\n      targetAddress: props.serviceAddress,\n      id: nanoid(),\n      amount: new BigNumber(props.amount),\n      data: props.publicData ? { public: { orderId: props.publicData } } : undefined,\n      created: new Date(),\n    } as Payment\n    : {\n      type: props.paymentType,\n      targetAddress: props.serviceAddress,\n    } as Donation;\n\n  const failedValidationResults = paymentOrDonation.type === PaymentType.Payment\n    ? Payment.validate(paymentOrDonation)\n    : Donation.validate(paymentOrDonation);\n\n  return <Card\n    className=\"generator\"\n    style={{ width: '100%' }}\n    tabList={tabList}\n    activeTabKey={tabList[0]?.key}\n  >\n    {failedValidationResults\n      ? <FailedValidationResult results={failedValidationResults} />\n      : <DirectLinkGeneratorPure paymentOrDonation={paymentOrDonation} />}\n  </Card >;\n};\n\nexport const GeneratorPure = React.memo(Generator);\n","import { RadioChangeEvent, Skeleton } from 'antd';\nimport { SelectValue } from 'antd/lib/select';\nimport React, { useCallback, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { PaymentType } from '@tezospayments/common';\n\nimport { selectServicesState } from '../../../store/services/selectors';\nimport { NoServicesCreatedPure } from '../../common/NoServicesCreated';\nimport { useAppSelector, useCurrentLanguageResources } from '../../hooks';\nimport { View } from '../View';\nimport { AcceptPaymentsSettings } from './AcceptPaymentsSettings';\nimport { GeneratorPure } from './Generator';\n\nimport './AcceptPayments.scss';\n\nexport const AcceptPayments = () => {\n  const langResources = useCurrentLanguageResources();\n  const acceptPaymentsLangResources = langResources.views.acceptPayments;\n  const servicesState = useAppSelector(selectServicesState);\n\n  const { address: addressFromUrl } = useParams<{ address: string }>();\n  const [serviceAddress, setServiceAddress] = useState<string | undefined>(addressFromUrl);\n  const [paymentType, setPaymentType] = useState<PaymentType>(PaymentType.Payment);\n  const [amount, setAmount] = useState<string>('1');\n  const [publicData, setPublicData] = useState<string>('');\n  const [donationData, setDonationData] = useState<string>('');\n\n  const handleServiceAddressChange = useCallback((value: SelectValue) => {\n    setServiceAddress(value as string);\n  }, []);\n\n  const handlePaymentTypeChange = useCallback((e: RadioChangeEvent) => {\n    setPaymentType(e.target.value);\n  }, []);\n\n  const handleAmountChange = useCallback((rawValue: string) => {\n    setAmount(rawValue);\n  }, []);\n\n  const handlePublicDataChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPublicData(e.target.value);\n  }, []);\n\n  const handleDonationDataChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setDonationData(e.target.value);\n  }, []);\n\n  return <View title={acceptPaymentsLangResources.title}>\n    <View.Title>{acceptPaymentsLangResources.title}</View.Title>\n    {!servicesState.initialized\n      ? <Skeleton active />\n      : !servicesState.services.length\n        ? <NoServicesCreatedPure />\n        : <div className=\"accept-payments\">\n          <div className=\"accept-payments__settings\">\n            <AcceptPaymentsSettings\n              serviceAddress={serviceAddress} onServiceAddressChange={handleServiceAddressChange}\n              paymentType={paymentType} onPaymentTypeChange={handlePaymentTypeChange}\n              amount={amount} onAmountChange={handleAmountChange}\n              publicData={publicData} onPublicDataChange={handlePublicDataChange}\n              donationData={donationData} onDonationDataChange={handleDonationDataChange}\n            />\n          </div>\n          <div className=\"accept-payments__generator\">\n            <GeneratorPure\n              serviceAddress={serviceAddress}\n              paymentType={paymentType}\n              amount={amount}\n              publicData={publicData}\n              donationData={donationData}\n            />\n          </div>\n        </div>}\n  </View >;\n};\n\nexport const AcceptPaymentsPure = React.memo(AcceptPayments);\n","import { StateModel, Network } from '@tezospayments/common';\n\nexport interface Account {\n  readonly address: string;\n  readonly network: Network;\n}\n\nexport class Account extends StateModel {\n  static getShortAddress(account: Account) {\n    return `${account.address.substr(0, 9)}...${account.address.substr(account.address.length - 6, 6)}`;\n  }\n}\n","import React from 'react';\n\nimport { Network } from '@tezospayments/common';\n\nimport { config } from '../../../../config';\n\nimport './AccountNetworkGroup.scss';\n\ninterface AccountNetworkGroupProps {\n  network: Network;\n}\n\nexport const AccountNetworkGroup = (props: AccountNetworkGroupProps) => {\n  const network = config.tezos.networks[props.network.name];\n\n  return <div className=\"account-network-group\">\n    <div className=\"account-network-group__icon-container\">\n      <div className=\"account-network-group__icon\" style={{ backgroundColor: network.color }}></div>\n    </div>\n    <div>{network.title}</div>\n  </div>;\n};\n\nexport const AccountNetworkGroupPure = React.memo(AccountNetworkGroup);\n","import { blue } from '@ant-design/colors';\nimport { ArrowRightOutlined, CopyOutlined, LogoutOutlined, LoginOutlined, UserOutlined } from '@ant-design/icons';\nimport { Dropdown, Button, Menu } from 'antd';\nimport React, { useCallback } from 'react';\nimport './AccountDropdown.scss';\n\nimport { combineClassNames } from '@tezospayments/common';\n\nimport { Account } from '../../../models/blockchain';\nimport { getAccountsByNetwork, getCurrentAccount, getCurrentNetworkConfig } from '../../../store/accounts/selectors';\nimport { disconnectAccount } from '../../../store/accounts/slice';\nimport { useAppContext, useAppDispatch, useAppSelector, useCurrentLanguageResources } from '../../hooks';\nimport { AccountNetworkGroupPure } from './AccountNetworkGroup';\n\nexport const AccountDropDown = () => {\n  const appContext = useAppContext();\n  const langResources = useCurrentLanguageResources();\n  const actionsLangResources = langResources.views.header.accountActions;\n\n  const accountsByNetwork = useAppSelector(getAccountsByNetwork);\n  const currentAccount = useAppSelector(getCurrentAccount);\n  const currentAccountAddress = currentAccount?.address || '';\n  const currentNetworkConfig = useAppSelector(getCurrentNetworkConfig);\n  const currentExplorer = currentNetworkConfig && currentNetworkConfig.explorers[currentNetworkConfig.default.explorer];\n\n  const handleCopyAddressClick = useCallback(() => {\n    navigator.clipboard.writeText(currentAccountAddress);\n  }, [currentAccountAddress]);\n\n  const handleViewOnExplorerClick = useCallback(() => {\n    if (currentExplorer) {\n      window.open(appContext.tezosExplorer.getAccountUrl(currentAccountAddress), '_blank');\n    }\n  }, [appContext.tezosExplorer, currentAccountAddress, currentExplorer]);\n\n  const dispatch = useAppDispatch();\n  const handleDisconnectButtonClick = useCallback(() => {\n    dispatch(disconnectAccount());\n  }, [dispatch]);\n\n  if (!currentAccount) {\n    return null;\n  }\n\n  const connectedAccounts = [...accountsByNetwork.keys()].map(k =>\n    <Menu.ItemGroup key={k.id} title={<AccountNetworkGroupPure network={k} />}>\n      {accountsByNetwork.get(k)?.map(a =>\n        <Menu.Item\n          key={a.address}\n          icon={<UserOutlined />}\n          className={combineClassNames('account-menu-item', { 'account-menu-item_selected': a.address === currentAccount.address })}\n          style={a.address !== currentAccount.address ? undefined : {\n            backgroundColor: blue[0],\n            color: blue.primary\n          }}\n        >\n          {a.address}\n        </Menu.Item>\n      )}\n    </Menu.ItemGroup>\n  );\n\n  const menu = <Menu>\n    {connectedAccounts}\n    <Menu.Divider />\n    <Menu.Item key={1} icon={<CopyOutlined />} onClick={handleCopyAddressClick}>\n      {actionsLangResources.copyAddress.title}\n    </Menu.Item>\n    <Menu.Item key={2} icon={<ArrowRightOutlined />} onClick={handleViewOnExplorerClick}>\n      {`${actionsLangResources.viewOn} ${currentExplorer?.title}`}\n    </Menu.Item>\n    <Menu.Item key={3} icon={<LoginOutlined />}>\n      {`${actionsLangResources.connectAnotherAccount.title} (${langResources.common.comingSoon.toLowerCase()})`}\n    </Menu.Item>\n    <Menu.Divider />\n    <Menu.Item key={5} icon={<LogoutOutlined />} onClick={handleDisconnectButtonClick}>\n      {actionsLangResources.disconnect.title}\n    </Menu.Item>\n  </Menu >;\n\n  return <Dropdown overlay={menu} placement=\"bottomRight\">\n    <Button style={{ borderColor: blue.primary, color: blue.primary }} className=\"account-dropdown\">{Account.getShortAddress(currentAccount)}</Button>\n  </Dropdown >;\n};\n\nexport const AccountDropDownPure = React.memo(AccountDropDown);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { config } from '../../../config';\nimport { getCurrentAccount } from '../../../store/accounts/selectors';\nimport { useAppSelector } from '../../hooks';\nimport { AccountDropDownPure } from './../AccountDropdown';\n\nimport './Header.scss';\n\nexport const Header = () => {\n  const currentAccount = useAppSelector(getCurrentAccount);\n\n  return <header className=\"header\">\n    <Link className=\"header__title\" to={config.routers.overview}>{config.app.name}</Link>\n    {currentAccount && <AccountDropDownPure />}\n  </header>;\n};\n\nexport const HeaderPure = React.memo(Header);\n","import { SettingOutlined, DashboardOutlined, UnorderedListOutlined, ProfileOutlined, InfoCircleOutlined } from '@ant-design/icons';\nimport { Menu, Button } from 'antd';\nimport React, { useCallback } from 'react';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\n\nimport { config } from '../../../config';\nimport { useCurrentLanguageResources } from '../../hooks';\nimport './NavBar.scss';\n\nexport const NavBar = () => {\n  const location = useLocation();\n  const langResources = useCurrentLanguageResources();\n  const viewsLangResources = langResources.views;\n  const history = useHistory();\n\n  const handleCreateServiceClick = useCallback(() => {\n    history.push(config.routers.createService);\n  }, [history]);\n\n  const handleAcceptPaymentsClick = useCallback(() => {\n    history.push(config.routers.acceptPayments);\n  }, [history]);\n\n  return <nav className=\"navbar\">\n    <Menu className=\"navbar__menu\" mode=\"inline\" selectedKeys={[location.pathname]}>\n      <Menu.Item key={config.routers.overview} icon={<DashboardOutlined />}>\n        <Link to={config.routers.overview}>{viewsLangResources.overview.title}</Link>\n      </Menu.Item>\n      <Menu.Item key={config.routers.operations} icon={<UnorderedListOutlined />}>\n        <Link to={config.routers.operations}>{viewsLangResources.operations.title}</Link>\n      </Menu.Item>\n      <Menu.Item key={config.routers.services} icon={<ProfileOutlined />}>\n        <Link to={config.routers.services}>{viewsLangResources.services.title}</Link>\n      </Menu.Item>\n      <Menu.Item key=\"settings\" icon={<SettingOutlined />} disabled>{viewsLangResources.settings.title}</Menu.Item >\n      <Menu.Item key={config.routers.about} icon={<InfoCircleOutlined />}>\n        <Link to={config.routers.about}>{viewsLangResources.about.title}</Link>\n      </Menu.Item>\n    </Menu>\n\n    <div className=\"navbar__bottom-buttons\">\n      <Button onClick={handleCreateServiceClick}>{viewsLangResources.createService.title}</Button>\n      <Button onClick={handleAcceptPaymentsClick} type=\"primary\">{viewsLangResources.acceptPayments.title}</Button>\n    </div>\n  </nav>;\n};\n\nexport const NavBarPure = React.memo(NavBar);\n","import { message } from 'antd';\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { selectServicesState } from '../../../store/services/selectors';\nimport { PendingOperationStatus } from '../../../store/services/slice';\n\nexport const Notifications = () => {\n  const { services, pendingOperations } = useSelector(selectServicesState);\n\n  useEffect(() => {\n    pendingOperations.forEach(operation => {\n      const service = services.find(s => s.contractAddress === operation.serviceAddress);\n\n      const content = <span><b>{operation.action}</b>{service && <> for service: <b>{`${service.name}`}</b></>}</span>;\n      const key = operation.hash;\n\n      switch (operation.status) {\n        case PendingOperationStatus.loading: {\n          const confirmations = `${operation.confirmationCount} / ${operation.targetConfirmationCount}`;\n          message.loading({ content: <span>Executing operation: {content} ({confirmations})</span>, key, duration: 0 });\n          break;\n        }\n\n        case PendingOperationStatus.success:\n          message.success({ content: <span>Finished operation: {content}</span>, key, duration: 4 });\n          break;\n\n        case PendingOperationStatus.error:\n          message.error({ content: <span>Failed operation: {content}</span>, key, duration: 4 });\n          break;\n      }\n    });\n  }, [pendingOperations, services]);\n\n  return null;\n};\n\nexport const NotificationsPure = React.memo(Notifications);\n","import { Skeleton } from 'antd';\nimport { useEffect } from 'react';\nimport { Switch } from 'react-router';\nimport { Route } from 'react-router-dom';\n\nimport { config } from '../../config';\nimport { selectAccountsState } from '../../store/accounts/selectors';\nimport { loadActiveAccount } from '../../store/accounts/slice';\nimport { PrivateRouteContainer } from '../common';\nimport { useAppDispatch, useAppSelector } from '../hooks';\nimport { OverviewPure, ConnectPure, OperationsPure, ServicePure, ServicesPure, AboutPure } from '../views';\nimport { AcceptPaymentsPure } from '../views/AcceptPayments';\nimport { ServiceViewMode } from '../views/Service/Service';\nimport { HeaderPure } from './Header';\nimport { NavBarPure } from './NavBar';\nimport { NotificationsPure } from './Notifications';\n\nimport 'antd/dist/antd.css';\nimport './App.scss';\n\nexport const App = () => {\n  const initialized = useAppSelector(selectAccountsState).initialized;\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(loadActiveAccount());\n  }, [dispatch]);\n\n  return <div className=\"main-container\">\n    <NotificationsPure />\n    <HeaderPure />\n    <NavBarPure />\n    {!initialized\n      ? <Skeleton />\n      : <Switch>\n        <PrivateRouteContainer exact path={config.routers.overview} >\n          <OverviewPure />\n        </PrivateRouteContainer>\n        <PrivateRouteContainer exact path={config.routers.operations}>\n          <OperationsPure />\n        </PrivateRouteContainer>\n        <PrivateRouteContainer exact path={config.routers.createService}>\n          <ServicePure mode={ServiceViewMode.Create} />\n        </PrivateRouteContainer>\n        <PrivateRouteContainer exact path={config.routers.service.template}>\n          <ServicePure mode={ServiceViewMode.ViewAndEdit} />\n        </PrivateRouteContainer>\n        <PrivateRouteContainer exact path={config.routers.services}>\n          <ServicesPure />\n        </PrivateRouteContainer>\n        <PrivateRouteContainer exact path={[config.routers.acceptPayments, config.routers.acceptServicePayments.template]}>\n          <AcceptPaymentsPure />\n        </PrivateRouteContainer>\n        <Route path={config.routers.about}>\n          <AboutPure />\n        </Route>\n        <Route path={config.routers.connect}>\n          <ConnectPure />\n        </Route>\n      </Switch>\n    }\n    {/* <FooterPure /> */}\n  </div>;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, EnhancedStore } from '@reduxjs/toolkit';\n\nimport { accountsSlice } from './accounts/slice';\nimport { balancesSlice } from './balances/slice';\nimport { operationsSlice } from './operations/slice';\nimport { servicesSlice } from './services/slice';\nimport { AppThunkDispatch } from './thunk';\n\nexport const appReducer = combineReducers({\n  accountsState: accountsSlice.reducer,\n  servicesState: servicesSlice.reducer,\n  balancesState: balancesSlice.reducer,\n  operationsState: operationsSlice.reducer,\n});\n\nexport type AppStore = EnhancedStore<AppState>;\nexport type AppState = ReturnType<typeof appReducer>;\nexport type AppDispatch = AppThunkDispatch & AppStore['dispatch'];\n","import { configureStore, isPlain } from '@reduxjs/toolkit';\nimport { BigNumber } from 'bignumber.js';\nimport { enableMapSet } from 'immer';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router-dom';\n\nimport { ReactAppContext, WebApp } from './app';\nimport { App } from './components/App';\nimport { AppConfig, config } from './config';\nimport reportWebVitals from './reportWebVitals';\nimport { appReducer } from './store';\nimport './index.scss';\n\nenableMapSet();\n\nconst webApp = new WebApp(app => configureStore({\n  reducer: appReducer,\n  devTools: {\n    serialize: true\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      thunk: {\n        extraArgument: app,\n      },\n      serializableCheck: {\n        isSerializable: (value: unknown) => isPlain(value)\n          || value instanceof Map\n          || value instanceof Set\n          || BigNumber.isBigNumber(value)\n          || value instanceof Date,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        getEntries: (value: any) => value instanceof Map || value instanceof Set\n          ? [...value.entries()]\n          : Object.entries(value)\n      }\n    })\n}));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={webApp.store}>\n      <Router history={webApp.history}>\n        <ReactAppContext.Provider value={webApp.reactAppContext}>\n          <App />\n        </ReactAppContext.Provider>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n(window as unknown as { webApp: WebApp }).webApp = webApp;\n(window as unknown as { config: AppConfig }).config = config;\n\nreportWebVitals();\n","import { ColorMode } from '@airgap/beacon-sdk';\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit } from '@taquito/taquito';\nimport { History, createBrowserHistory } from 'history';\n\nimport { Network, networks } from '@tezospayments/common';\nimport {\n  ServicesProvider, TzKTDataProvider, BetterCallDevDataProvider,\n  BlockchainUrlExplorer, TzStatsBlockchainUrlExplorer, BetterCallDevBlockchainUrlExplorer, TzKTBlockchainUrlExplorer\n} from '@tezospayments/react-web-core';\n\nimport { config } from '../config';\nimport { AccountsService } from '../services/accountsService';\nimport { ServicesService } from '../services/servicesService';\nimport { AppStore } from '../store';\nimport type { ReactAppContext } from './reactAppContext';\nimport { ReadOnlySigner } from './readOnlySigner';\n\ninterface AppServices {\n  readonly accountsService: AccountsService;\n  readonly servicesService: ServicesService;\n}\n\nexport class WebApp {\n  readonly store: AppStore;\n  readonly reactAppContext: ReactAppContext;\n  readonly tezosWallet = new BeaconWallet({ name: config.app.name, colorMode: ColorMode.LIGHT });\n  readonly history: History;\n\n  private _network: Network | undefined;\n  private _tezosToolkit: TezosToolkit | undefined;\n  private _services: AppServices | undefined;\n  private onStoreChangedListener = this.onStoreChanged.bind(this);\n  private unsubscribeStoreChanged: (() => void);\n\n  constructor(storeFactory: (app: WebApp) => AppStore) {\n    this.store = storeFactory(this);\n    this.history = this.createHistory();\n    this.applyNetwork(networks[config.tezos.defaultNetwork]);\n\n    this.unsubscribeStoreChanged = this.store.subscribe(this.onStoreChangedListener);\n    this.reactAppContext = this.createReactAppContext();\n  }\n\n  get network() {\n    if (!this._network)\n      throw this.getNetworkError();\n    return this._network;\n  }\n\n  get tezosToolkit() {\n    if (!this._tezosToolkit)\n      throw this.getNetworkError();\n    return this._tezosToolkit;\n  }\n\n  get services() {\n    if (!this._services)\n      throw this.getNetworkError();\n    return this._services;\n  }\n\n  protected onStoreChanged() {\n    const appState = this.store.getState();\n\n    if (appState.accountsState.currentAccount && appState.accountsState.currentAccount.network !== this.network) {\n      this.applyNetwork(appState.accountsState.currentAccount.network);\n    }\n  }\n\n  protected createHistory() {\n    return createBrowserHistory();\n  }\n\n  protected createReactAppContext(): ReactAppContext {\n    return {\n      tezosExplorer: this.createTezosBlockchainUrlExplorer(this.network)\n    };\n  }\n\n  protected applyNetwork(network: Network) {\n    this._network = network;\n\n    const networkConfig = config.tezos.networks[this.network.name];\n    this._tezosToolkit = new TezosToolkit(networkConfig.rpcUrls[networkConfig.default.rpc]);\n    this.tezosToolkit.setSignerProvider(new ReadOnlySigner());\n    this.tezosToolkit.setWalletProvider(this.tezosWallet);\n\n    const servicesProvider = this.createServicesProvider(this.network);\n    this._services = {\n      accountsService: new AccountsService(this.tezosToolkit, this.tezosWallet.client),\n      servicesService: new ServicesService(this.tezosToolkit, servicesProvider, networkConfig.servicesFactoryContractAddress)\n    };\n  }\n\n  private createServicesProvider(network: Network): ServicesProvider {\n    const networkConfig = config.tezos.networks[network.name];\n    const indexerName = networkConfig.default.indexer;\n\n    switch (indexerName) {\n      case 'tzKT':\n        return new TzKTDataProvider(network, networkConfig.indexerUrls.tzKT, networkConfig.servicesFactoryContractAddress);\n      case 'betterCallDev':\n        return new BetterCallDevDataProvider(network, networkConfig.indexerUrls.betterCallDev, networkConfig.servicesFactoryContractAddress);\n      default:\n        throw new Error('Unknown service provider');\n    }\n  }\n\n  private createTezosBlockchainUrlExplorer(network: Network): BlockchainUrlExplorer {\n    const networkConfig = config.tezos.networks[network.name];\n    const explorerName = networkConfig.default.explorer;\n\n    switch (explorerName) {\n      case 'tzKT':\n        return new TzKTBlockchainUrlExplorer(network, networkConfig.explorers.tzKT.baseUrl);\n      case 'tzStats':\n        return new TzStatsBlockchainUrlExplorer(network, networkConfig.explorers.tzStats.baseUrl);\n      case 'betterCallDev':\n        return new BetterCallDevBlockchainUrlExplorer(network, networkConfig.explorers.betterCallDev.baseUrl);\n      default:\n        throw new Error('Unknown blockchain explorer');\n    }\n  }\n\n  private getNetworkError() {\n    return new Error('Network is not defined');\n  }\n}\n"],"sourceRoot":""}