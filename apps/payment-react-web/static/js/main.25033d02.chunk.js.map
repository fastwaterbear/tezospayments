{"version":3,"sources":["components/Footer.module.scss","../../src/utils/base64.ts","../../src/utils/converters.ts","../../src/utils/guards.ts","../../src/utils/memoize.ts","../../src/utils/optimization.ts","../../src/utils/text.ts","../../src/helpers/serviceLinkHelper.ts","../../src/models/payment/paymentBase.ts","../../src/helpers/paymentValidator/paymentValidatorBase.ts","../../src/models/blockchain/network.ts","../../src/models/blockchain/token.ts","../../src/models/blockchain/tezosInfo.ts","../../src/models/blockchain/keyType.ts","../../src/native/index.ts","../../src/helpers/paymentValidator/validationMethods.ts","../../src/helpers/paymentValidator/paymentValidator.ts","../../src/helpers/paymentValidator/donationValidator.ts","../../src/models/core/stateModel.ts","../../src/serialization/base64/objectSerializationValidator.ts","../../src/serialization/base64/base64Serializer.ts","../../src/serialization/base64/base64Deserializer.ts","../../src/serialization/payment/serializedPaymentFieldTypes.ts","../../src/serialization/payment/paymentSerializer.ts","../../src/serialization/payment/paymentDeserializer.ts","../../src/serialization/donation/serializedDonationFieldTypes.ts","../../src/serialization/donation/donationSerializer.ts","../../src/serialization/donation/donationDeserializer.ts","../../src/models/payment/payment.ts","../../src/models/payment/donation.ts","../../src/models/payment/paymentUrlType.ts","../../src/models/service/serviceOperationType.ts","../../src/models/service/service.ts","../../src/models/operation/operationType.ts","../../src/models/operation/operationDirection.ts","../../src/models/operation/operationStatus.ts","../../src/models/operation/donationOperation.ts","../../src/signing/signPayloadEncoders/clientSignPayload.ts","../../src/signing/signPayloadEncoders/michelsonTypes.ts","../../src/signing/signPayloadEncoders/paymentSignPayloadEncoder.ts","../../src/signing/keyPairGenerators/ellipticCurveKeyGenerator.ts","../../../src/config/defaultConfig.ts","../../../src/explorers/blockchainUrlExplorer.ts","../../../src/explorers/tzKTBlockchainUrlExplorer.ts","../../../src/explorers/betterCallDevUrlBlockchainExplorer.ts","../../../src/explorers/tzStatsBlockchainUrlExplorer.ts","../../../../src/providers/tzKTDataProvider/tzKTDataProvider.ts","../../../../src/providers/betterCallDevDataProvider/betterCallDevDataProvider.ts","../../../src/utils/converters.ts","config/config.ts","models/payment/paymentStatus.ts","store/currentPayment/slice.ts","services/localPaymentService/errors.ts","services/localPaymentService/paymentProviders/serializedPaymentBase64Provider.ts","services/localPaymentService/sender/paymentSender.ts","services/localPaymentService/sender/donationSender.ts","services/localPaymentService/urlRawPaymentInfoParser.ts","services/localPaymentService/localPaymentService.ts","app/reactAppContext.ts","components/hooks/useViewTitle.tsx","components/hooks/reduxHooks.ts","components/hooks/useAppContext.tsx","components/common/CopyButton.tsx","components/common/ExternalLink.tsx","components/common/BlockchainLink.tsx","components/Footer.tsx","components/PayButton.tsx","components/ServiceInfo/ServiceIcon.tsx","assets/icons/telegram.svg","components/ServiceInfo/ServiceLink.tsx","components/ServiceInfo/ServiceLinks.tsx","components/ServiceInfo/ServiceInfo.tsx","components/views/View/ViewSide.tsx","components/views/View/View.tsx","components/views/Payment/PaymentDetails/PaymentField.tsx","components/views/Payment/PaymentDetails/PaymentDetails.tsx","store/currentPayment/selectors.ts","components/views/Payment/TotalAmount.tsx","components/views/Payment/Payment.tsx","components/views/Donation/DonationAmount.tsx","components/views/Donation/Donation.tsx","store/applicationError.ts","models/system/applicationError.ts","components/views/Error/Error.tsx","components/views/Success/Success.tsx","components/views/Confirmation/Confirmation.tsx","components/App.tsx","reportWebVitals.ts","store/index.ts","index.tsx","app/webApp.ts"],"names":["module","exports","isBase64UrlFormatSupported","Buffer","decode","format","base64String","base64UrlPreprocessor","encode","encodedValue","prepareEncodedValue","base64value","prepareValueForDecoding","Error","stringToUint8Array","hex","integers","val","parseInt","Uint8Array","stringToBytes","value","bytesToString","tokensAmountToNat","tokensAmount","numberToTokensAmount","tezToMutez","tez","JSON","mutez","isPlainObject","isPlainObjectLodashFunction","arg","Array","defaultEqualityCheck","a","areArgumentsShallowlyEqual","prev","next","length","i","equalityCheck","memoize","lastArgs","lastResult","func","zeroBigNumber","stringPad","fillString","String","string","stringLength","maxLength","fillLength","filler","Math","isStart","padStart","result","j","isWord","IconId","prepareFormattedLink","link","prepareDisplayLink","socialMediaLinkInfoProvider","formattedLink","rawLink","displayLink","icon","emailCheckingRegEx","urlSchemeRegEx","ServiceLinkHelper","getLinkInfo","isEditMode","linkInfo","provider","this","linkInfoIsValid","Common","editLinkInfoProvider","PaymentType","getInvalidLinkInfo","preparedFormattedLink","Email","PaymentValidatorBase","validate","payment","bail","guards","currentFailedValidationResults","validationMethod","failedValidationResults","networksInternal","mainnet","id","name","hangzhounet","networks","networksCollection","Object","tezosMeta","symbol","decimals","thumbnailUri","unknownAssetMeta","tokenWhitelist","network","type","contractAddress","metadata","tokenWhitelistMap","Map","nc","t","contractAddressPrefixes","implicitAddressPrefixes","tezosInfo","addressLength","addressPrefixes","KeyType","URL","NodeURL","globalThis","validateTargetAddress","targetAddress","errors","prefix","validateAmount","BigNumber","amount","validateUrl","url","validateData","data","validateAsset","validateAssetAddress","asset","validateAssetId","assetAddress","assetId","Number","validateAssetDecimals","assetDecimals","PaymentValidator","validateId","validatePaymentAsset","date","isNaN","validateCreatedDate","expiredDate","createdDate","validateExpiredDate","invalidPaymentObject","invalidType","invalidTargetAddress","targetAddressIsNotNetworkAddress","targetAddressHasInvalidLength","invalidId","emptyId","invalidAmount","amountIsNonPositive","invalidData","invalidAsset","invalidAssetAddress","assetAddressIsNotContractAddress","assetAddressHasInvalidLength","invalidAssetId","assetIdIsNegative","assetIdIsNotInteger","invalidAssetDecimals","assetDecimalsNumberIsNegative","assetDecimalsNumberIsNotInteger","invalidSuccessUrl","successUrlHasInvalidProtocol","invalidCancelUrl","cancelUrlHasInvalidProtocol","invalidCreatedDate","invalidExpiredDate","paymentLifetimeIsShort","invalidUrl","invalidProtocol","DonationValidator","donation","validateDesiredAmount","desiredAmount","validateDonationAsset","invalidDonationObject","StateModel","constructor","ObjectSerializationValidator","objectFieldTypes","minObjectFieldsCount","count","info","maxObjectFieldsCount","fieldNames","fieldName","fieldValue","actualFieldType","expectedFieldType","expectedType","Base64Serializer","fieldTypes","serialize","objectSerializationValidator","jsonString","base64","Base64Deserializer","deserialize","serializedValue","serializedValueString","serializedPaymentFieldTypes","PaymentSerializer","serializedPayment","mapPaymentToSerializedPayment","as","mapPaymentAssetToSerializedPaymentAsset","d","su","cu","c","e","s","mapPaymentSignatureToSerializedPaymentSignature","paymentAsset","undefined","paymentSignature","k","cl","client","PaymentDeserializer","serializedPaymentBase64","mapSerializedPaymentToPayment","mapSerializedPaymentAssetToPaymentAsset","successUrl","cancelUrl","created","Date","expired","signature","mapSerializedPaymentSignatureToPaymentSignature","serializedPaymentAsset","address","serializedPaymentSignature","signingPublicKey","contract","serializedDonationFieldTypes","DonationSerializer","serializedDonation","mapDonationToSerializedDonation","serializedDonationBase64","da","das","mapDonationAssetToSerializedDonationAsset","mapDonationSignatureToSerializedDonationSignature","donationAsset","donationSignature","DonationDeserializer","mapSerializedDonationToDonation","desiredAsset","mapSerializedDonationAssetToDonationAsset","nonSerializedDonationSlice","mapSerializedDonationSignatureToDonationSignature","serializedDonationAsset","serializedDonationSignature","Payment","Donation","PaymentUrlType","text","ServiceOperationType","OperationType","OperationDirection","OperationStatus","DonationOperation","valueString","converters","contractPaymentInTezSignPayloadMichelsonType","prim","args","contractPaymentInAssetSignPayloadMichelsonType","PaymentSignPayloadEncoder","contractSignPayload","getContractSignPayload","clientSignPayload","getClientSignPayload","packDataBytes","int","href","serializedClientSignPayload","_key","signedMessageBytes","tezosSignedMessagePrefixBytes","EllipticCurveKeyGenerator","curveName","generate","keyPair","ec","console","publicBasePoint","publicPointX","publicPointY","firstByte","privateKey","pad","fill","publicKey","concat","keyType","encoded","curveInfo","b58cencode","secp256k1","privateKeyPrefix","publicKeyPrefix","p256","commitShortSha","process","config","defaultConfig","app","publicUrl","title","version","buildInfo","links","tezos","PaymentStatus","namespace","checkSendPaymentCondition","currentPaymentState","status","Initial","loadCurrentPayment","createAsyncThunk","async","_","extra","services","localPaymentService","getCurrentPaymentInfo","pay","networkPayment","condition","_payload","getState","dispatchConditionRejection","donate","networkDonation","currentPaymentSlice","createSlice","initialState","reducers","confirmPayment","state","action","NetworkProcessing","service","operation","payload","extraReducers","builder","addCase","fulfilled","_state","pending","UserProcessing","meta","Succeeded","rejected","_action","actions","SerializedPaymentBase64Provider","isMatch","_rawPaymentInfo","getPayment","rawPaymentInfo","substr","getDonation","PaymentSender","tezosToolkit","tezosWallet","wallet","at","sendNativeToken","token","get","tokenAmount","sendFa12Token","sendFa20Token","methodsObject","send_payment","send","tokenContract","batch","withContractCall","methods","approve","asset_value","token_address","token_id","toString","userAddress","pkh","update_operators","add_operator","owner","operator","remove_operator","DonationSender","encodedPayload","objectToBytes","send_donation","UrlRawPaymentInfoParser","parse","isPaymentType","pathname","serializedPaymentOrDonation","hash","slice","operationType","targetDonationAddress","parseTargetDonationAddress","segments","split","filter","Boolean","LocalPaymentService","options","store","servicesProvider","urlRawPaymentInfoParser","paymentProviders","paymentSender","donationSender","parseRawPaymentInfo","parserResult","getCurrentPayment","getService","currentRawPaymentInfo","window","location","paymentProvider","getPaymentProvider","getSendOperation","clearActiveAccount","requestPermissions","networkToBeaconNetwork","waitConfirmation","error","AbortedBeaconError","request","beaconAlertWrapperObserver","getBeaconAlertWrapperObserver","Promise","race","observe","finally","finalize","find","confirmations","dispatch","opHash","blockHash","confirmationCount","resolve","reject","confirmationObservable","subscribe","confirmation","block","currentConfirmation","beaconAlertWrapperObserverIntervalId","beaconAlertWrapperShadowRoot","alertModalElement","closeButtonElement","onBeaconAlertWrapperClosedHandler","setInterval","document","querySelector","shadowRoot","clearInterval","event","KeyboardEvent","key","addEventListener","removeEventListener","ReactAppContext","React","createContext","useAppDispatch","useDispatch","useAppSelector","useSelector","useAppContext","useContext","CopyButton","props","handleClick","useCallback","navigator","clipboard","writeText","copyText","className","onClick","CopyOutlined","CopyButtonPure","memo","ExternalLink","target","rel","children","BlockchainLinkOption","defaultProps","option","ShortAndLong","showCopyButton","classNameBase","BlockchainLink","classNameProp","longLinkClassName","longLinkClassNameProp","shortLinkClassName","shortLinkClassNameProp","externalLinkProps","combineClassNames","BlockchainLinkPure","Footer","cssClasses","label","tezosPayments","webSite","warning","gitHub","FooterPure","PayButton","disabled","currentPaymentStatus","handleButtonClick","size","loading","PayButtonPure","ServiceIcon","iconUrl","src","alt","draggable","getAvatarText","serviceName","_g","_extends","assign","arguments","source","prototype","hasOwnProperty","call","apply","SvgTelegram","_ref","svgRef","titleId","width","height","viewBox","xmlns","xmlnsXlink","ref","stroke","strokeWidth","fillRule","cx","cy","r","ForwardRef","serviceLinkHelper","iconIdMap","LinkOutlined","MailOutlined","Telegram","TelegramIcon","Facebook","FacebookOutlined","Twitter","TwitterOutlined","Instagram","InstagramOutlined","GitHub","GithubOutlined","Reddit","RedditOutlined","ServiceLink","Icon","ServiceLinks","map","ServiceInfo","contractUrl","tezosExplorer","getAccountUrl","showDescription","description","ServiceInfoPure","viewSideClassName","ViewSide","isRight","createElement","View","useEffect","Side","PaymentField","copyButtonEnabled","PaymentDetails","paymentDataFields","useMemo","paymentData","keys","paymentId","paymentDataField","selectTokensState","createSelector","paymentState","optimization","emptyMap","TotalAmount","tokens","toFormat","PaymentPure","DonationAmount","inputAmountRef","useRef","handleCurrencyIconClick","current","focus","allowedTokens","assets","forEach","push","ticker","imageUrl","menu","Item","onAssetChange","selectedAsset","stringMode","min","onChange","onAmountChange","trigger","overlay","placement","DownOutlined","zeroAmount","defaultAmount","setNetworkDonation","useState","handleDonationAmountChange","rawValue","groupSeparator","decimalSeparator","previousNetworkDonation","isPositive","handleAssetChange","isLessThanOrEqualTo","DonationPure","createAction","clearError","applicationErrorReducer","createReducer","addMatcher","isRejected","rejectedWithValue","message","then","subTitle","ErrorPure","Success","operationUrl","getOperationUrl","operationHash","SuccessPure","Confirmation","ConfirmationPure","App","paymentStatus","applicationError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","appReducer","combineReducers","reducer","storeFactory","reactAppContext","BeaconWallet","colorMode","ColorMode","LIGHT","detectNetwork","networkConfig","TezosToolkit","rpcUrls","default","rpc","setWalletProvider","createServices","createReactAppContext","networkName","URLSearchParams","search","defaultNetwork","createTezosBlockchainUrlExplorer","createServicesProvider","indexer","TzKTDataProvider","indexerUrls","tzKT","servicesFactoryContractAddress","minimumSupportedServiceVersion","BetterCallDevDataProvider","betterCallDev","explorer","TzKTBlockchainUrlExplorer","explorers","baseUrl","TzStatsBlockchainUrlExplorer","tzStats","BetterCallDevBlockchainUrlExplorer","configureStore","devTools","middleware","getDefaultMiddleware","thunk","extraArgument","serializableCheck","isSerializable","isPlain","Set","isBigNumber","getEntries","entries","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.25033d02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Footer_label__1NXI-\",\"warning\":\"Footer_warning__2jlml\",\"warning__highlight-message\":\"Footer_warning__highlight-message__3ji4d\"};","import { Buffer } from 'buffer';\n\ntype ValidBase64Format = 'base64' | 'base64url';\n\n// Node.js < 15\nconst isBase64UrlFormatSupported = Buffer.isEncoding('base64url');\n\nexport const decode = (base64String: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (!isBase64UrlFormatSupported) {\n    format = 'base64';\n    base64String = base64UrlPreprocessor.prepareValueForDecoding(base64String);\n  }\n\n  return Buffer.from(base64String, format).toString('utf8');\n};\n\nexport const encode = (value: string, format: ValidBase64Format = 'base64'): string => {\n  if (format !== 'base64' && format !== 'base64url')\n    return '';\n\n  if (isBase64UrlFormatSupported)\n    return Buffer.from(value, 'utf8').toString(format);\n\n  const encodedValue = Buffer.from(value, 'utf8').toString('base64');\n  return base64UrlPreprocessor.prepareEncodedValue(encodedValue);\n};\n\nconst base64UrlPreprocessor = {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  prepareEncodedValue: (base64value: string) => base64value\n    .split('=')[0]!\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_'),\n\n  prepareValueForDecoding: (base64value: string) => {\n    base64value = base64value\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n\n    switch (base64value.length % 4) {\n      case 0: return base64value;\n      case 2: return base64value + '==';\n      case 3: return base64value + '=';\n      default:\n        throw new Error('Invalid base64url value');\n    }\n  }\n};\n","import { Buffer } from 'buffer';\n\nimport BigNumber from 'bignumber.js';\n\nexport const stringToUint8Array = (hex: string): Uint8Array => {\n  const integers = hex.match(/[\\da-f]{2}/gi)?.map(val => parseInt(val, 16));\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return new Uint8Array(integers!);\n};\n\nexport const stringToBytes = (value: string): string => Buffer.from(value, 'utf8').toString('hex');\nexport const bytesToString = (value: string): string => Buffer.from(stringToUint8Array(value)).toString('utf8');\n\nexport const objectToBytes = (value: Record<string, unknown>): string => stringToBytes(JSON.stringify(value));\nexport const bytesToObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: string): T | null => {\n  try {\n    return JSON.parse(bytesToString(value));\n  }\n  catch {\n    return null;\n  }\n};\n\nexport const tokensAmountToNat = (tokensAmount: BigNumber | number, decimals: number): BigNumber => {\n  return new BigNumber(tokensAmount).multipliedBy(10 ** decimals).integerValue();\n};\n\nexport const numberToTokensAmount = (value: BigNumber | number, decimals: number): BigNumber => {\n  return new BigNumber(value).integerValue().div(10 ** decimals);\n};\n\nexport const tezToMutez = (tez: BigNumber | number): BigNumber => tokensAmountToNat(tez, 6);\nexport const mutezToTez = (mutez: BigNumber | number): BigNumber => numberToTokensAmount(mutez, 6);\n","import isPlainObjectLodashFunction from 'lodash.isplainobject';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isArray = (arg: any): arg is any[] => {\n  return Array.isArray(arg);\n};\n\nexport const isReadonlyArray = (arg: unknown): arg is readonly unknown[] => {\n  return Array.isArray(arg);\n};\n\nexport const isPlainObject = <T extends Record<string, unknown> = Record<string, unknown>>(value: unknown): value is T => {\n  return isPlainObjectLodashFunction(value);\n};\n","const defaultEqualityCheck = <T>(a: T, b: T) => a === b;\n\nconst areArgumentsShallowlyEqual = <T extends IArguments | null>(equalityCheck: (a: T, b: T) => boolean, prev: T, next: T) => {\n    if (prev === null || next === null || prev.length !== next.length) {\n        return false;\n    }\n\n    // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n    const length = prev.length;\n    for (let i = 0; i < length; i++) {\n        if (!equalityCheck(prev[i], next[i])) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/* eslint-disable prefer-rest-params  */\n/* eslint-disable prefer-spread */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const memoize = <TF extends (...args: any) => any>(func: TF, equalityCheck = defaultEqualityCheck): TF => {\n    let lastArgs: IArguments | null = null;\n    let lastResult: unknown = null;\n\n    return (function () {\n        if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n            // apply arguments instead of spreading for performance.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            lastResult = func.apply(null, arguments as any);\n        }\n\n        lastArgs = arguments;\n        return lastResult;\n    } as TF);\n};\n/* eslint-enable prefer-spread */\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/no-explicit-any */\n","import BigNumber from 'bignumber.js';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst emptyArray: any[] = [];\nconst emptyObject = {};\nconst emptyMap = new Map();\nconst emptySet: Set<any> = new Set();\nconst zeroBigNumber = new BigNumber(0);\n\nexport default {\n    emptyArray,\n    emptyMap,\n    emptySet,\n    emptyObject,\n    zeroBigNumber\n};\n","export const capitalize = (value: string): string => value && (value[0]?.toLocaleUpperCase() + value.slice(1));\n\nexport const getAvatarText = (value: string, maxLength = 2) => {\n  if (!value || !maxLength)\n    return '';\n\n  let result = '';\n\n  for (let i = 0, j = 0, isWord = false; i < value.length; i++) {\n    if (!isWord && value[i] !== ' ') {\n      isWord = true;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      result += value[i]!;\n\n      if (++j === maxLength)\n        return result;\n    }\n    else if (isWord && value[i] === ' ') {\n      isWord = false;\n    }\n  }\n\n  return result;\n};\n\nconst stringPad = (string: string, isStart: boolean, maxLength: number, fillString = ' ') => {\n  if (String.prototype.padStart !== undefined)\n    return string.padStart(maxLength, fillString);\n\n  const stringLength = string.length;\n  // eslint-disable-next-line eqeqeq\n  if (maxLength <= stringLength || fillString == '')\n    return string;\n\n  const fillLength = maxLength - stringLength;\n  let filler = fillString.repeat(Math.ceil(fillLength / fillString.length));\n\n  if (filler.length > fillLength)\n    filler = filler.slice(0, fillLength);\n\n  return isStart ? filler + string : string + filler;\n};\n\nexport const padStart = (string: string, maxLength: number, fillString = ' ') => String.prototype.padStart !== undefined\n  ? string.padStart(maxLength, fillString)\n  : stringPad(string, true, maxLength, fillString);\n\nexport const padEnd = (string: string, maxLength: number, fillString = ' ') => String.prototype.padEnd !== undefined\n  ? string.padEnd(maxLength, fillString)\n  : stringPad(string, false, maxLength, fillString);\n","import { memoize } from '../utils';\n\nexport enum IconId {\n  Common = 0,\n  Email = 1,\n  Telegram = 2,\n  Facebook = 3,\n  Twitter = 4,\n  Instagram = 5,\n  GitHub = 6,\n  Reddit = 7\n}\n\ninterface LinkInfo {\n  readonly rawLink: string;\n  readonly formattedLink: string;\n  readonly displayLink: string;\n  readonly icon: IconId;\n}\n\nconst getInvalidLinkInfo = (link: string): LinkInfo => ({\n  rawLink: link,\n  formattedLink: '#',\n  displayLink: 'Invalid Link',\n  icon: IconId.Common\n});\n\ntype LinkInfoProvider = (link: string) => LinkInfo | false;\n\nconst prepareFormattedLink = memoize((link: string) => link.trim());\nconst prepareDisplayLink = memoize((link: string) => link.trim().replace(/\\/$/, ''));\n\nconst socialMediaLinkInfoProvider = (link: string, baseUrl: string, icon: IconId): LinkInfo | false => {\n  if (!link.startsWith(baseUrl))\n    return false;\n\n  const formattedLink = prepareFormattedLink(link);\n  if (formattedLink === baseUrl)\n    return false;\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link).replace(baseUrl, ''),\n    icon\n  };\n};\n\nconst telegramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://t.me/', IconId.Telegram);\nconst facebookLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://facebook.com/', IconId.Facebook);\nconst twitterLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://twitter.com/', IconId.Twitter);\nconst instagramLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://instagram.com/', IconId.Instagram);\nconst gitHubLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://github.com/', IconId.GitHub);\nconst redditLinkInfoProvider: LinkInfoProvider = link => socialMediaLinkInfoProvider(link, 'https://www.reddit.com/', IconId.Reddit);\n\n// This regex should not use for email validation\nconst emailCheckingRegEx = /^[^\\s/@]+@[^\\s@/]+$/;\nconst emailLinkInfoProvider: LinkInfoProvider = link => {\n  const preparedFormattedLink = prepareFormattedLink(link);\n\n  return emailCheckingRegEx.test(preparedFormattedLink) && {\n    rawLink: link,\n    formattedLink: `mailto:${preparedFormattedLink}`,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Email\n  };\n};\n\nconst javascriptLinkInfoProvider: LinkInfoProvider = link => link.startsWith('javascript') ? getInvalidLinkInfo(link) : false;\n\n// https://datatracker.ietf.org/doc/html/rfc3986#section-3.1\nconst urlSchemeRegEx = /^([a-z][a-z0-9+\\-.]*):/;\nconst commonLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return urlSchemeRegEx.test(formattedLink) && {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nconst editLinkInfoProvider: LinkInfoProvider = link => {\n  const formattedLink = prepareFormattedLink(link);\n\n  return {\n    rawLink: link,\n    formattedLink,\n    displayLink: prepareDisplayLink(link),\n    icon: IconId.Common\n  };\n};\n\nexport class ServiceLinkHelper {\n  // Order is important\n  static readonly linkInfoProviders: readonly LinkInfoProvider[] = [\n    // Disallowed\n    javascriptLinkInfoProvider,\n    // Allowed\n    telegramLinkInfoProvider,\n    facebookLinkInfoProvider,\n    twitterLinkInfoProvider,\n    instagramLinkInfoProvider,\n    gitHubLinkInfoProvider,\n    emailLinkInfoProvider,\n    redditLinkInfoProvider,\n    commonLinkInfoProvider\n  ];\n\n  getLinkInfo(link: string, isEditMode = false): LinkInfo | null {\n    for (const provider of ServiceLinkHelper.linkInfoProviders) {\n      const linkInfo = provider(link);\n\n      if (linkInfo)\n        return this.linkInfoIsValid(linkInfo) ? linkInfo : null;\n    }\n\n    if (isEditMode)\n      return editLinkInfoProvider(link) as LinkInfo;\n\n    return null;\n  }\n\n  linkInfoIsValid(linkInfo: LinkInfo) {\n    return linkInfo.formattedLink !== '#';\n  }\n}\n","export enum PaymentType {\n  Payment = 1,\n  Donation = 2\n}\n\nexport interface PaymentBase {\n  readonly type: PaymentType;\n  readonly targetAddress: string;\n}\n","import { PaymentBase } from '../../models/payment/paymentBase';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { guards } from '../../utils';\nimport { PaymentValidationMethod } from './paymentValidationMethod';\n\nexport abstract class PaymentValidatorBase<TPayment extends PaymentBase> {\n  protected readonly abstract validationMethods: ReadonlyArray<PaymentValidationMethod<TPayment>>;\n  protected readonly abstract invalidPaymentObjectError: string;\n\n  validate(payment: TPayment, bail = false): FailedValidationResults {\n    if (!guards.isPlainObject(payment))\n      return [this.invalidPaymentObjectError];\n\n    let failedValidationResults: FailedValidationResults;\n    for (const validationMethod of this.validationMethods) {\n      const currentFailedValidationResults = validationMethod(payment);\n      if (currentFailedValidationResults) {\n        if (!bail)\n          return currentFailedValidationResults;\n\n        failedValidationResults = (failedValidationResults || []).concat(currentFailedValidationResults);\n      }\n    }\n\n    return failedValidationResults;\n  }\n}\n","const networksInternal = {\n  mainnet: {\n    id: 'NetXdQprcVkpaWU',\n    name: 'mainnet',\n  },\n  hangzhounet: {\n    id: 'NetXZSsxBpMQeAT',\n    name: 'hangzhounet'\n  }\n} as const;\n\ninterface NetworkInternal {\n  readonly id: string;\n  readonly name: string;\n}\n\ntype Networks = {\n  readonly [P in keyof typeof networksInternal]: (typeof networksInternal)[P] extends NetworkInternal & {\n    readonly name: P;\n  }\n  ? (typeof networksInternal)[P]\n  : never\n};\n\nexport type Network = Networks[keyof Networks];\nexport interface CustomNetwork {\n  readonly id?: string;\n  readonly name: string;\n}\n\nexport const networks: Networks = networksInternal;\nexport const networksCollection = Object.values(networksInternal);\n\nexport const networkIdRegExp = /^[a-zA-Z]\\w*$/;\nexport const networkNameRegExp = networkIdRegExp;\n","import { Network, networks, networksCollection } from './network';\n\ninterface TokenBase {\n  readonly network: Network;\n  readonly contractAddress: string;\n  readonly metadata?: TokenMetadata;\n}\n\nexport interface TokenFA12 extends TokenBase {\n  readonly type: 'fa1.2';\n}\n\nexport interface TokenFA2 extends TokenBase {\n  readonly type: 'fa2';\n  readonly id: number;\n}\n\nexport type Token = TokenFA12 | TokenFA2;\n\nexport type TokenMetadata = {\n  readonly decimals: number;\n  readonly symbol: string;\n  readonly name: string;\n  readonly thumbnailUri: string;\n};\n\nexport const tezosMeta: TokenMetadata = {\n  symbol: 'XTZ',\n  name: 'Tezos',\n  decimals: 6,\n  thumbnailUri: 'https://dashboard.tezospayments.com/tokens/tezos.png'\n};\n\nexport const unknownAssetMeta: TokenMetadata = {\n  name: 'Unknown',\n  symbol: 'Unknown',\n  decimals: 0,\n  thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png'\n};\n\nexport const tokenWhitelist: readonly Token[] = [\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa1.2',\n  //   contractAddress: 'KT1K9gCRgaLRFKTErYt1wVxA3Frb9FjasjTV',\n  //   metadata: {\n  //     decimals: 18,\n  //     symbol: 'KUSD',\n  //     name: 'Kolibri',\n  //     thumbnailUri: 'https://kolibri-data.s3.amazonaws.com/logo.png',\n  //   },\n  // },\n  // {\n  //   network: networks.mainnet,\n  //   type: 'fa2',\n  //   contractAddress: 'KT1REEb5VxWRjcHm5GzDMwErMmNFftsE5Gpf',\n  //   fa2TokenId: 0,\n  //   metadata: {\n  //     decimals: 6,\n  //     symbol: 'USDS',\n  //     name: 'Stably USD',\n  //     thumbnailUri: 'https://quipuswap.com/tokens/stably.png',\n  //   },\n  // },\n  {\n    network: networks.hangzhounet,\n    type: 'fa1.2',\n    contractAddress: 'KT19sYK89XKYTeGHekWK9wL5iDHVF4YYf26t',\n    metadata: {\n      decimals: 6,\n      symbol: 'FA12',\n      name: 'Test FA 1.2',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  },\n  {\n    network: networks.hangzhounet,\n    type: 'fa2',\n    contractAddress: 'KT1EKo1Eihucz9N4cQyaDKeYRoMzTEoiZRAT',\n    id: 0,\n    metadata: {\n      decimals: 6,\n      symbol: 'FA20',\n      name: 'Test FA 2.0',\n      thumbnailUri: 'https://dashboard.tezospayments.com/tokens/unknown.png',\n    },\n  },\n];\n\nexport const tokenWhitelistMap: ReadonlyMap<Network, ReadonlyMap<Token['contractAddress'], Token>> = new Map(\n  networksCollection.map(nc => [nc, new Map(tokenWhitelist.filter(t => t.network === nc).map(t => [t.contractAddress, t]))])\n);\n","const contractAddressPrefixes = ['KT'] as const;\nconst implicitAddressPrefixes = ['tz1', 'tz2', 'tz3'] as const;\nconst addressPrefixes = [...contractAddressPrefixes, ...implicitAddressPrefixes] as const;\n\nexport const tezosInfo = {\n  addressLength: 36,\n  contractAddressPrefixes,\n  implicitAddressPrefixes,\n  addressPrefixes,\n} as const;\n","export enum KeyType {\n  Ed25519 = 'Ed25519',\n  Secp256k1 = 'Secp256k1',\n  P256 = 'P256'\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { URL as NodeURL } from 'url';\n\nexport type URL = NodeURL;\nexport const URL = NodeURL || (globalThis as any).URL;\n","import BigNumber from 'bignumber.js';\n\nimport { tezosInfo } from '../../models/blockchain';\nimport { DonationAsset, Payment, PaymentAsset } from '../../models/payment';\nimport type { FailedValidationResults } from '../../models/validation';\nimport { URL } from '../../native';\nimport { guards } from '../../utils';\n\ntype Errors<FieldNames extends string> = {\n  readonly [P in FieldNames]: string;\n};\n\nexport const validateTargetAddress = (\n  targetAddress: string,\n  errors: Errors<'invalidTargetAddress' | 'targetAddressHasInvalidLength' | 'targetAddressIsNotNetworkAddress'>\n): FailedValidationResults => {\n  if (typeof targetAddress !== 'string')\n    return [errors.invalidTargetAddress];\n\n  if (targetAddress.length !== tezosInfo.addressLength)\n    return [errors.targetAddressHasInvalidLength];\n\n  if (!tezosInfo.addressPrefixes.some(prefix => targetAddress.startsWith(prefix)))\n    return [errors.targetAddressIsNotNetworkAddress];\n};\n\nexport const validateId = (\n  id: string,\n  errors: Errors<'invalidId' | 'emptyId'>\n): FailedValidationResults => {\n  if (typeof id !== 'string')\n    return [errors.invalidId];\n\n  if (id === '')\n    return [errors.emptyId];\n};\n\nexport const validateAmount = (\n  amount: BigNumber,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  if (!BigNumber.isBigNumber(amount) || amount.isNaN() || !amount.isFinite())\n    return [errors.invalidAmount];\n\n  if (amount.isZero() || amount.isNegative())\n    return [errors.amountIsNonPositive];\n};\n\nexport const validateDesiredAmount = (\n  desiredAmount: BigNumber | undefined,\n  errors: Errors<'invalidAmount' | 'amountIsNonPositive'>\n): FailedValidationResults => {\n  return desiredAmount === undefined ? undefined : validateAmount(desiredAmount, errors);\n};\n\nexport const validatePaymentAsset = (\n  asset: PaymentAsset | undefined,\n  errors: Errors<\n    | 'invalidAsset'\n    | 'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'\n    | 'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'\n    | 'invalidAssetDecimals' | 'assetDecimalsNumberIsNegative' | 'assetDecimalsNumberIsNotInteger'\n  >\n): FailedValidationResults => {\n  if (asset === undefined)\n    return;\n\n  if (!guards.isPlainObject(asset))\n    return [errors.invalidAsset];\n\n  return validateAsset(asset, errors) || validateAssetDecimals(asset.decimals, errors);\n};\n\nexport const validateDonationAsset = (\n  asset: DonationAsset | undefined,\n  errors: Errors<\n    | 'invalidAsset'\n    | 'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'\n    | 'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'\n  >\n): FailedValidationResults => {\n  if (asset === undefined)\n    return;\n\n  if (!guards.isPlainObject(asset))\n    return [errors.invalidAsset];\n\n  return validateAsset(asset, errors);\n};\n\nexport const validateCreatedDate = (\n  date: Date,\n  errors: Errors<'invalidCreatedDate'>\n): FailedValidationResults => {\n  if (!(date instanceof Date) || isNaN(date.getTime()))\n    return [errors.invalidCreatedDate];\n};\n\nexport const validateUrl = (\n  url: URL | undefined,\n  errors: Errors<'invalidUrl' | 'invalidProtocol'>\n): FailedValidationResults => {\n  if (url === undefined)\n    return;\n\n  if (!(url instanceof URL))\n    return [errors.invalidUrl];\n\n  if (url.protocol.indexOf('javascript') > -1)\n    return [errors.invalidProtocol];\n};\n\nexport const validateExpiredDate = (\n  expiredDate: Date | undefined,\n  createdDate: Date,\n  minimumPaymentLifetime: number,\n  errors: Errors<'invalidExpiredDate' | 'paymentLifetimeIsShort'>\n): FailedValidationResults => {\n  if (expiredDate === undefined)\n    return;\n\n  if (!(expiredDate instanceof Date) || isNaN(expiredDate.getTime()))\n    return [errors.invalidExpiredDate];\n\n  if (expiredDate.getTime() - createdDate.getTime() < minimumPaymentLifetime) {\n    return [errors.paymentLifetimeIsShort];\n  }\n};\n\nexport const validateData = (\n  data: Payment['data'],\n  errors: Errors<'invalidData'>\n): FailedValidationResults => {\n  if (data === undefined)\n    return;\n\n  if (!guards.isPlainObject(data))\n    return [errors.invalidData];\n};\n\nconst validateAsset = (\n  asset: PaymentAsset | DonationAsset,\n  errors: Errors<\n    | 'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'\n    | 'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'\n  >\n): FailedValidationResults => {\n  return validateAssetAddress(asset.address, errors) || validateAssetId(asset.id, errors);\n};\n\nconst validateAssetAddress = (\n  assetAddress: string,\n  errors: Errors<'invalidAssetAddress' | 'assetAddressHasInvalidLength' | 'assetAddressIsNotContractAddress'>\n): FailedValidationResults => {\n  if (typeof assetAddress !== 'string')\n    return [errors.invalidAssetAddress];\n\n  if (assetAddress.length !== tezosInfo.addressLength)\n    return [errors.assetAddressHasInvalidLength];\n\n  if (!tezosInfo.contractAddressPrefixes.some(prefix => assetAddress.startsWith(prefix)))\n    return [errors.assetAddressIsNotContractAddress];\n};\n\nconst validateAssetId = (\n  assetId: number | null,\n  errors: Errors<'invalidAssetId' | 'assetIdIsNegative' | 'assetIdIsNotInteger'>\n): FailedValidationResults => {\n  if (assetId === null)\n    return;\n\n  if (typeof assetId !== 'number' || Number.isNaN(assetId) || !Number.isFinite(assetId))\n    return [errors.invalidAssetId];\n\n  if (assetId < 0)\n    return [errors.assetIdIsNegative];\n\n  if (!Number.isInteger(assetId))\n    return [errors.assetIdIsNotInteger];\n};\n\nconst validateAssetDecimals = (\n  assetDecimals: number,\n  errors: Errors<'invalidAssetDecimals' | 'assetDecimalsNumberIsNegative' | 'assetDecimalsNumberIsNotInteger'>\n): FailedValidationResults => {\n  if (typeof assetDecimals !== 'number' || Number.isNaN(assetDecimals) || !Number.isFinite(assetDecimals))\n    return [errors.invalidAssetDecimals];\n\n  if (assetDecimals < 0)\n    return [errors.assetDecimalsNumberIsNegative];\n\n  if (!Number.isInteger(assetDecimals))\n    return [errors.assetDecimalsNumberIsNotInteger];\n};\n","import type { Payment, UnsignedPayment } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport {\n  validateTargetAddress, validateId, validateAmount, validateData, validatePaymentAsset,\n  validateCreatedDate, validateExpiredDate, validateUrl\n} from './validationMethods';\n\nexport class PaymentValidator extends PaymentValidatorBase<Payment | UnsignedPayment> {\n  static readonly errors = {\n    invalidPaymentObject: 'Payment is undefined or not object',\n    invalidType: 'Payment type is invalid',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidId: 'Id is invalid',\n    emptyId: 'Id is empty',\n    invalidAmount: 'Amount is invalid',\n    amountIsNonPositive: 'Amount is less than or equal to zero',\n    invalidData: 'Payment data is invalid',\n    invalidAsset: 'Asset is invalid',\n    invalidAssetAddress: 'Asset address is invalid',\n    assetAddressIsNotContractAddress: 'Asset address isn\\'t a contract address',\n    assetAddressHasInvalidLength: 'Asset address has an invalid address',\n    invalidAssetId: 'Asset Id is invalid',\n    assetIdIsNegative: 'Asset Id is negative',\n    assetIdIsNotInteger: 'Asset Id isn\\'t an integer',\n    invalidAssetDecimals: 'Asset number of decimals is invalid',\n    assetDecimalsNumberIsNegative: 'Asset number of decimals is negative',\n    assetDecimalsNumberIsNotInteger: 'Asset number of decimals isn\\'t an integer',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol',\n    invalidCreatedDate: 'Created date is invalid',\n    invalidExpiredDate: 'Expired date is invalid',\n    paymentLifetimeIsShort: 'Payment lifetime is short'\n  } as const;\n  static readonly minimumPaymentLifetime = 600000; // 10 * 60 * 1000;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Payment | UnsignedPayment>> = [\n    payment => payment.type !== PaymentType.Payment ? [PaymentValidator.errors.invalidType] : undefined,\n    payment => validateTargetAddress(payment.targetAddress, PaymentValidator.errors),\n    payment => validateId(payment.id, PaymentValidator.errors),\n    payment => validateAmount(payment.amount, PaymentValidator.errors),\n    payment => validatePaymentAsset(payment.asset, PaymentValidator.errors),\n    payment => validateData(payment.data, PaymentValidator.errors),\n    payment => validateUrl(payment.successUrl, PaymentValidator.successUrlErrors),\n    payment => validateUrl(payment.cancelUrl, PaymentValidator.cancelUrlErrors),\n    payment => validateCreatedDate(payment.created, PaymentValidator.errors),\n    payment => validateExpiredDate(payment.expired, payment.created, PaymentValidator.minimumPaymentLifetime, PaymentValidator.errors),\n  ];\n\n  protected readonly invalidPaymentObjectError = PaymentValidator.errors.invalidPaymentObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidSuccessUrl,\n    invalidProtocol: PaymentValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: PaymentValidator.errors.invalidCancelUrl,\n    invalidProtocol: PaymentValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","import type { Donation, UnsignedDonation } from '../../models/payment';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport type { PaymentValidationMethod } from './paymentValidationMethod';\nimport { PaymentValidatorBase } from './paymentValidatorBase';\nimport { validateTargetAddress, validateDesiredAmount, validateDonationAsset, validateUrl, validateData } from './validationMethods';\n\nexport class DonationValidator extends PaymentValidatorBase<Donation | UnsignedDonation> {\n  static readonly errors = {\n    invalidDonationObject: 'Donation is undefined or not object',\n    invalidType: 'Donation type is invalid',\n    invalidData: 'Donation data is invalid',\n    invalidAmount: 'Desired amount is invalid',\n    amountIsNonPositive: 'Desired amount is less than or equal to zero',\n    invalidTargetAddress: 'Target address is invalid',\n    targetAddressIsNotNetworkAddress: 'Target address isn\\'t a network address',\n    targetAddressHasInvalidLength: 'Target address has an invalid address',\n    invalidAsset: 'Desired asset is invalid',\n    invalidAssetAddress: 'Desired asset address is invalid',\n    assetAddressIsNotContractAddress: 'Desired asset address isn\\'t a contract address',\n    assetAddressHasInvalidLength: 'Desired asset address has an invalid address',\n    invalidAssetId: 'Asset Id is invalid',\n    assetIdIsNegative: 'Asset Id is negative',\n    assetIdIsNotInteger: 'Asset Id isn\\'t an integer',\n    invalidSuccessUrl: 'Success URL is invalid',\n    successUrlHasInvalidProtocol: 'Success URL has an invalid protocol',\n    invalidCancelUrl: 'Cancel URL is invalid',\n    cancelUrlHasInvalidProtocol: 'Cancel URL has an invalid protocol'\n  } as const;\n\n  protected readonly validationMethods: ReadonlyArray<PaymentValidationMethod<Donation | UnsignedDonation>> = [\n    donation => donation.type !== PaymentType.Donation ? [DonationValidator.errors.invalidType] : undefined,\n    donation => validateData(donation.data, DonationValidator.errors),\n    donation => validateTargetAddress(donation.targetAddress, DonationValidator.errors),\n    donation => validateDesiredAmount(donation.desiredAmount, DonationValidator.errors),\n    donation => validateDonationAsset(donation.desiredAsset, DonationValidator.errors),\n    donation => validateUrl(donation.successUrl, DonationValidator.successUrlErrors),\n    donation => validateUrl(donation.cancelUrl, DonationValidator.cancelUrlErrors)\n  ];\n\n  protected readonly invalidPaymentObjectError = DonationValidator.errors.invalidDonationObject;\n\n  private static readonly successUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidSuccessUrl,\n    invalidProtocol: DonationValidator.errors.successUrlHasInvalidProtocol\n  };\n\n  private static readonly cancelUrlErrors = {\n    invalidUrl: DonationValidator.errors.invalidCancelUrl,\n    invalidProtocol: DonationValidator.errors.cancelUrlHasInvalidProtocol\n  };\n}\n","export abstract class StateModel {\n    protected constructor() {\n    // All derived classes should be static\n    }\n}\n","import { SerializedFieldType } from './serializedFieldType';\n\nexport class ObjectSerializationValidator<T extends Record<string | number, unknown>> {\n  private _minObjectFieldsCount: number | undefined;\n\n  constructor(\n    protected readonly objectFieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>\n  ) {\n  }\n\n  private get minObjectFieldsCount() {\n    if (!this._minObjectFieldsCount) {\n      let count = 0;\n      for (const info of this.objectFieldTypes) {\n        if (typeof info[1] === 'string' ? info[1] !== 'undefined' : info[1].every(type => type !== 'undefined'))\n          count++;\n      }\n\n      this._minObjectFieldsCount = count;\n    }\n\n    return this._minObjectFieldsCount;\n  }\n\n  private get maxObjectFieldsCount() {\n    return this.objectFieldTypes.size;\n  }\n\n  validate(value: T): value is T {\n    if (!value)\n      return false;\n\n    const fieldNames = Object.getOwnPropertyNames(value) as ReadonlyArray<keyof T>;\n\n    // Prevent the field checking if the deserializedValue has an invalid number of fields\n    if (fieldNames.length < this.minObjectFieldsCount || fieldNames.length > this.maxObjectFieldsCount)\n      return false;\n\n    for (const [fieldName, expectedFieldType] of this.objectFieldTypes) {\n      const fieldValue = value[fieldName];\n      const actualFieldType = fieldValue === null ? 'null' : typeof fieldValue;\n\n      if (Array.isArray(expectedFieldType)\n        ? !expectedFieldType.some(expectedType => actualFieldType === expectedType)\n        : actualFieldType !== expectedFieldType\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Serializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  serialize(value: T): string | null {\n    try {\n      if (!this.objectSerializationValidator.validate(value))\n        return null;\n\n      const jsonString = JSON.stringify(value);\n      return base64.encode(jsonString, 'base64url');\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { base64 } from '../../utils';\nimport { ObjectSerializationValidator } from './objectSerializationValidator';\nimport type { SerializedFieldType } from './serializedFieldType';\n\nexport class Base64Deserializer<T extends Record<string | number, unknown>> {\n  private objectSerializationValidator: ObjectSerializationValidator<T>;\n\n  constructor(fieldTypes: ReadonlyMap<keyof T, SerializedFieldType | readonly SerializedFieldType[]>) {\n    this.objectSerializationValidator = new ObjectSerializationValidator(fieldTypes);\n  }\n\n  deserialize(serializedValue: string): T | null {\n    try {\n      let value: T;\n\n      if (serializedValue) {\n        const serializedValueString = base64.decode(serializedValue, 'base64url');\n        value = JSON.parse(serializedValueString);\n      }\n      else\n        value = {} as T;\n\n      return this.objectSerializationValidator.validate(value)\n        ? value\n        : null;\n    }\n    catch {\n      return null;\n    }\n  }\n}\n","import { SerializedPayment, SerializedPaymentAsset, SerializedPaymentSignature } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nconst _serializedPaymentAssetFieldTypes: ReadonlyMap<\n  keyof SerializedPaymentAsset, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPaymentAsset, SerializedFieldType | readonly SerializedFieldType[]>()\n  // address\n  .set('a', 'string')\n  // decimals\n  .set('d', 'number')\n  // id\n  .set('i', ['number', 'undefined', 'null']);\n\nconst _serializedPaymentSignatureFieldTypes: ReadonlyMap<\n  keyof SerializedPaymentSignature, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPaymentSignature, SerializedFieldType | readonly SerializedFieldType[]>()\n  // contract\n  .set('c', 'string')\n  // client\n  .set('cl', ['string', 'undefined', 'null'])\n  // signature.signingPublicKey\n  .set('k', 'string');\n\nexport const serializedPaymentFieldTypes: ReadonlyMap<\n  keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedPayment, SerializedFieldType | readonly SerializedFieldType[]>()\n  // id\n  .set('i', 'string')\n  // amount\n  .set('a', 'string')\n  // target\n  .set('t', 'string')\n  // asset\n  .set('as', ['object', 'undefined', 'null'])\n  // .set('as', serializedPaymentAssetFieldTypes)\n  // data\n  .set('d', ['object', 'undefined', 'null'])\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null'])\n  // created\n  .set('c', 'number')\n  // expired\n  .set('e', ['number', 'undefined', 'null'])\n  // signature\n  .set('s', 'object');\n  // .set('s', serializedPaymentSignatureFieldTypes);\n","import type {\n  Payment, PaymentAsset, PaymentSignature,\n  SerializedPayment, SerializedPaymentAsset, SerializedPaymentSignature\n} from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentSerializer {\n  protected static readonly serializedPaymentBase64Serializer = new Base64Serializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  serialize(payment: Payment): string | null {\n    try {\n      const serializedPayment = this.mapPaymentToSerializedPayment(payment);\n      return PaymentSerializer.serializedPaymentBase64Serializer.serialize(serializedPayment);\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapPaymentToSerializedPayment(payment: Payment): SerializedPayment {\n    return {\n      i: payment.id,\n      a: payment.amount.toString(10),\n      t: payment.targetAddress,\n      as: payment.asset ? this.mapPaymentAssetToSerializedPaymentAsset(payment.asset) : undefined,\n      d: payment.data,\n      su: payment.successUrl?.toString(),\n      cu: payment.cancelUrl?.toString(),\n      c: payment.created.getTime(),\n      e: payment.expired?.getTime(),\n      s: this.mapPaymentSignatureToSerializedPaymentSignature(payment.signature)\n    };\n  }\n\n  protected mapPaymentAssetToSerializedPaymentAsset(paymentAsset: PaymentAsset): SerializedPaymentAsset {\n    return {\n      a: paymentAsset.address,\n      d: paymentAsset.decimals,\n      i: paymentAsset.id !== null ? paymentAsset.id : undefined\n    };\n  }\n\n  protected mapPaymentSignatureToSerializedPaymentSignature(paymentSignature: PaymentSignature): SerializedPaymentSignature {\n    return {\n      k: paymentSignature.signingPublicKey,\n      c: paymentSignature.contract,\n      cl: paymentSignature.client\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type {\n  Payment, PaymentAsset, PaymentSignature,\n  SerializedPayment, SerializedPaymentAsset, SerializedPaymentSignature\n} from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedPaymentFieldTypes } from './serializedPaymentFieldTypes';\n\nexport class PaymentDeserializer {\n  protected static readonly serializedPaymentBase64Deserializer = new Base64Deserializer<SerializedPayment>(\n    serializedPaymentFieldTypes\n  );\n\n  deserialize(serializedPaymentBase64: string): Payment | null {\n    try {\n      const serializedPayment = PaymentDeserializer.serializedPaymentBase64Deserializer.deserialize(serializedPaymentBase64);\n\n      return serializedPayment ? this.mapSerializedPaymentToPayment(serializedPayment) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedPaymentToPayment(serializedPayment: SerializedPayment): Payment {\n    return {\n      type: PaymentType.Payment,\n      id: serializedPayment.i,\n      amount: new BigNumber(serializedPayment.a),\n      targetAddress: serializedPayment.t,\n      asset: serializedPayment.as ? this.mapSerializedPaymentAssetToPaymentAsset(serializedPayment.as) : undefined,\n      data: serializedPayment.d,\n      successUrl: serializedPayment.su ? new URL(serializedPayment.su) : undefined,\n      cancelUrl: serializedPayment.cu ? new URL(serializedPayment.cu) : undefined,\n      created: new Date(serializedPayment.c),\n      expired: serializedPayment.e ? new Date(serializedPayment.e) : undefined,\n\n      signature: this.mapSerializedPaymentSignatureToPaymentSignature(serializedPayment.s)\n    };\n  }\n\n  protected mapSerializedPaymentAssetToPaymentAsset(serializedPaymentAsset: SerializedPaymentAsset): PaymentAsset {\n    return {\n      address: serializedPaymentAsset.a,\n      decimals: serializedPaymentAsset.d,\n      id: serializedPaymentAsset.i !== undefined ? serializedPaymentAsset.i : null\n    };\n  }\n\n  protected mapSerializedPaymentSignatureToPaymentSignature(serializedPaymentSignature: SerializedPaymentSignature): PaymentSignature {\n    return {\n      signingPublicKey: serializedPaymentSignature.k,\n      contract: serializedPaymentSignature.c,\n      client: serializedPaymentSignature.cl\n    };\n  }\n}\n","import { SerializedDonation, SerializedDonationAsset, SerializedDonationSignature } from '../../models';\nimport { SerializedFieldType } from '../base64';\n\nconst _serializedDonationAssetFieldTypes: ReadonlyMap<\n  keyof SerializedDonationAsset, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonationAsset, SerializedFieldType | readonly SerializedFieldType[]>()\n  // address\n  .set('a', 'string')\n  // id\n  .set('i', ['number', 'undefined', 'null']);\n\nconst _serializedDonationSignatureFieldTypes: ReadonlyMap<\n  keyof SerializedDonationSignature, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonationSignature, SerializedFieldType | readonly SerializedFieldType[]>()\n  // client\n  .set('cl', 'string')\n  // signature.signingPublicKey\n  .set('k', 'string');\n\nexport const serializedDonationFieldTypes: ReadonlyMap<\n  keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]\n> = new Map<keyof SerializedDonation, SerializedFieldType | readonly SerializedFieldType[]>()\n  // data\n  .set('d', ['object', 'undefined', 'null'])\n  // desiredAmount\n  .set('da', ['string', 'undefined', 'null'])\n  // desiredAsset\n  .set('das', ['object', 'undefined', 'null'])\n  // .set('das', serializedDonationAssetFieldTypes)\n  // successUrl\n  .set('su', ['string', 'undefined', 'null'])\n  // cancelUrl\n  .set('cu', ['string', 'undefined', 'null'])\n  // signature\n  .set('s', ['object', 'undefined', 'null']);\n  // .set('da', serializedDonationSignatureFieldTypes)\n","import type {\n  Donation, DonationAsset, DonationSignature,\n  SerializedDonation, SerializedDonationAsset, SerializedDonationSignature\n} from '../../models';\nimport { Base64Serializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nconst serializedEmptyObjectBase64 = 'e30';\nexport class DonationSerializer {\n  protected static readonly serializedDonationBase64Serializer = new Base64Serializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  serialize(donation: Donation): string | null {\n    try {\n      const serializedDonation = this.mapDonationToSerializedDonation(donation);\n      const serializedDonationBase64 = DonationSerializer.serializedDonationBase64Serializer.serialize(serializedDonation);\n\n      return serializedDonationBase64 === serializedEmptyObjectBase64 ? '' : serializedDonationBase64;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapDonationToSerializedDonation(donation: Donation): SerializedDonation {\n    return {\n      d: donation.data,\n      da: donation.desiredAmount?.toString(10),\n      das: donation.desiredAsset ? this.mapDonationAssetToSerializedDonationAsset(donation.desiredAsset) : undefined,\n      su: donation.successUrl?.toString(),\n      cu: donation.cancelUrl?.toString(),\n      s: donation.signature ? this.mapDonationSignatureToSerializedDonationSignature(donation.signature) : undefined\n    };\n  }\n\n  protected mapDonationAssetToSerializedDonationAsset(donationAsset: DonationAsset): SerializedDonationAsset {\n    return {\n      a: donationAsset.address,\n      i: donationAsset.id !== null ? donationAsset.id : undefined\n    };\n  }\n\n  protected mapDonationSignatureToSerializedDonationSignature(donationSignature: DonationSignature): SerializedDonationSignature {\n    return {\n      k: donationSignature.signingPublicKey,\n      cl: donationSignature.client\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport type {\n  NonSerializedDonationSlice, Donation, DonationAsset, DonationSignature,\n  SerializedDonation, SerializedDonationSignature, SerializedDonationAsset,\n} from '../../models';\nimport { PaymentType } from '../../models/payment/paymentBase';\nimport { URL } from '../../native';\nimport { Base64Deserializer } from '../base64';\nimport { serializedDonationFieldTypes } from './serializedDonationFieldTypes';\n\nexport class DonationDeserializer {\n  protected static readonly serializedDonationBase64Deserializer = new Base64Deserializer<SerializedDonation>(\n    serializedDonationFieldTypes\n  );\n\n  deserialize(serializedDonationBase64: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    try {\n      const serializedDonation = DonationDeserializer.serializedDonationBase64Deserializer.deserialize(serializedDonationBase64);\n\n      return serializedDonation ? this.mapSerializedDonationToDonation(serializedDonation, nonSerializedDonationSlice) : null;\n    }\n    catch {\n      return null;\n    }\n  }\n\n  protected mapSerializedDonationToDonation(serializedDonation: SerializedDonation, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation {\n    return {\n      type: PaymentType.Donation,\n      data: serializedDonation.d,\n      desiredAmount: serializedDonation.da ? new BigNumber(serializedDonation.da) : undefined,\n      desiredAsset: serializedDonation.das ? this.mapSerializedDonationAssetToDonationAsset(serializedDonation.das) : undefined,\n      successUrl: serializedDonation.su ? new URL(serializedDonation.su) : undefined,\n      cancelUrl: serializedDonation.cu ? new URL(serializedDonation.cu) : undefined,\n      targetAddress: nonSerializedDonationSlice.targetAddress,\n      signature: serializedDonation.s ? this.mapSerializedDonationSignatureToDonationSignature(serializedDonation.s) : undefined\n    };\n  }\n\n  protected mapSerializedDonationAssetToDonationAsset(serializedDonationAsset: SerializedDonationAsset): DonationAsset {\n    return {\n      address: serializedDonationAsset.a,\n      id: serializedDonationAsset.i !== undefined ? serializedDonationAsset.i : null\n    };\n  }\n\n  protected mapSerializedDonationSignatureToDonationSignature(serializedDonationSignature: SerializedDonationSignature): DonationSignature {\n    return {\n      signingPublicKey: serializedDonationSignature.k,\n      client: serializedDonationSignature.cl\n    };\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { PaymentValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { PaymentDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport type { PaymentSignature } from '../signing';\nimport { PaymentBase, PaymentType } from './paymentBase';\n\nexport interface Payment extends PaymentBase {\n  readonly type: PaymentType.Payment;\n  readonly id: string;\n  readonly amount: BigNumber;\n  readonly asset?: PaymentAsset;\n  readonly created: Date;\n  readonly expired?: Date;\n  readonly data?: PaymentData;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n  readonly signature: PaymentSignature;\n}\n\nexport type UnsignedPayment = Omit<Payment, 'signature'>;\n\ninterface PaymentData {\n  readonly [fieldName: string]: unknown;\n}\n\nexport interface PaymentAsset {\n  readonly address: string;\n  readonly decimals: number;\n  readonly id: number | null;\n}\n\nexport class Payment extends StateModel {\n  static readonly defaultDeserializer: PaymentDeserializer = new PaymentDeserializer();\n  static readonly defaultValidator: PaymentValidator = new PaymentValidator();\n\n  static validate(payment: Payment) {\n    return Payment.defaultValidator.validate(payment);\n  }\n\n  static deserialize(serializedPayment: string): Payment | null {\n    return Payment.defaultDeserializer.deserialize(serializedPayment);\n  }\n}\n","import BigNumber from 'bignumber.js';\n\nimport { DonationValidator } from '../../helpers';\nimport { URL } from '../../native';\nimport { DonationDeserializer } from '../../serialization';\nimport { StateModel } from '../core';\nimport type { DonationSignature } from '../signing';\nimport { PaymentBase, PaymentType } from './paymentBase';\nimport { NonSerializedDonationSlice } from './serializedDonation';\n\nexport interface Donation extends PaymentBase {\n  readonly type: PaymentType.Donation;\n  readonly data?: DonationData;\n  readonly desiredAmount?: BigNumber;\n  readonly desiredAsset?: DonationAsset;\n  readonly successUrl?: URL;\n  readonly cancelUrl?: URL;\n  readonly signature?: DonationSignature;\n}\n\nexport type UnsignedDonation = Omit<Donation, 'signature'>;\n\ninterface DonationData {\n  readonly [fieldName: string]: unknown;\n}\n\nexport interface DonationAsset {\n  readonly address: string;\n  readonly id: number | null;\n}\n\nexport class Donation extends StateModel {\n  static readonly defaultDeserializer: DonationDeserializer = new DonationDeserializer();\n  static readonly defaultValidator: DonationValidator = new DonationValidator();\n\n  static validate(donation: Donation) {\n    return Donation.defaultValidator.validate(donation);\n  }\n\n  static deserialize(serializedDonation: string, nonSerializedDonationSlice: NonSerializedDonationSlice): Donation | null {\n    return Donation.defaultDeserializer.deserialize(serializedDonation, nonSerializedDonationSlice);\n  }\n}\n\n","import { text } from '../../utils';\n\nexport enum PaymentUrlType {\n  Base64 = 0\n}\n\nconst encodedPaymentUrlTypeMap = new Map<PaymentUrlType, string>(\n  Object.keys(PaymentUrlType)\n    .filter(value => !isNaN(+value))\n    .map(value => [+value, text.padStart(value, 2, '0')])\n);\n\nexport const getEncodedPaymentUrlType = (paymentUrlType: PaymentUrlType) => encodedPaymentUrlTypeMap.get(paymentUrlType) || '';\n","export enum ServiceOperationType {\n  Payment = 1,\n  Donation = 2,\n\n  All = Payment | Donation\n}\n","import { optimization } from '../../utils';\nimport { Network, networks } from '../blockchain/network';\nimport { ServiceOperationType } from './serviceOperationType';\nimport { ServiceSigningKey } from './serviceSigningKey';\n\nexport interface Service {\n  readonly name: string;\n  readonly links: readonly string[];\n  readonly description?: string;\n  readonly iconUrl?: string;\n  readonly version: number;\n  readonly metadata: string;\n\n  readonly contractAddress: string;\n  readonly network: Network;\n  readonly allowedTokens: {\n    readonly tez: boolean;\n    readonly assets: readonly string[];\n  }\n  readonly allowedOperationType: ServiceOperationType;\n\n  readonly owner: string;\n  readonly paused: boolean;\n  readonly deleted: boolean;\n  readonly signingKeys: ReadonlyMap<ServiceSigningKey['publicKey'], ServiceSigningKey>;\n}\n\nexport const emptyService: Service = {\n  name: '',\n  description: '',\n  links: optimization.emptyArray,\n  version: 0,\n  metadata: '',\n  contractAddress: '',\n  allowedTokens: {\n    tez: true,\n    assets: optimization.emptyArray\n  },\n  allowedOperationType: ServiceOperationType.Payment,\n  owner: '',\n  paused: false,\n  deleted: false,\n  network: networks.mainnet,\n  signingKeys: optimization.emptyMap\n};\n","export enum OperationType {\n  Payment = 1,\n  Donation = 2\n}\n","export enum OperationDirection {\n  Incoming = 0,\n  Outgoing = 1\n}\n","export enum OperationStatus {\n  Pending = 0,\n  Success = 1,\n  Cancelled = 2\n}\n","\nimport { converters } from '../../utils';\nimport { StateModel } from '../core';\nimport { Operation } from './operation';\nimport { OperationDirection } from './operationDirection';\nimport { OperationType } from './operationType';\n\nexport interface DonationOperation extends Operation {\n  readonly type: OperationType.Donation;\n  readonly direction: OperationDirection.Incoming;\n  readonly payload?: DonationOperationPayload;\n}\n\nexport interface DonationOperationPayload {\n  readonly value: { readonly [fieldName: string]: unknown; } | null;\n  readonly valueString: string;\n  readonly encodedValue: string;\n}\n\nexport class DonationOperation extends StateModel {\n  static parsePayload(encodedValue: string): DonationOperationPayload {\n    const valueString = converters.bytesToString(encodedValue);\n\n    let value: DonationOperationPayload['value'] = null;\n    try { value = JSON.parse(valueString); } catch { /**/ }\n\n    return {\n      value,\n      valueString,\n      encodedValue,\n    };\n  }\n}\n","import type { Payment } from '../../models';\n\nexport interface ClientSignPayload {\n  readonly successUrl?: string;\n  readonly cancelUrl?: string;\n  readonly data?: Payment['data'];\n}\n\n// 'Tezos Signed Message: '\nexport const tezosSignedMessagePrefixBytes = '54657a6f73205369676e6564204d6573736167653a20';\n// 'Payment Client Data: '\nexport const tezosPaymentsClientSignedMessagePrefixBytes = '5061796d656e7420436c69656e7420446174613a20';\n","import type { MichelsonType } from '@taquito/michel-codec';\n\nexport const contractPaymentInTezSignPayloadMichelsonType: MichelsonType = {\n  prim: 'pair',\n  args: [\n    {\n      prim: 'pair',\n      args: [\n        { prim: 'string' },\n        { prim: 'address' }\n      ]\n    },\n    { prim: 'mutez' }\n  ]\n};\n\nexport const contractPaymentInAssetSignPayloadMichelsonType: MichelsonType = {\n  prim: 'pair',\n  args: [\n    {\n      prim: 'pair',\n      args: [\n        {\n          prim: 'pair',\n          args: [\n            { prim: 'string' },\n            { prim: 'address' }\n          ]\n        },\n        {\n          prim: 'pair',\n          args: [\n            { prim: 'nat' },\n            { prim: 'address' }\n          ]\n        }\n      ]\n    },\n    {\n      prim: 'option',\n      args: [{ prim: 'nat' }]\n    }\n  ]\n};\n","\nimport { MichelsonType, packDataBytes } from '@taquito/michel-codec';\n\nimport type { UnsignedPayment, EncodedPaymentSignPayload } from '../../models';\nimport { converters, text } from '../../utils';\nimport { tezToMutez, tokensAmountToNat } from '../../utils/converters';\nimport { ClientSignPayload, tezosPaymentsClientSignedMessagePrefixBytes, tezosSignedMessagePrefixBytes } from './clientSignPayload';\nimport { contractPaymentInTezSignPayloadMichelsonType, contractPaymentInAssetSignPayloadMichelsonType } from './michelsonTypes';\n\nexport class PaymentSignPayloadEncoder {\n  protected static readonly contractPaymentInTezSignPayloadMichelsonType: MichelsonType = contractPaymentInTezSignPayloadMichelsonType;\n  protected static readonly contractPaymentInAssetSignPayloadMichelsonType: MichelsonType = contractPaymentInAssetSignPayloadMichelsonType;\n\n  encode(payment: UnsignedPayment): EncodedPaymentSignPayload {\n    return {\n      contractSignPayload: this.getContractSignPayload(payment),\n      clientSignPayload: this.getClientSignPayload(payment)\n    };\n  }\n\n  protected getContractSignPayload(payment: UnsignedPayment): EncodedPaymentSignPayload['contractSignPayload'] {\n    const signPayload = payment.asset\n      ? packDataBytes(\n        {\n          prim: 'Pair',\n          args: [\n            {\n              prim: 'Pair',\n              args: [\n                {\n                  prim: 'Pair',\n                  args: [\n                    { string: payment.id },\n                    { string: payment.targetAddress }\n                  ]\n                },\n                {\n                  prim: 'Pair',\n                  args: [\n                    { int: tokensAmountToNat(payment.amount, payment.asset.decimals).toString(10) },\n                    { string: payment.asset.address }\n                  ]\n                }\n              ]\n            },\n            payment.asset.id !== undefined && payment.asset.id !== null\n              ? { prim: 'Some', args: [{ int: payment.asset.id.toString() }] }\n              : { prim: 'None' }\n          ]\n        },\n        contractPaymentInAssetSignPayloadMichelsonType\n      )\n      : packDataBytes(\n        {\n          prim: 'Pair',\n          args: [\n            {\n              prim: 'Pair',\n              args: [\n                { string: payment.id },\n                { string: payment.targetAddress }\n              ]\n            },\n            { int: tezToMutez(payment.amount).toString(10) }\n          ]\n        },\n        contractPaymentInTezSignPayloadMichelsonType\n      );\n\n    return '0x' + signPayload.bytes;\n  }\n\n  protected getClientSignPayload(payment: UnsignedPayment): EncodedPaymentSignPayload['clientSignPayload'] {\n    const clientSignPayload: ClientSignPayload = {\n      data: payment.data,\n      successUrl: payment.successUrl?.href,\n      cancelUrl: payment.cancelUrl?.href\n    };\n    const serializedClientSignPayload = JSON.stringify(\n      clientSignPayload,\n      (_key, value) => value !== undefined && value !== null && value !== '' ? value : undefined\n    );\n    if (serializedClientSignPayload === '{}')\n      return null;\n\n    const serializedClientSignPayloadBytes = converters.stringToBytes(serializedClientSignPayload);\n    const signedMessageBytes = tezosSignedMessagePrefixBytes + tezosPaymentsClientSignedMessagePrefixBytes + serializedClientSignPayloadBytes;\n    const messageLength = text.padStart((signedMessageBytes.length / 2).toString(16), 8, '0');\n    const result = '0x0501' + messageLength + signedMessageBytes;\n\n    return result;\n  }\n}\n","import { b58cencode, prefix } from '@taquito/utils';\nimport { ec } from 'elliptic';\n\nimport { EncodedKeyPair, KeyPair, KeyPairGeneratorResult, KeyType } from '../../models';\nimport type { KeyPairGenerator } from './keyPairGenerator';\n\nexport class EllipticCurveKeyGenerator implements KeyPairGenerator {\n  protected static readonly curveInfo = {\n    secp256k1: {\n      name: 'secp256k1',\n      keyType: KeyType.Secp256k1,\n      privateKeyPrefix: prefix['spsk'],\n      publicKeyPrefix: prefix['sppk'],\n    },\n    p256: {\n      name: 'p256',\n      keyType: KeyType.P256,\n      privateKeyPrefix: prefix['p2sk'],\n      publicKeyPrefix: prefix['p2pk'],\n    },\n  } as const;\n\n  protected readonly ec: ec;\n  protected readonly curveInfo: typeof EllipticCurveKeyGenerator.curveInfo[keyof typeof EllipticCurveKeyGenerator.curveInfo];\n\n  constructor(curveName: keyof typeof EllipticCurveKeyGenerator.curveInfo) {\n    this.ec = new ec(curveName);\n    this.curveInfo = EllipticCurveKeyGenerator.curveInfo[curveName];\n  }\n\n  generate(): KeyPairGeneratorResult {\n    const keyPair = this.ec.genKeyPair();\n    console.log(keyPair);\n\n    const publicBasePoint = keyPair.getPublic();\n    const publicPointX = publicBasePoint.getX().toArray();\n    const publicPointY = publicBasePoint.getY().toArray();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const firstByte = publicPointY[publicPointY.length - 1]! % 2 ? 3 : 2;\n\n    const privateKey = new Uint8Array(keyPair.getPrivate().toArray());\n    const pad = new Array(32).fill(0);\n    const publicKey = new Uint8Array([firstByte].concat(pad.concat(publicPointX).slice(-32)));\n\n    const raw: KeyPair = {\n      keyType: KeyType.P256,\n      privateKey,\n      publicKey,\n    };\n\n    const encoded: EncodedKeyPair = {\n      keyType: this.curveInfo.keyType,\n      privateKey: b58cencode(privateKey, this.curveInfo.privateKeyPrefix),\n      publicKey: b58cencode(publicKey, this.curveInfo.publicKeyPrefix),\n    };\n\n    return {\n      raw,\n      encoded\n    };\n  }\n}\n","export const defaultConfig = {\n    links: {\n        tezosPayments: {\n            webSite: 'https://tezospayments.com',\n            paymentsApp: 'https://payment.tezospayments.com',\n            gitHub: 'https://github.com/fastwaterbear/tezospayments',\n            telegram: 'https://t.me/fastwaterbear',\n            twitter: 'https://twitter.com/fastwaterbear',\n            reddit: 'https://www.reddit.com/user/fastwaterbear'\n        }\n    },\n    tezos: {\n        defaultNetwork: 'hangzhounet',\n        networks: {\n            mainnet: {\n                title: 'Mainnet',\n                color: '83b300',\n                minimumSupportedServiceVersion: 3,\n                default: {\n                    rpc: 'ecadLabs',\n                    indexer: 'tzKT',\n                    explorer: 'tzKT'\n                },\n                rpcUrls: {\n                    ecadLabs: 'https://mainnet.api.tez.ie',\n                    smartPy: 'https://mainnet.smartpy.io'\n                },\n                indexerUrls: {\n                    tzKT: 'https://api.tzkt.io',\n                    betterCallDev: 'https://api.better-call.dev'\n                },\n                explorers: {\n                    tzKT: { baseUrl: 'https://tzkt.io', title: 'TzKT' },\n                    betterCallDev: { baseUrl: 'https://better-call.dev', title: 'Better Call Dev' },\n                    tzStats: { baseUrl: 'https://tzstats.com', title: 'TzStats' }\n                },\n                servicesFactoryContractAddress: 'Not implemented'\n            },\n            hangzhounet: {\n                title: 'Hangzhou Testnet',\n                color: '#b83280',\n                minimumSupportedServiceVersion: 1,\n                default: {\n                    rpc: 'smartPy',\n                    indexer: 'tzKT',\n                    explorer: 'tzKT'\n                },\n                rpcUrls: {\n                    ecadLabs: 'https://hangzhounet.api.tez.ie',\n                    smartPy: 'https://hangzhounet.smartpy.io'\n                },\n                indexerUrls: {\n                    tzKT: 'https://api.hangzhou2net.tzkt.io',\n                    betterCallDev: 'https://api.better-call.dev'\n                },\n                explorers: {\n                    tzKT: { baseUrl: 'https://hangzhou2net.tzkt.io', title: 'TzKT' },\n                    betterCallDev: { baseUrl: 'https://better-call.dev', title: 'Better Call Dev' },\n                    tzStats: { baseUrl: 'https://hangzhou.tzstats.com', title: 'TzStats' }\n                },\n                servicesFactoryContractAddress: 'KT1BLQ4tfy5iizuCSaR5D8sSDiQSemhvnAif'\n            }\n        }\n    }\n};\n//# sourceMappingURL=defaultConfig.js.map","export class BlockchainUrlExplorer {\n    constructor(network, baseUrl) {\n        this.network = network;\n        this.baseUrl = baseUrl;\n    }\n}\n//# sourceMappingURL=blockchainUrlExplorer.js.map","import { BlockchainUrlExplorer } from './blockchainUrlExplorer';\nexport class TzKTBlockchainUrlExplorer extends BlockchainUrlExplorer {\n    getEntityUrl(entity) {\n        return `${this.baseUrl}/${entity}`;\n    }\n    getOperationUrl(operationHash) {\n        return this.getEntityUrl(operationHash);\n    }\n    getAccountUrl(contractAddress) {\n        return this.getEntityUrl(contractAddress);\n    }\n}\n//# sourceMappingURL=tzKTBlockchainUrlExplorer.js.map","import { tezosInfo } from '@tezospayments/common';\nimport { BlockchainUrlExplorer } from './blockchainUrlExplorer';\nexport class BetterCallDevBlockchainUrlExplorer extends BlockchainUrlExplorer {\n    getEntityUrl(entity) {\n        return tezosInfo.addressPrefixes.some(prefix => entity.startsWith(prefix))\n            ? this.getAccountUrl(entity)\n            : this.getOperationUrl(entity);\n    }\n    getOperationUrl(operationHash) {\n        return `${this.baseUrl}/${this.network.name}/opg/${operationHash}/contents`;\n    }\n    getAccountUrl(contractAddress) {\n        return `${this.baseUrl}/${this.network.name}/${contractAddress}`;\n    }\n}\n//# sourceMappingURL=betterCallDevUrlBlockchainExplorer.js.map","import { BlockchainUrlExplorer } from './blockchainUrlExplorer';\nexport class TzStatsBlockchainUrlExplorer extends BlockchainUrlExplorer {\n    getEntityUrl(entity) {\n        return `${this.baseUrl}/${entity}`;\n    }\n    getOperationUrl(operationHash) {\n        return this.getEntityUrl(operationHash);\n    }\n    getAccountUrl(contractAddress) {\n        return this.getEntityUrl(contractAddress);\n    }\n}\n//# sourceMappingURL=tzStatsBlockchainUrlExplorer.js.map","import BigNumber from 'bignumber.js';\nimport { converters, DonationOperation, guards, OperationDirection, OperationStatus, OperationType, optimization, tezosMeta, tokenWhitelistMap } from '@tezospayments/common';\nexport class TzKTDataProvider {\n    constructor(network, baseUrl, servicesFactoryContractAddress, minimumSupportedServiceVersion) {\n        this.network = network;\n        this.baseUrl = baseUrl;\n        this.servicesFactoryContractAddress = servicesFactoryContractAddress;\n        this.minimumSupportedServiceVersion = minimumSupportedServiceVersion;\n        this.tokenWhiteList = tokenWhitelistMap.get(this.network) || optimization.emptyMap;\n    }\n    async getService(serviceContractAddress) {\n        const response = await fetch(`${this.baseUrl}/v1/contracts/${serviceContractAddress}/storage`);\n        const serviceDto = await response.json();\n        if ('version' in serviceDto && +serviceDto.version < this.minimumSupportedServiceVersion) {\n            // Only for Dev\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return null;\n        }\n        const result = this.mapServiceDtoToService(serviceDto, serviceContractAddress, this.network);\n        if (!result)\n            throw new Error('Service not found');\n        return result;\n    }\n    async getServices(ownerAddress) {\n        const keysUrl = `${this.baseUrl}/v1/contracts/${this.servicesFactoryContractAddress}/bigmaps/services/keys`;\n        const allKeysResponse = await fetch(keysUrl);\n        const allKeys = await allKeysResponse.json();\n        if (allKeys.every(k => k.key !== ownerAddress)) {\n            return [];\n        }\n        const response = await fetch(`${keysUrl}/${ownerAddress}`);\n        const keyValue = await response.json();\n        const contractAddresses = keyValue.value;\n        return (await Promise.all(contractAddresses.map(contractAddress => this.getService(contractAddress)))).filter(Boolean);\n    }\n    async getOperations(serviceContractAddress) {\n        const url = new URL(`v1/accounts/${serviceContractAddress}/operations`, this.baseUrl);\n        url.searchParams.set('type', 'transaction');\n        url.searchParams.set('entrypoint.in', 'send_payment,send_donation');\n        const response = await fetch(url.href);\n        const operations = await response.json();\n        return operations\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            .map(operation => this.mapOperationDtoToServiceOperation(operation))\n            .filter(Boolean);\n    }\n    mapServiceDtoToService(serviceDto, serviceAddress, network) {\n        const metadataJson = converters.bytesToObject(serviceDto.metadata);\n        return (metadataJson && typeof metadataJson.name === 'string'\n            && (guards.isArray(metadataJson.links) || metadataJson.links === undefined)\n            && (typeof metadataJson.description === 'string' || metadataJson.description === undefined)\n            && (typeof metadataJson.iconUrl === 'string' || metadataJson.iconUrl === undefined))\n            ? {\n                name: metadataJson.name,\n                links: metadataJson.links || optimization.emptyArray,\n                description: metadataJson.description,\n                iconUrl: metadataJson.iconUrl,\n                version: +serviceDto.version,\n                metadata: serviceDto.metadata,\n                contractAddress: serviceAddress,\n                network,\n                allowedTokens: {\n                    tez: serviceDto.allowed_tokens.tez,\n                    assets: serviceDto.allowed_tokens.assets\n                },\n                allowedOperationType: +serviceDto.allowed_operation_type,\n                owner: serviceDto.owner,\n                paused: serviceDto.paused,\n                deleted: serviceDto.deleted,\n                signingKeys: this.mapSigningKeyDtosToSigningKeys(serviceDto.signing_keys)\n            }\n            : null;\n    }\n    mapSigningKeyDtosToSigningKeys(signingKeyDtos) {\n        return Object.keys(signingKeyDtos)\n            .reduce((map, signingKey) => { var _a; return map.set(signingKey, { publicKey: signingKey, name: ((_a = signingKeyDtos[signingKey]) === null || _a === void 0 ? void 0 : _a.name) || undefined }); }, new Map());\n    }\n    mapOperationDtoToServiceOperation(operationDto) {\n        var _a, _b, _c;\n        const decimals = operationDto.parameter.value.asset_value\n            ? ((_b = (_a = this.tokenWhiteList.get(operationDto.parameter.value.asset_value.token_address)) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.decimals) || 0\n            : tezosMeta.decimals;\n        const amount = operationDto.parameter.value.asset_value ? operationDto.parameter.value.asset_value.value : operationDto.amount.toString();\n        const operationType = operationDto.parameter.entrypoint === 'send_payment' ? OperationType.Payment : OperationType.Donation;\n        const operationBase = {\n            hash: operationDto.hash,\n            type: operationType,\n            direction: OperationDirection.Incoming,\n            status: operationDto.status === 'applied' ? OperationStatus.Success : OperationStatus.Cancelled,\n            amount: converters.numberToTokensAmount(new BigNumber(amount), decimals),\n            asset: (_c = operationDto.parameter.value.asset_value) === null || _c === void 0 ? void 0 : _c.token_address,\n            timestamp: operationDto.timestamp,\n            date: new Date(operationDto.timestamp),\n            sender: operationDto.sender.address,\n            target: operationDto.target.address,\n        };\n        switch (operationBase.type) {\n            case OperationType.Payment: {\n                const paymentOperation = operationBase;\n                paymentOperation.paymentId = operationDto.parameter.value.id;\n                return paymentOperation;\n            }\n            case OperationType.Donation: {\n                const donationOperation = operationBase;\n                donationOperation.payload = DonationOperation.parsePayload(operationDto.parameter.value.payload);\n                return donationOperation;\n            }\n            default:\n                return null;\n        }\n    }\n}\n//# sourceMappingURL=tzKTDataProvider.js.map","import BigNumber from 'bignumber.js';\nimport { converters, DonationOperation, guards, OperationDirection, OperationStatus, OperationType, optimization, tezosMeta, tokenWhitelistMap } from '@tezospayments/common';\nexport class BetterCallDevDataProvider {\n    constructor(network, baseUrl, servicesFactoryContractAddress, minimumSupportedServiceVersion) {\n        this.network = network;\n        this.baseUrl = baseUrl;\n        this.servicesFactoryContractAddress = servicesFactoryContractAddress;\n        this.minimumSupportedServiceVersion = minimumSupportedServiceVersion;\n        this.tokenWhiteList = tokenWhitelistMap.get(this.network) || optimization.emptyMap;\n    }\n    async getService(serviceContractAddress) {\n        var _a;\n        const response = await fetch(`${this.baseUrl}/v1/contract/${this.network.name}/${serviceContractAddress}/storage`);\n        const serviceDto = await response.json();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((+((_a = serviceDto === null || serviceDto === void 0 ? void 0 : serviceDto[0].children) === null || _a === void 0 ? void 0 : _a[serviceDto[0].children.length - 1]).value < this.minimumSupportedServiceVersion)) {\n            // Only for Dev\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return null;\n        }\n        const result = this.mapServiceDtoToService(serviceDto, serviceContractAddress, this.network);\n        if (!result)\n            throw new Error('Service not found');\n        return result;\n    }\n    async getServices(ownerAddress) {\n        const servicesFactoryDto = await this.getServicesFactoryDto();\n        const servicesBigMapId = servicesFactoryDto[0].children[4].value;\n        const response = await fetch(`${this.baseUrl}/v1/bigmap/${this.network.name}/${servicesBigMapId}/keys`);\n        const servicesBigMapDto = await response.json();\n        const servicesSet = servicesBigMapDto.find(pair => pair.data.key_string === ownerAddress);\n        if (!servicesSet)\n            return optimization.emptyArray;\n        const contractAddresses = servicesSet.data.value.children.map(serviceAddressDto => serviceAddressDto.value);\n        return (await Promise.all(contractAddresses.map(contractAddress => this.getService(contractAddress)))).filter(Boolean);\n    }\n    async getOperations(serviceContractAddress) {\n        const url = new URL(`v1/contract/${this.network.name}/${serviceContractAddress}/operations`, this.baseUrl);\n        url.searchParams.set('entrypoints', 'send_payment,send_donation');\n        const response = await fetch(url.href);\n        const operations = (await response.json()).operations;\n        return operations\n            .filter(operation => !operation.internal)\n            .filter(operation => operation.entrypoint === 'send_payment' || operation.entrypoint === 'send_donation')\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            .map(operation => operation.entrypoint === 'send_payment'\n            ? this.mapSendPaymentOperationToServiceOperation(operation)\n            : this.mapSendDonationOperationToServiceOperation(operation))\n            .filter(Boolean);\n    }\n    async getServicesFactoryDto() {\n        const response = await fetch(`${this.baseUrl}/v1/contract/${this.network.name}/${this.servicesFactoryContractAddress}/storage`);\n        return response.json();\n    }\n    mapServiceDtoToService(serviceDto, serviceAddress, network) {\n        let metadataJson;\n        try {\n            metadataJson = JSON.parse(serviceDto[0].children[4].value);\n        }\n        catch {\n            return null;\n        }\n        return (metadataJson && typeof metadataJson.name === 'string'\n            && (guards.isArray(metadataJson.links) || metadataJson.links === undefined)\n            && (typeof metadataJson.description === 'string' || metadataJson.description === undefined)\n            && (typeof metadataJson.iconUrl === 'string' || metadataJson.iconUrl === undefined))\n            ? {\n                name: metadataJson.name,\n                links: metadataJson.links || optimization.emptyArray,\n                description: metadataJson.description,\n                iconUrl: metadataJson.iconUrl,\n                version: +serviceDto[0].children[8].value,\n                metadata: converters.stringToBytes(serviceDto[0].children[4].value),\n                contractAddress: serviceAddress,\n                network,\n                allowedTokens: {\n                    tez: serviceDto[0].children[1].children[0].value,\n                    assets: optimization.emptyArray\n                },\n                allowedOperationType: +serviceDto[0].children[0].value,\n                owner: serviceDto[0].children[5].value,\n                paused: serviceDto[0].children[6].value,\n                deleted: serviceDto[0].children[3].value,\n                signingKeys: serviceDto[0].children[7].children\n                    ? this.mapSigningKeyDtosToSigningKeys(serviceDto[0].children[7].children)\n                    : new Map()\n            }\n            : null;\n    }\n    mapSigningKeyDtosToSigningKeys(signingKeyDtos) {\n        return signingKeyDtos.reduce((map, signingKeyDto) => {\n            const publicKey = signingKeyDto.children[0].value;\n            const rawName = signingKeyDto.children[1].value;\n            return map.set(publicKey, { publicKey, name: rawName !== 'None' ? rawName : undefined });\n        }, new Map());\n    }\n    mapSendPaymentOperationToServiceOperation(operationDto) {\n        var _a, _b;\n        const assetInfo = operationDto.parameters[0].children[1].children;\n        const assetAddress = assetInfo === null || assetInfo === void 0 ? void 0 : assetInfo[0].value;\n        const assetValue = assetInfo === null || assetInfo === void 0 ? void 0 : assetInfo[2].value;\n        const decimals = assetAddress\n            ? ((_b = (_a = this.tokenWhiteList.get(assetAddress)) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.decimals) || 0\n            : tezosMeta.decimals;\n        const amount = assetValue || (operationDto.amount || 0).toString();\n        const paymentOperation = {\n            hash: operationDto.hash,\n            type: OperationType.Payment,\n            direction: OperationDirection.Incoming,\n            status: operationDto.status === 'applied' ? OperationStatus.Success : OperationStatus.Cancelled,\n            paymentId: operationDto.parameters[0].children[0].value,\n            amount: converters.numberToTokensAmount(new BigNumber(amount), decimals),\n            asset: assetAddress,\n            timestamp: operationDto.timestamp,\n            date: new Date(operationDto.timestamp),\n            sender: operationDto.source,\n            target: operationDto.destination,\n        };\n        return paymentOperation;\n    }\n    mapSendDonationOperationToServiceOperation(operationDto) {\n        var _a, _b;\n        const assetInfo = operationDto.parameters[0].children[0].children;\n        const assetAddress = assetInfo === null || assetInfo === void 0 ? void 0 : assetInfo[0].value;\n        const assetValue = assetInfo === null || assetInfo === void 0 ? void 0 : assetInfo[2].value;\n        const decimals = assetAddress\n            ? ((_b = (_a = this.tokenWhiteList.get(assetAddress)) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.decimals) || 0\n            : tezosMeta.decimals;\n        const amount = assetValue || (operationDto.amount || 0).toString();\n        const donationOperation = {\n            hash: operationDto.hash,\n            type: OperationType.Donation,\n            direction: OperationDirection.Incoming,\n            status: operationDto.status === 'applied' ? OperationStatus.Success : OperationStatus.Cancelled,\n            amount: converters.numberToTokensAmount(new BigNumber(amount), decimals),\n            asset: assetAddress,\n            timestamp: operationDto.timestamp,\n            date: new Date(operationDto.timestamp),\n            sender: operationDto.source,\n            target: operationDto.destination,\n            payload: DonationOperation.parsePayload(converters.stringToBytes(operationDto.parameters[0].children[1].value))\n        };\n        return donationOperation;\n    }\n}\n//# sourceMappingURL=betterCallDevDataProvider.js.map","import { NetworkType } from '@airgap/beacon-sdk';\nimport { networks } from '@tezospayments/common';\nexport const beaconNetworkToNetwork = networkType => {\n    switch (networkType) {\n        case NetworkType.HANGZHOUNET:\n            return networks.hangzhounet;\n        default:\n            throw new Error('Not Supported network type');\n    }\n};\nexport const networkToBeaconNetwork = network => {\n    switch (network) {\n        case networks.hangzhounet:\n            return NetworkType.HANGZHOUNET;\n        default:\n            throw new Error('Not Supported network type');\n    }\n};\n//# sourceMappingURL=converters.js.map","import { defaultConfig } from '@tezospayments/react-web-core';\n\nimport type { AppConfig } from './appConfig';\n\nconst commitShortSha = process.env.REACT_APP_COMMIT_SHORT_SHA || '';\n\nexport const config: AppConfig = {\n  ...defaultConfig,\n  app: {\n    publicUrl: process.env.PUBLIC_URL || '/',\n    name: 'Tezos Payments',\n    title: 'Tezos Payments',\n    version: {\n      name: 'Dev Version',\n      link: 'https://github.com/fastwaterbear/tezospayments/tree/master'\n    },\n    buildInfo: {\n      commitShortSha,\n      link: `https://github.com/fastwaterbear/tezospayments/tree/${commitShortSha}`\n    }\n  },\n  links: {\n    ...defaultConfig.links,\n    tezos: 'https://tezos.com/'\n  }\n};\n","export enum PaymentStatus {\n  Initial = 0,\n  UserProcessing = 1,\n  NetworkProcessing = 2,\n  Succeeded = 3,\n  Canceled = 4,\n  Error = 5,\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { Service, Donation, Payment, PaymentType } from '@tezospayments/common';\n\nimport { NetworkDonation, NetworkPayment, PaymentInfo, PaymentStatus } from '../../models/payment';\nimport { AppThunkAPI } from '../thunk';\n\ninterface CurrentPaymentState {\n  readonly status: PaymentStatus;\n  readonly payment: Payment | Donation;\n  readonly networkPayment: NetworkPayment | NetworkDonation | null;\n  readonly service: Service;\n  readonly operation?: OperationState;\n}\n\ninterface OperationState {\n  readonly hash: string;\n  readonly blockHash: string | undefined;\n  readonly confirmationCount: number;\n}\n\nconst namespace = 'currentPayment';\nconst initialState: CurrentPaymentState | null = null;\nconst checkSendPaymentCondition = (\n  currentPaymentState: CurrentPaymentState | null\n): currentPaymentState is CurrentPaymentState & { readonly status: PaymentStatus.Initial } => {\n  return currentPaymentState?.status === PaymentStatus.Initial;\n};\n\nexport const loadCurrentPayment = createAsyncThunk<PaymentInfo, void, AppThunkAPI>(\n  `${namespace}/loadCurrentPay`,\n  async (_, { extra: app }) => {\n    return app.services.localPaymentService.getCurrentPaymentInfo();\n  },\n);\n\nexport const pay = createAsyncThunk<boolean, NetworkPayment, AppThunkAPI>(\n  `${namespace}/pay`,\n  async (networkPayment, { extra: app }) => {\n    return app.services.localPaymentService.pay(networkPayment);\n  },\n  {\n    condition: (_payload, { getState }) => {\n      const currentPaymentState = getState().currentPaymentState;\n\n      return checkSendPaymentCondition(currentPaymentState) && currentPaymentState.payment.type === PaymentType.Payment;\n    },\n    dispatchConditionRejection: true\n  }\n);\n\nexport const donate = createAsyncThunk<boolean, NetworkDonation, AppThunkAPI>(\n  `${namespace}/donate`,\n  async (networkDonation, { extra: app }) => {\n    return app.services.localPaymentService.donate(networkDonation);\n  },\n  {\n    condition: (_payload, { getState }) => {\n      const currentPaymentState = getState().currentPaymentState;\n\n      return checkSendPaymentCondition(currentPaymentState) && currentPaymentState.payment.type === PaymentType.Donation;\n    },\n    dispatchConditionRejection: true\n  }\n);\n\nexport const currentPaymentSlice = createSlice({\n  name: namespace,\n  initialState: (initialState as CurrentPaymentState | null),\n  reducers: {\n    confirmPayment: (state, action: PayloadAction<OperationState>) => {\n      return state\n        ? {\n          status: PaymentStatus.NetworkProcessing,\n          payment: state.payment,\n          networkPayment: state.networkPayment,\n          service: state.service,\n          operation: action.payload,\n        }\n        : null;\n    },\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(loadCurrentPayment.fulfilled, (_state, action) => {\n        return {\n          status: PaymentStatus.Initial,\n          payment: action.payload.payment,\n          networkPayment: null,\n          service: action.payload.service\n        };\n      });\n\n    for (const action of [pay, donate]) {\n      builder\n        .addCase(action.pending, (state, action) => {\n          return state\n            ? {\n              status: PaymentStatus.UserProcessing,\n              payment: state.payment,\n              networkPayment: action.meta.arg,\n              service: state.service\n            }\n            : null;\n        })\n        .addCase(action.fulfilled, (state, action) => {\n          return state\n            ? {\n              status: action.payload ? PaymentStatus.Succeeded : PaymentStatus.Initial,\n              payment: state.payment,\n              networkPayment: state.networkPayment,\n              service: state.service,\n              operation: action.payload ? state.operation : undefined,\n            }\n            : null;\n        })\n        .addCase(action.rejected, (state, _action) => {\n          return state\n            ? {\n              status: PaymentStatus.Initial,\n              payment: state.payment,\n              networkPayment: state.networkPayment,\n              service: state.service,\n              operation: undefined\n            }\n            : null;\n        });\n    }\n  }\n});\n\nexport const { confirmPayment } = currentPaymentSlice.actions;\n","export const errors = {\n  invalidUrl: 'Invalid URL',\n  invalidPayment: 'Invalid payment',\n  invalidDonation: 'Invalid donation'\n} as const;\n\nexport type LocalPaymentServiceError = string;\n","import { Payment, Donation } from '@tezospayments/common';\n\nimport { errors } from '../errors';\nimport { RawPaymentInfo } from '../urlRawPaymentInfoParser';\nimport { PaymentProvider } from './paymentProvider';\n\nexport class SerializedPaymentBase64Provider implements PaymentProvider {\n  isMatch(_rawPaymentInfo: RawPaymentInfo): boolean {\n    return true;\n  }\n\n  getPayment(rawPaymentInfo: RawPaymentInfo & { readonly operationType: 'payment'; }): Payment | Promise<Payment> {\n    const serializedPayment = rawPaymentInfo.serializedPayment.substr(2);\n    const payment = Payment.deserialize(serializedPayment);\n\n    if (!payment || Payment.validate(payment))\n      throw new Error(errors.invalidPayment);\n\n    return payment;\n  }\n\n  getDonation(rawPaymentInfo: RawPaymentInfo & { readonly operationType: 'donation'; }): Donation | Promise<Donation> {\n    const serializedDonation = rawPaymentInfo.serializedDonation?.substr(2) || '';\n    const donation = Donation.deserialize(\n      serializedDonation,\n      {\n        targetAddress: rawPaymentInfo.targetAddress\n      }\n    );\n\n    if (!donation || Donation.validate(donation))\n      throw new Error(errors.invalidDonation);\n\n    return donation;\n  }\n}\n","import { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit, TransactionWalletOperation, Wallet, WalletOperation } from '@taquito/taquito';\nimport BigNumber from 'bignumber.js';\n\nimport { Network, tokenWhitelistMap, TokenFA2, TokenFA12, converters } from '@tezospayments/common';\nimport type { Fa12Contract, Fa20Contract, TezosPaymentsServiceContract } from '@tezospayments/react-web-core';\n\nimport type { NetworkPayment } from '../../../models/payment';\n\nexport class PaymentSender {\n  constructor(\n    protected readonly network: Network,\n    protected readonly tezosToolkit: TezosToolkit,\n    protected readonly tezosWallet: BeaconWallet\n  ) {\n  }\n\n  async send(payment: NetworkPayment): Promise<WalletOperation> {\n    const contract = await this.tezosToolkit.wallet.at<TezosPaymentsServiceContract<Wallet>>(payment.targetAddress);\n\n    if (!payment.asset)\n      return this.sendNativeToken(contract, payment);\n\n    const token = tokenWhitelistMap.get(this.network)?.get(payment.asset.address);\n    if (!token || !token.metadata)\n      throw new Error('Token not found');\n\n    const tokenAmount = converters.tokensAmountToNat(payment.amount, token.metadata.decimals);\n\n    return token.type === 'fa1.2'\n      ? this.sendFa12Token(contract, payment, tokenAmount, token)\n      : this.sendFa20Token(contract, payment, tokenAmount, token);\n  }\n\n  private sendNativeToken(\n    contract: TezosPaymentsServiceContract<Wallet>,\n    payment: NetworkPayment\n  ): Promise<TransactionWalletOperation> {\n    return contract.methodsObject.send_payment({\n      id: payment.id,\n      signature: payment.signature\n    }).send({ amount: payment.amount });\n  }\n\n  private async sendFa12Token(\n    contract: TezosPaymentsServiceContract<Wallet>,\n    payment: Omit<NetworkPayment, 'amount'>,\n    tokenAmount: BigNumber,\n    token: TokenFA12,\n  ): Promise<WalletOperation> {\n    const tokenContract = await this.tezosToolkit.wallet.at<Fa12Contract<Wallet>>(token.contractAddress);\n\n    return await this.tezosToolkit.wallet.batch()\n      .withContractCall(tokenContract.methods.approve(contract.address, tokenAmount))\n      .withContractCall(\n        contract.methodsObject.send_payment({\n          id: payment.id,\n          signature: payment.signature,\n          asset_value: {\n            token_address: token.contractAddress,\n            token_id: null,\n            value: tokenAmount.toString(10)\n          }\n        })\n      ).send();\n  }\n\n  private async sendFa20Token(\n    contract: TezosPaymentsServiceContract<Wallet>,\n    payment: Omit<NetworkPayment, 'amount'>,\n    tokenAmount: BigNumber,\n    token: TokenFA2\n  ): Promise<WalletOperation> {\n    const tokenContract = await this.tezosToolkit.wallet.at<Fa20Contract<Wallet>>(token.contractAddress);\n    const userAddress = await this.tezosToolkit.wallet.pkh();\n\n    return await this.tezosToolkit.wallet.batch()\n      .withContractCall(tokenContract.methods.update_operators([{\n        add_operator: {\n          owner: userAddress,\n          operator: contract.address,\n          token_id: token.id\n        }\n      }]))\n      .withContractCall(\n        contract.methodsObject.send_payment({\n          id: payment.id,\n          signature: payment.signature,\n          asset_value: {\n            token_address: token.contractAddress,\n            token_id: token.id,\n            value: tokenAmount.toString(10)\n          }\n        })\n      )\n      .withContractCall(tokenContract.methods.update_operators([{\n        remove_operator: {\n          owner: userAddress,\n          operator: contract.address,\n          token_id: token.id\n        }\n      }]))\n      .send();\n  }\n}\n","import { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit, TransactionWalletOperation, Wallet, WalletOperation } from '@taquito/taquito';\nimport BigNumber from 'bignumber.js';\n\nimport { Network, tokenWhitelistMap, TokenFA2, TokenFA12, converters } from '@tezospayments/common';\nimport type { Fa12Contract, Fa20Contract, TezosPaymentsServiceContract } from '@tezospayments/react-web-core';\n\nimport type { NetworkDonation } from '../../../models/payment';\n\nexport class DonationSender {\n  constructor(\n    protected readonly network: Network,\n    protected readonly tezosToolkit: TezosToolkit,\n    protected readonly tezosWallet: BeaconWallet\n  ) {\n  }\n\n  async send(donation: NetworkDonation): Promise<WalletOperation> {\n    const contract = await this.tezosToolkit.wallet.at<TezosPaymentsServiceContract<Wallet>>(donation.targetAddress);\n    const encodedPayload = donation.payload ? converters.objectToBytes(donation.payload) : '';\n\n    if (!donation.assetAddress)\n      return this.sendNativeToken(contract, donation, encodedPayload);\n\n    const token = tokenWhitelistMap.get(this.network)?.get(donation.assetAddress);\n    if (!token || !token.metadata)\n      throw new Error('Token not found');\n\n    const tokenAmount = converters.tokensAmountToNat(donation.amount, token.metadata.decimals);\n\n    return token.type === 'fa1.2'\n      ? this.sendFa12Token(contract, tokenAmount, token, encodedPayload)\n      : this.sendFa20Token(contract, tokenAmount, token, encodedPayload);\n  }\n\n  private sendNativeToken(\n    contract: TezosPaymentsServiceContract<Wallet>,\n    donation: Omit<NetworkDonation, 'payload'>,\n    encodedPayload: string\n  ): Promise<TransactionWalletOperation> {\n    return contract.methodsObject.send_donation({\n      payload: encodedPayload\n    }).send({ amount: donation.amount });\n  }\n\n  private async sendFa12Token(\n    contract: TezosPaymentsServiceContract<Wallet>,\n    tokenAmount: BigNumber,\n    token: TokenFA12,\n    encodedPayload: string,\n  ): Promise<WalletOperation> {\n    const tokenContract = await this.tezosToolkit.wallet.at<Fa12Contract<Wallet>>(token.contractAddress);\n\n    return await this.tezosToolkit.wallet.batch()\n      .withContractCall(tokenContract.methods.approve(contract.address, tokenAmount))\n      .withContractCall(\n        contract.methodsObject.send_donation({\n          payload: encodedPayload,\n          asset_value: {\n            token_address: token.contractAddress,\n            token_id: null,\n            value: tokenAmount.toString(10)\n          }\n        })\n      ).send();\n  }\n\n  private async sendFa20Token(\n    contract: TezosPaymentsServiceContract<Wallet>,\n    tokenAmount: BigNumber,\n    token: TokenFA2,\n    encodedPayload: string,\n  ): Promise<WalletOperation> {\n    const tokenContract = await this.tezosToolkit.wallet.at<Fa20Contract<Wallet>>(token.contractAddress);\n    const userAddress = await this.tezosToolkit.wallet.pkh();\n\n    return await this.tezosToolkit.wallet.batch()\n      .withContractCall(tokenContract.methods.update_operators([{\n        add_operator: {\n          owner: userAddress,\n          operator: contract.address,\n          token_id: token.id\n        }\n      }]))\n      .withContractCall(\n        contract.methodsObject.send_donation({\n          payload: encodedPayload,\n          asset_value: {\n            token_address: token.contractAddress,\n            token_id: token.id,\n            value: tokenAmount.toString(10)\n          }\n        })\n      )\n      .withContractCall(tokenContract.methods.update_operators([{\n        remove_operator: {\n          owner: userAddress,\n          operator: contract.address,\n          token_id: token.id\n        }\n      }]))\n      .send();\n  }\n}\n","import { errors } from './errors';\n\nexport type RawPaymentInfo =\n  | {\n    readonly operationType: 'payment';\n    readonly serializedPayment: string;\n  }\n  | {\n    readonly targetAddress: string;\n    readonly operationType: 'donation';\n    readonly serializedDonation?: string;\n  };\n\nexport class UrlRawPaymentInfoParser {\n  parse(url: URL | Location): RawPaymentInfo | string {\n    const isPaymentType = url.pathname === '/';\n    const serializedPaymentOrDonation: string | undefined = url.hash.slice(1);\n    if (!serializedPaymentOrDonation && isPaymentType)\n      return errors.invalidUrl;\n\n    if (isPaymentType) {\n      return {\n        operationType: 'payment',\n        serializedPayment: serializedPaymentOrDonation\n      };\n    }\n\n    const targetDonationAddress = this.parseTargetDonationAddress(url.pathname);\n    if (!targetDonationAddress)\n      return errors.invalidUrl;\n\n    return {\n      operationType: 'donation',\n      targetAddress: targetDonationAddress,\n      serializedDonation: serializedPaymentOrDonation,\n    };\n  }\n\n  private parseTargetDonationAddress(pathname: string): string | null {\n    const segments = pathname.split('/').filter(Boolean);\n\n    return (segments.length === 2 && segments[0] && segments[1] === 'donation')\n      ? segments[0]\n      : null;\n  }\n}\n","import { RequestPermissionInput, AbortedBeaconError } from '@airgap/beacon-sdk';\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit, WalletOperation } from '@taquito/taquito';\n\nimport { Donation, Payment, Network, memoize } from '@tezospayments/common';\nimport { converters, ServicesProvider } from '@tezospayments/react-web-core';\n\nimport { NetworkDonation, NetworkPayment } from '../../models/payment';\nimport { PaymentInfo } from '../../models/payment/paymentInfo';\nimport { AppStore } from '../../store';\nimport { confirmPayment } from '../../store/currentPayment';\nimport { errors } from './errors';\nimport { PaymentProvider, SerializedPaymentBase64Provider } from './paymentProviders';\nimport { DonationSender, PaymentSender } from './sender';\nimport { RawPaymentInfo, UrlRawPaymentInfoParser } from './urlRawPaymentInfoParser';\n\ninterface LocalPaymentServiceOptions {\n  readonly store: AppStore;\n  readonly network: Network;\n  readonly tezosToolkit: TezosToolkit;\n  readonly tezosWallet: BeaconWallet;\n  readonly servicesProvider: ServicesProvider;\n}\n\nexport class LocalPaymentService {\n  protected readonly network: Network;\n  protected readonly store: AppStore;\n  protected readonly tezosToolkit: TezosToolkit;\n  protected readonly tezosWallet: BeaconWallet;\n  protected readonly servicesProvider: ServicesProvider;\n  protected readonly urlRawPaymentInfoParser = new UrlRawPaymentInfoParser();\n  protected readonly paymentProviders: readonly PaymentProvider[] = [\n    new SerializedPaymentBase64Provider()\n  ];\n  protected readonly paymentSender;\n  protected readonly donationSender;\n\n  constructor(options: LocalPaymentServiceOptions) {\n    this.network = options.network;\n    this.store = options.store;\n    this.tezosToolkit = options.tezosToolkit;\n    this.tezosWallet = options.tezosWallet;\n    this.servicesProvider = options.servicesProvider;\n\n    this.paymentSender = new PaymentSender(this.network, this.tezosToolkit, this.tezosWallet);\n    this.donationSender = new DonationSender(this.network, this.tezosToolkit, this.tezosWallet);\n  }\n\n  async getCurrentPaymentInfo(): Promise<PaymentInfo> {\n    const payment = await this.getCurrentPayment();\n    const service = await this.servicesProvider.getService(payment.targetAddress);\n\n    return {\n      payment,\n      service\n    };\n  }\n\n  async getCurrentPayment(): Promise<Payment | Donation> {\n    const currentRawPaymentInfo = this.parseRawPaymentInfo(window.location);\n    const paymentProvider = this.getPaymentProvider(currentRawPaymentInfo);\n\n    return currentRawPaymentInfo.operationType === 'payment'\n      ? paymentProvider.getPayment(currentRawPaymentInfo)\n      : paymentProvider.getDonation(currentRawPaymentInfo);\n  }\n\n  async pay(payment: NetworkPayment): Promise<boolean> {\n    return this.send(() => this.paymentSender.send(payment));\n  }\n\n  async donate(donation: NetworkDonation): Promise<boolean> {\n    return this.send(() => this.donationSender.send(donation));\n  }\n\n  protected parseRawPaymentInfo = memoize(\n    (url: URL | Location): RawPaymentInfo => {\n      const parserResult = this.urlRawPaymentInfoParser.parse(url);\n\n      if (typeof parserResult === 'string')\n        throw new Error(parserResult);\n\n      return parserResult;\n    }\n  );\n\n  protected async send(getSendOperation: () => Promise<WalletOperation>): Promise<boolean> {\n    try {\n      await this.tezosWallet.client.clearActiveAccount();\n      const canceled = await this.requestPermissions({ network: { type: converters.networkToBeaconNetwork(this.network) } });\n      if (canceled)\n        return false;\n\n      const operation = await getSendOperation();\n\n      await this.waitConfirmation(operation);\n\n      return true;\n    } catch (error: unknown) {\n      if (error instanceof AbortedBeaconError)\n        return false;\n\n      throw error;\n    }\n  }\n\n  protected requestPermissions(request?: RequestPermissionInput) {\n    const beaconAlertWrapperObserver = this.getBeaconAlertWrapperObserver();\n\n    return Promise.race(\n      [\n        this.tezosWallet.requestPermissions(request),\n        beaconAlertWrapperObserver.observe()\n      ])\n      .finally(() => {\n        beaconAlertWrapperObserver.finalize();\n      });\n  }\n\n  protected getPaymentProvider(rawPaymentInfo: RawPaymentInfo): PaymentProvider {\n    const paymentProvider = this.paymentProviders.find(paymentProvider => paymentProvider.isMatch(rawPaymentInfo));\n    if (!paymentProvider)\n      throw new Error(rawPaymentInfo.operationType === 'payment' ? errors.invalidPayment : errors.invalidDonation);\n\n    return paymentProvider;\n  }\n\n  private waitConfirmation(operation: WalletOperation, confirmations?: number) {\n    // TODO: use a service event instead of dispatching\n    this.store.dispatch(confirmPayment({\n      hash: operation.opHash,\n      blockHash: undefined,\n      confirmationCount: 0\n    }));\n\n    return new Promise<void>((resolve, reject) => {\n      operation.confirmationObservable(confirmations)\n        .subscribe(\n          // TODO: use a service event instead of dispatching\n          confirmation => this.store.dispatch(confirmPayment({\n            hash: operation.opHash,\n            blockHash: confirmation.block.hash,\n            confirmationCount: confirmation.currentConfirmation\n          })),\n          reject,\n          resolve\n        );\n    });\n  }\n\n  private getBeaconAlertWrapperObserver() {\n    let beaconAlertWrapperObserverIntervalId: ReturnType<typeof setInterval> | undefined;\n    let beaconAlertWrapperShadowRoot: ShadowRoot | null | undefined;\n    let alertModalElement: Element | null | undefined;\n    let closeButtonElement: Element | null | undefined;\n    let onBeaconAlertWrapperClosedHandler: ((event: Event) => void) | undefined;\n\n    return {\n      observe: () => new Promise<boolean>(resolve => {\n        beaconAlertWrapperObserverIntervalId = setInterval(() => {\n          beaconAlertWrapperShadowRoot = document.querySelector('[id^=\"beacon-alert-wrapper\"]')?.shadowRoot;\n          if (!beaconAlertWrapperShadowRoot)\n            return;\n\n          if (beaconAlertWrapperObserverIntervalId !== undefined) {\n            clearInterval(beaconAlertWrapperObserverIntervalId);\n            beaconAlertWrapperObserverIntervalId = undefined;\n          }\n\n          alertModalElement = beaconAlertWrapperShadowRoot.querySelector('[id^=\"beacon-alert-modal\"]');\n          closeButtonElement = beaconAlertWrapperShadowRoot.querySelector('.beacon-modal__close__wrapper');\n\n          onBeaconAlertWrapperClosedHandler = (event: Event) => {\n            if (event instanceof KeyboardEvent && event.key !== 'Escape')\n              return;\n\n            resolve(true);\n          };\n\n          window.addEventListener('keydown', onBeaconAlertWrapperClosedHandler);\n          alertModalElement?.addEventListener('click', onBeaconAlertWrapperClosedHandler);\n          closeButtonElement?.addEventListener('click', onBeaconAlertWrapperClosedHandler);\n        }, 100);\n      }),\n      finalize: () => {\n        beaconAlertWrapperObserverIntervalId && clearInterval(beaconAlertWrapperObserverIntervalId);\n\n        if (onBeaconAlertWrapperClosedHandler) {\n          window.removeEventListener('keydown', onBeaconAlertWrapperClosedHandler);\n          alertModalElement?.removeEventListener('click', onBeaconAlertWrapperClosedHandler);\n          closeButtonElement?.removeEventListener('click', onBeaconAlertWrapperClosedHandler);\n        }\n      }\n    } as const;\n  }\n}\n","import React from 'react';\n\nimport type { BlockchainUrlExplorer } from '@tezospayments/react-web-core';\n\nexport interface ReactAppContext {\n  readonly tezosExplorer: BlockchainUrlExplorer;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const ReactAppContext = React.createContext<ReactAppContext>({} as ReactAppContext);\n","import { useEffect } from 'react';\n\nexport const useViewTitle = (title: string) => {\n    useEffect(() => {\n        document.title = title;\n    }, [title]);\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { AppDispatch, AppState } from '../../store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\n\n","import { useContext } from 'react';\n\nimport { ReactAppContext } from '../../app';\n\nexport const useAppContext = () => useContext(ReactAppContext);\n","import { CopyOutlined } from '@ant-design/icons';\nimport React, { useCallback } from 'react';\n\nimport './CopyButton.scss';\n\ninterface CopyButtonProps {\n  copyText: string;\n}\n\nexport const CopyButton = (props: CopyButtonProps) => {\n  const handleClick = useCallback(() => {\n    navigator.clipboard.writeText(props.copyText);\n  }, [props.copyText]);\n\n  return <button className=\"copy-button\" onClick={handleClick}>\n    <CopyOutlined className=\"copy-button__icon\" />\n  </button>;\n};\n\nexport const CopyButtonPure = React.memo(CopyButton);\n","type ExternalLinkProps = Omit<JSX.IntrinsicElements['a'], 'target' | 'rel'>;\n\nexport const ExternalLink = (props: ExternalLinkProps) => <a {...props} target=\"_blank\" rel=\"noopener noreferrer\">\n  {props.children}\n</a>;\n","import React from 'react';\n\nimport { combineClassNames } from '@tezospayments/common';\n\nimport { CopyButtonPure } from './CopyButton';\nimport { ExternalLink } from './ExternalLink';\nimport './BlockchainLink.scss';\n\nexport enum BlockchainLinkOption {\n  OnlyLong = 1,\n  OnlyShort = 2,\n  ShortAndLong = 3\n}\n\ntype BlockchainLinkProps = Omit<React.ComponentProps<typeof ExternalLink>, 'children' | 'className'> &\n{\n  children: string;\n  option?: BlockchainLinkOption;\n  showCopyButton?: boolean;\n  className?: string;\n  longLinkClassName?: string;\n  shortLinkClassName?: string;\n};\n\ntype DefaultBlockchainLinkProps = Required<Pick<BlockchainLinkProps, 'option' | 'showCopyButton'>>;\n\nconst defaultProps: DefaultBlockchainLinkProps = {\n  option: BlockchainLinkOption.ShortAndLong,\n  showCopyButton: true\n};\n\nconst classNameBase = 'blockchain-link';\n\n// TODO: extract into the common utils.text\nconst getShortHash = (hash: string) => `${hash.substr(0, 9)}...${hash.substr(hash.length - 6, 6)}`;\n\nexport const BlockchainLink = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  children, option, showCopyButton, className: classNameProp, longLinkClassName: longLinkClassNameProp,\n  shortLinkClassName: shortLinkClassNameProp, ...externalLinkProps\n}: BlockchainLinkProps & DefaultBlockchainLinkProps) => {\n  const className = combineClassNames(\n    classNameBase,\n    classNameProp\n  );\n  const longLinkClassName = combineClassNames(\n    `${classNameBase}__link_length-full`,\n    longLinkClassNameProp\n  );\n  const shortLinkClassName = combineClassNames(\n    `${classNameBase}__link_length-short`,\n    shortLinkClassNameProp\n  );\n\n  return <div className={className}>\n    <ExternalLink {...externalLinkProps} className={longLinkClassName}>\n      {children}\n    </ExternalLink>\n    <ExternalLink {...externalLinkProps} className={shortLinkClassName}>\n      {getShortHash(children)}\n    </ExternalLink>\n    {showCopyButton && <CopyButtonPure copyText={children} />}\n  </div>;\n};\nBlockchainLink.defaultProps = defaultProps;\n\nexport const BlockchainLinkPure = React.memo(BlockchainLink);\n","import React from 'react';\n\nimport { config } from '../config';\nimport cssClasses from './Footer.module.scss';\nimport { ExternalLink } from './common';\n\nexport const Footer = () => {\n  return <footer>\n    <h6 className={cssClasses.label}>Powered by <ExternalLink href={config.links.tezosPayments.webSite}>Tezos Payments</ExternalLink></h6>\n\n    <span className={cssClasses.warning}>\n      All payments are made through smart contracts in\n      the <ExternalLink href={config.links.tezos}>Tezos network</ExternalLink>.\n      This means that they are fully decentralized and your funds go directly from your\n      account to the merchant's account without the participation of third parties, includes Tezos Payments.\n      Tezos Payments is just a UI <ExternalLink href={config.links.tezosPayments.gitHub}>(open-source)</ExternalLink> to\n      the smart contracts, and it can't operate and control payments, can't verify accounts.\n      Everybody can create their own service and accept payments, and also everybody can pay/donate to any service.\n      <br />\n      <span className={cssClasses['warning__highlight-message']}>So please be careful when paying.</span>\n    </span>\n  </footer>;\n};\n\nexport const FooterPure = React.memo(Footer);\n","import { Button } from 'antd';\nimport React, { useCallback } from 'react';\n\nimport { PaymentType } from '@tezospayments/common';\n\nimport { NetworkDonation, NetworkPayment, PaymentStatus } from '../models/payment';\nimport { donate, pay } from '../store/currentPayment';\nimport { useAppDispatch, useAppSelector } from './hooks';\nimport './PayButton.scss';\n\ninterface PayButtonProps {\n  networkPayment: NetworkPayment | NetworkDonation;\n  text: string;\n  disabled?: boolean;\n}\n\nexport const PayButton = ({ networkPayment, text, disabled }: PayButtonProps) => {\n  const currentPaymentStatus = useAppSelector(state => state.currentPaymentState && state.currentPaymentState.status);\n  const dispatch = useAppDispatch();\n\n  const handleButtonClick = useCallback(\n    () => {\n      if (networkPayment.type === PaymentType.Payment)\n        dispatch(pay(networkPayment));\n      else if (networkPayment.type === PaymentType.Donation)\n        dispatch(donate(networkPayment));\n    },\n    [dispatch, networkPayment]\n  );\n\n  return <Button\n    className=\"pay-button\"\n    type=\"primary\"\n    size=\"large\"\n    onClick={handleButtonClick}\n    disabled={disabled}\n    loading={currentPaymentStatus === PaymentStatus.UserProcessing || currentPaymentStatus === PaymentStatus.NetworkProcessing}>\n    {text}\n  </Button>;\n};\n\nexport const PayButtonPure = React.memo(PayButton);\n","import { combineClassNames, text } from '@tezospayments/common';\nimport './ServiceIcon.scss';\n\ntype ServiceIconProps = {\n  serviceName: string;\n  className?: string;\n  iconUrl?: string;\n};\n\nexport const ServiceIcon = (props: ServiceIconProps) => {\n  const className = combineClassNames(\n    'service-icon',\n    props.iconUrl ? 'service-icon_type-image' : 'service-icon_type-text',\n    props.className\n  );\n\n  return props.iconUrl ? <img className={className} src={props.iconUrl} alt=\"Service\" draggable=\"false\" />\n    : <span className={className}>{text.getAvatarText(props.serviceName)}</span>;\n};\n","var _g;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgTelegram(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"1000px\",\n    height: \"1000px\",\n    viewBox: \"0 0 1000 1000\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Artboard\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Oval\",\n    fill: \"currentColor\",\n    cx: 500,\n    cy: 500,\n    r: 500\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M226.328419,494.722069 C372.088573,431.216685 469.284839,389.350049 517.917216,369.122161 C656.772535,311.36743 685.625481,301.334815 704.431427,301.003532 C708.567621,300.93067 717.815839,301.955743 723.806446,306.816707 C728.864797,310.92121 730.256552,316.46581 730.922551,320.357329 C731.588551,324.248848 732.417879,333.113828 731.758626,340.040666 C724.234007,419.102486 691.675104,610.964674 675.110982,699.515267 C668.10208,736.984342 654.301336,749.547532 640.940618,750.777006 C611.904684,753.448938 589.856115,731.588035 561.733393,713.153237 C517.726886,684.306416 492.866009,666.349181 450.150074,638.200013 C400.78442,605.66878 432.786119,587.789048 460.919462,558.568563 C468.282091,550.921423 596.21508,434.556479 598.691227,424.000355 C599.00091,422.680135 599.288312,417.758981 596.36474,415.160431 C593.441168,412.561881 589.126229,413.450484 586.012448,414.157198 C581.598758,415.158943 511.297793,461.625274 375.109553,553.556189 C355.154858,567.258623 337.080515,573.934908 320.886524,573.585046 C303.033948,573.199351 268.692754,563.490928 243.163606,555.192408 C211.851067,545.013936 186.964484,539.632504 189.131547,522.346309 C190.260287,513.342589 202.659244,504.134509 226.328419,494.722069 Z\",\n    id: \"Path-3\",\n    fill: \"#FFFFFF\"\n  }))));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTelegram);\nexport default __webpack_public_path__ + \"static/media/telegram.fee81c94.svg\";\nexport { ForwardRef as ReactComponent };","import {\n  LinkOutlined, FacebookOutlined, TwitterOutlined, InstagramOutlined,\n  GithubOutlined, MailOutlined, RedditOutlined\n} from '@ant-design/icons';\nimport React from 'react';\n\nimport { IconId, ServiceLinkHelper } from '@tezospayments/common';\n\nimport { TelegramIcon } from '../../assets/icons';\nimport { ExternalLink } from '../common';\nimport './ServiceLink.scss';\n\ninterface ServiceLinkProps {\n  link: string;\n}\n\nconst serviceLinkHelper = new ServiceLinkHelper();\n\nconst iconIdMap = {\n  [IconId.Common]: LinkOutlined,\n  [IconId.Email]: MailOutlined,\n  [IconId.Telegram]: TelegramIcon,\n  [IconId.Facebook]: FacebookOutlined,\n  [IconId.Twitter]: TwitterOutlined,\n  [IconId.Instagram]: InstagramOutlined,\n  [IconId.GitHub]: GithubOutlined,\n  [IconId.Reddit]: RedditOutlined,\n};\n\nexport const ServiceLink = (props: ServiceLinkProps) => {\n  const linkInfo = serviceLinkHelper.getLinkInfo(props.link);\n  if (!linkInfo)\n    return null;\n\n  const Icon = iconIdMap[linkInfo.icon];\n\n  return <span className=\"service-link\">\n    <Icon className=\"service-link__icon\" />\n    <ExternalLink className=\"service-link__link\" href={linkInfo.formattedLink}>{linkInfo.displayLink}</ExternalLink>\n  </span>;\n};\n\nexport const ServiceLinkPure = React.memo(ServiceLink);\n","import { combineClassNames } from '@tezospayments/common';\n\nimport { ServiceLink } from './ServiceLink';\nimport './ServiceLinks.scss';\n\ninterface ServiceLinksProps {\n  className?: string;\n  links: readonly string[];\n}\n\nexport const ServiceLinks = (props: ServiceLinksProps) => {\n  return <div className={combineClassNames('service-links', props.className)}>\n    {props.links.map(link => <ServiceLink link={link} key={link} />).filter(Boolean)}\n  </div>;\n};\n","import React from 'react';\n\nimport { Service } from '@tezospayments/common';\n\nimport { BlockchainLinkPure } from '../common';\nimport { useAppContext } from '../hooks';\nimport { ServiceIcon } from './ServiceIcon';\nimport { ServiceLinks } from './ServiceLinks';\nimport './ServiceInfo.scss';\n\ninterface ServiceInfoProps {\n  service: Service;\n  showDescription?: boolean;\n}\n\ntype DefaultServiceInfoProps = Required<Pick<ServiceInfoProps, 'showDescription'>>;\n\nconst defaultProps: DefaultServiceInfoProps = {\n  showDescription: true\n};\n\nexport const ServiceInfo = (props: ServiceInfoProps & DefaultServiceInfoProps) => {\n  const appContext = useAppContext();\n  const contractUrl = appContext.tezosExplorer.getAccountUrl(props.service.contractAddress);\n\n  return <div className=\"service-info\">\n    <ServiceIcon className=\"service-info__icon\" iconUrl={props.service.iconUrl} serviceName={props.service.name} />\n    <h2 className=\"service-info__name\">{props.service.name}</h2>\n    <div className=\"service-info__contract contract-address\">\n      <span className=\"contract-address__label\">Contract Address</span>\n      <BlockchainLinkPure className=\"contract-address__value\" href={contractUrl}>\n        {props.service.contractAddress}\n      </BlockchainLinkPure>\n    </div>\n    {props.showDescription && !!props.service.description && <div className=\"service-info__description\">\n      {props.service.description}\n    </div>}\n    <ServiceLinks className=\"service-info__links\" links={props.service.links} />\n  </div>;\n};\nServiceInfo.defaultProps = defaultProps;\n\nexport const ServiceInfoPure = React.memo(ServiceInfo);\n","import React from 'react';\n\nimport { combineClassNames } from '@tezospayments/common';\n\ninterface ViewSideProps {\n    isRight: boolean;\n    className?: string;\n    children?: React.ReactNode;\n    as?: keyof React.ReactHTML;\n}\n\ntype DefaultViewSideProps = Required<Pick<ViewSideProps, 'as'>>;\n\nexport const defaultProps: DefaultViewSideProps = {\n    as: 'div'\n};\n\nconst viewSideClassName = 'view__side';\nexport const ViewSide = (props: ViewSideProps & DefaultViewSideProps) => {\n    const className = combineClassNames(\n        props.className,\n        viewSideClassName,\n        (props.isRight ? `${viewSideClassName}_right` : `${viewSideClassName}_left`)\n    );\n\n    return React.createElement(props.as, { className }, props.children);\n};\nViewSide.defaultProps = defaultProps;\n","import React from 'react';\n\nimport { combineClassNames } from '@tezospayments/common';\n\nimport { config } from '../../../config';\nimport { useViewTitle } from '../../hooks';\nimport { ViewSide } from './ViewSide';\nimport './View.scss';\n\ninterface ViewProps {\n  className?: string;\n  title?: string;\n  children?: React.ReactNode;\n  as?: keyof React.ReactHTML;\n}\n\ntype DefaultViewProps = Required<Pick<ViewProps, 'as'>>;\n\nconst defaultProps: DefaultViewProps = {\n  as: 'main'\n};\n\nexport const View = (props: ViewProps & DefaultViewProps) => {\n  useViewTitle(props.title ? `${props.title} | ${config.app.title}` : config.app.title);\n  const className = combineClassNames('view', props.className);\n\n  return React.createElement(props.as, { className }, props.children);\n};\n\nView.defaultProps = defaultProps;\nView.Side = ViewSide;\n","import { CopyButtonPure } from '../../../common';\nimport './PaymentField.scss';\n\ninterface PaymentFieldProps {\n  fieldName: string;\n  fieldValue: string | number;\n  copyButtonEnabled: boolean;\n}\n\ntype DefaultPaymentFieldProps = Required<Pick<PaymentFieldProps, 'copyButtonEnabled'>>;\n\nexport const defaultProps: DefaultPaymentFieldProps = {\n  copyButtonEnabled: false\n};\n\nexport const PaymentField = (props: PaymentFieldProps) => {\n  return <tr className=\"payment-field\">\n    <td className=\"payment-field__label\">{props.fieldName}</td>\n    <td>\n      <span className=\"payment-field__value\">{props.fieldValue}</span>\n      {props.copyButtonEnabled && <CopyButtonPure copyText={props.fieldValue.toString()} />}\n    </td>\n  </tr>;\n};\nPaymentField.defaultProps = defaultProps;\n","import { useMemo } from 'react';\n\nimport { Payment } from '@tezospayments/common';\n\nimport { PaymentField } from './PaymentField';\nimport './PaymentDetails.scss';\n\ninterface PaymentDetailsProps {\n  readonly paymentId: string;\n  readonly paymentData: Payment['data'];\n}\n\nexport const PaymentDetails = (props: PaymentDetailsProps) => {\n  const paymentDataFields = useMemo(() => props.paymentData && Object.keys(props.paymentData)\n    .map(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const value: any = props.paymentData?.[name];\n      return (value !== undefined && typeof value !== 'object')\n        ? { name, value }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        : null!;\n    })\n    .filter(Boolean),\n    [props.paymentData]\n  );\n\n  return <div className=\"payment-details\">\n    {<>\n      <h2 className=\"payment-details__title\">Payment Data</h2>\n      <table className=\"payment-details__fields\">\n        <tbody>\n          <PaymentField fieldName=\"Payment ID\" fieldValue={props.paymentId} copyButtonEnabled={true} />\n          {paymentDataFields && paymentDataFields.map(paymentDataField =>\n            <PaymentField\n              key={paymentDataField.name}\n              fieldName={paymentDataField.name}\n              fieldValue={paymentDataField.value.toString()}\n              copyButtonEnabled={false}\n            />\n          )}\n        </tbody>\n      </table>\n    </>}\n  </div>;\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { optimization, Token, tokenWhitelistMap } from '@tezospayments/common';\n\nimport type { AppState } from '../index';\n\nexport const selectPaymentState = (state: AppState) => state.currentPaymentState;\n\nexport const selectTokensState = createSelector(\n  selectPaymentState,\n  paymentState => {\n    const network = paymentState?.service?.network;\n    return (network && tokenWhitelistMap.get(network)) || optimization.emptyMap as Map<string, Token>;\n  }\n);\n","import { BigNumber } from 'bignumber.js';\nimport { useSelector } from 'react-redux';\n\nimport { Network, tezosMeta, unknownAssetMeta, } from '@tezospayments/common';\n\nimport './TotalAmount.scss';\n\nimport { selectTokensState } from '../../../store/currentPayment/selectors';\n\ninterface TotalAmountProps {\n  assetAddress: string | undefined;\n  network: Network;\n  value: BigNumber;\n}\n\nexport const TotalAmount = (props: TotalAmountProps) => {\n  const tokens = useSelector(selectTokensState);\n  const asset = props.assetAddress && tokens.get(props.assetAddress);\n\n  const { thumbnailUri, name, symbol } = asset ? (asset.metadata || unknownAssetMeta) : tezosMeta;\n\n  return <div className=\"total-amount\">\n    <img className=\"total-amount__currency-icon\" src={thumbnailUri} alt=\"Currency\" draggable=\"false\" />\n    <h1 className=\"total-amount__value\">{props.value.toFormat()}</h1>\n    <div className=\"total-amount__currency\">\n      <span className=\"total-amount__currency-name\">{name}</span>\n      <span className=\"total-amount__ticker\">{symbol}</span>\n    </div>\n  </div>;\n};\n","\nimport React from 'react';\n\nimport { Payment as PaymentModel, Service } from '@tezospayments/common';\n\nimport { NetworkPayment } from '../../../models/payment';\nimport { FooterPure } from '../../Footer';\nimport { PayButtonPure } from '../../PayButton';\nimport { ServiceInfoPure } from '../../ServiceInfo';\nimport { View } from '../View';\nimport { PaymentDetails } from './PaymentDetails';\nimport { TotalAmount } from './TotalAmount';\n\ninterface PaymentProps {\n  payment: PaymentModel;\n  service: Service;\n}\n\nexport const Payment = (props: PaymentProps) => {\n  const networkPayment: NetworkPayment = {\n    type: props.payment.type,\n    targetAddress: props.payment.targetAddress,\n    id: props.payment.id,\n    amount: props.payment.amount,\n    asset: props.payment.asset,\n    signature: props.payment.signature.contract\n  };\n\n  return <View className=\"payment-view\">\n    <View.Side isRight={false}>\n      <PaymentDetails paymentId={props.payment.id} paymentData={props.payment.data} />\n      <ServiceInfoPure service={props.service} showDescription={false} />\n    </View.Side>\n    <View.Side isRight={true}>\n      <TotalAmount value={props.payment.amount} assetAddress={props.payment.asset?.address}\n        network={props.service.network} />\n      <PayButtonPure networkPayment={networkPayment} text=\"Pay\" />\n      <FooterPure />\n    </View.Side>\n  </View>;\n};\n\nexport const PaymentPure = React.memo(Payment);\n","import { DownOutlined } from '@ant-design/icons';\nimport { Button, Dropdown, InputNumber, Menu } from 'antd';\nimport { BigNumber } from 'bignumber.js';\nimport { useCallback, useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Service, tezosMeta, Token } from '@tezospayments/common';\n\nimport './DonationAmount.scss';\n\nimport { selectTokensState } from '../../../store/currentPayment/selectors';\n\ninterface DonationAmountProps {\n  service: Service;\n  amount?: BigNumber;\n  onAmountChange: (rawValue: string) => void;\n  asset: string | undefined;\n  onAssetChange: (asset: string) => void;\n}\n\nexport const DonationAmount = (props: DonationAmountProps) => {\n  const inputAmountRef = useRef<HTMLInputElement>(null);\n  const handleCurrencyIconClick = useCallback(() => inputAmountRef.current?.focus(), []);\n  const tokens = useSelector(selectTokensState);\n\n  const allowedTokens: Token[] = [];\n  props.service.allowedTokens.assets.forEach(a => {\n    const token = tokens.get(a);\n    if (token) {\n      allowedTokens.push(token);\n    }\n  });\n\n  const assets: Array<{ ticker: string; name: string; value: string; imageUrl: string }> = [];\n  if (props.service.allowedTokens.tez) {\n    assets.push({ value: '', ticker: tezosMeta.symbol, name: tezosMeta.name, imageUrl: tezosMeta.thumbnailUri });\n  }\n  allowedTokens.forEach(t => t.metadata && assets.push({ value: t.contractAddress, ticker: t.metadata.symbol, name: t.metadata.name, imageUrl: t.metadata.thumbnailUri }));\n\n  const menu = <Menu>\n    {assets.map(a => <Menu.Item className=\"donation-amount-menu-item\" key={a.value} onClick={() => props.onAssetChange(a.value)}>\n      <img className=\"donation-amount-menu-item__icon\" src={a.imageUrl} alt={a.ticker} />\n      <span className=\"donation-amount-menu-item__ticker\">{a.ticker}</span>\n      <span className=\"donation-amount-menu-item__name\">{a.name}</span>\n    </Menu.Item >)}\n  </Menu>;\n\n  const selectedAsset = assets.filter(a => props.asset ? a.value === props.asset : a.value === '')[0];\n\n  return <div className=\"donation-amount\">\n    <img className=\"donation-amount__currency-icon\"\n      src={selectedAsset?.imageUrl}\n      alt=\"Currency\"\n      draggable=\"false\"\n      onClick={handleCurrencyIconClick}\n    />\n    <InputNumber className=\"donation-amount__input\"\n      stringMode\n      ref={inputAmountRef}\n      size=\"large\"\n      min=\"0\"\n      value={props.amount?.toString()}\n      onChange={props.onAmountChange}\n    />\n    <Dropdown trigger={['click']} overlay={menu} placement=\"bottomRight\">\n      <Button className=\"donation-amount__container\">\n        <div className=\"donation-amount__currency\">\n          <span className=\"donation-amount__currency-name\">{selectedAsset?.name}</span>\n          <span className=\"donation-amount__ticker\">{selectedAsset?.ticker}</span>\n        </div>\n        <DownOutlined />\n      </Button>\n    </Dropdown>\n  </div>;\n};\n","import BigNumber from 'bignumber.js';\nimport React, { useCallback, useState, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Donation as DonationModel, Service, tezosMeta } from '@tezospayments/common';\n\nimport { NetworkDonation } from '../../../models/payment';\nimport { selectTokensState } from '../../../store/currentPayment/selectors';\nimport { FooterPure } from '../../Footer';\nimport { PayButtonPure } from '../../PayButton';\nimport { ServiceInfoPure } from '../../ServiceInfo';\nimport { View } from '../View';\nimport { DonationAmount } from './DonationAmount';\n\ninterface DonationProps {\n  donation: DonationModel;\n  service: Service;\n}\n\nconst zeroAmount = new BigNumber(0);\nexport const Donation = (props: DonationProps) => {\n  const tokens = useSelector(selectTokensState);\n\n  const defaultAmount = useMemo(\n    () => props.donation.desiredAmount ? new BigNumber(props.donation.desiredAmount) : zeroAmount,\n    [props.donation.desiredAmount]\n  );\n\n  const [networkDonation, setNetworkDonation] = useState<NetworkDonation>({\n    type: props.donation.type,\n    assetAddress: props.service.allowedTokens.tez ? '' : props.service.allowedTokens.assets[0],\n    targetAddress: props.donation.targetAddress,\n    amount: defaultAmount\n  });\n\n  const decimals = networkDonation.assetAddress ? tokens.get(networkDonation.assetAddress)?.metadata?.decimals || 0 : tezosMeta.decimals;\n\n  const handleDonationAmountChange = useCallback((rawValue: string) => {\n    const amount = new BigNumber(new BigNumber(rawValue).toFormat(decimals, { groupSeparator: '', decimalSeparator: '.' }));\n    setNetworkDonation(previousNetworkDonation => ({\n      ...previousNetworkDonation,\n      amount: amount.isPositive() ? amount : zeroAmount\n    } as NetworkDonation));\n  }, [decimals]);\n\n  const handleAssetChange = useCallback((asset: string) => {\n    setNetworkDonation(previousNetworkDonation => ({\n      ...previousNetworkDonation,\n      assetAddress: asset || undefined,\n      amount: defaultAmount\n    } as NetworkDonation));\n  }, [defaultAmount]);\n\n  return <View className=\"donation-view\">\n    <View.Side isRight={false}>\n      <ServiceInfoPure service={props.service} />\n    </View.Side>\n    <View.Side isRight={true}>\n      <DonationAmount amount={networkDonation.amount} onAmountChange={handleDonationAmountChange}\n        asset={networkDonation.assetAddress} onAssetChange={handleAssetChange} service={props.service} />\n      <PayButtonPure networkPayment={networkDonation} text=\"Donate\" disabled={networkDonation.amount.isLessThanOrEqualTo(0)} />\n      <FooterPure />\n    </View.Side>\n  </View>;\n};\n\nexport const DonationPure = React.memo(Donation);\n","import { createAction, createReducer, isRejected } from '@reduxjs/toolkit';\n\nimport type { ApplicationError } from '../models/system';\n\nexport const handleError = createAction<Error>('handleError');\nexport const clearError = createAction('clearError');\n\nconst initialState = null as ApplicationError | null;\nexport const applicationErrorReducer = createReducer(\n  initialState,\n  builder => builder\n    .addCase(clearError, () => null)\n    .addMatcher(\n      isRejected,\n      (_state, action) => action.meta.rejectedWithValue\n        ? {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          message: action.payload && (action.payload as any).toString()\n        }\n        : {\n          message: action.error.message || 'Application Error',\n          source: action.error\n        }\n    )\n);\n\nexport const actions = {\n  handleError,\n  clearError\n};\n","import type { SerializedError } from '@reduxjs/toolkit';\n\nimport type { DeepReadonly } from '@tezospayments/common';\n\nexport interface RegisteredApplicationError {\n  readonly id: number;\n}\n\nexport interface UnknownApplicationError {\n  readonly message: string;\n  readonly source?: DeepReadonly<SerializedError>;\n}\n\nexport type ApplicationError =\n  | RegisteredApplicationError\n  | UnknownApplicationError;\n\nexport const isRegisteredApplicationError = (error: ApplicationError): error is RegisteredApplicationError =>\n  typeof (error as RegisteredApplicationError).id === 'number';\n","import { isRejected } from '@reduxjs/toolkit';\nimport { Button, Result } from 'antd';\nimport React, { useCallback } from 'react';\n\nimport { ApplicationError, isRegisteredApplicationError } from '../../../models/system';\nimport { clearError } from '../../../store/applicationError';\nimport { loadCurrentPayment } from '../../../store/currentPayment';\nimport { useAppDispatch } from '../../hooks';\n\ninterface ErrorProps {\n  error: ApplicationError;\n}\n\nexport const Error = (props: ErrorProps) => {\n  const description = isRegisteredApplicationError(props.error)\n    ? `Error: [${props.error.id}]`\n    : props.error.message;\n\n  const dispatch = useAppDispatch();\n  const handleButtonClick = useCallback(() => {\n    dispatch(loadCurrentPayment())\n      .then(payload => {\n        if (!isRejected(payload))\n          dispatch(clearError());\n      });\n  }, [dispatch]);\n\n  return <Result status=\"error\" title=\"Error\" subTitle={description} extra={\n    <Button onClick={handleButtonClick}>Try Again</Button>\n  } />;\n};\n\nexport const ErrorPure = React.memo(Error);\n","import { Result } from 'antd';\nimport React from 'react';\n\nimport { Network } from '@tezospayments/common';\n\nimport { BlockchainLinkPure } from '../../common';\nimport { useAppContext } from '../../hooks';\n\ninterface SuccessProps {\n  network: Network;\n  operationHash: string;\n}\n\nexport const Success = (props: SuccessProps) => {\n  const appContext = useAppContext();\n  const operationUrl = appContext.tezosExplorer.getOperationUrl(props.operationHash);\n\n  return <Result\n    status=\"success\"\n    title=\"Operation Successful\"\n    subTitle={<BlockchainLinkPure href={operationUrl}>{props.operationHash}</BlockchainLinkPure>}\n  />;\n};\n\nexport const SuccessPure = React.memo(Success);\n","import { Result, Spin } from 'antd';\nimport React from 'react';\n\nimport { Network } from '@tezospayments/common';\n\nimport { BlockchainLinkPure } from '../../common';\nimport { useAppContext } from '../../hooks';\n\ninterface ConfirmationProps {\n  network: Network;\n  operationHash: string;\n}\n\nexport const Confirmation = (props: ConfirmationProps) => {\n  const appContext = useAppContext();\n  const operationUrl = appContext.tezosExplorer.getOperationUrl(props.operationHash);\n\n  return <Result\n    title=\"Confirmation\"\n    icon={<Spin size=\"large\" />}\n    subTitle={<BlockchainLinkPure href={operationUrl}>{props.operationHash}</BlockchainLinkPure>}\n  />;\n};\n\nexport const ConfirmationPure = React.memo(Confirmation);\n","import { Spin } from 'antd';\nimport React, { useEffect } from 'react';\n\nimport { PaymentType } from '@tezospayments/common';\n\nimport { PaymentStatus } from '../models/payment';\nimport { loadCurrentPayment } from '../store/currentPayment';\nimport { useAppDispatch, useAppSelector } from './hooks';\nimport { ConfirmationPure, DonationPure, ErrorPure, PaymentPure, SuccessPure } from './views';\n\nimport './App.scss';\n\nexport const App = () => {\n  const payment = useAppSelector(state => state.currentPaymentState?.payment);\n  const service = useAppSelector(state => state.currentPaymentState?.service);\n  const operationHash = useAppSelector(state => state.currentPaymentState?.operation?.hash);\n  const paymentStatus = useAppSelector(state => state.currentPaymentState && state.currentPaymentState?.status);\n  const error = useAppSelector(state => state.applicationError);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(loadCurrentPayment());\n  }, [dispatch]);\n\n  return error\n    ? <ErrorPure error={error} />\n    : (payment && service && paymentStatus !== null)\n      ? <>\n        {paymentStatus !== PaymentStatus.Succeeded && paymentStatus !== PaymentStatus.NetworkProcessing && (\n          payment.type === PaymentType.Payment\n            ? <PaymentPure payment={payment} service={service} />\n            : <DonationPure donation={payment} service={service} />\n        )}\n        {operationHash && paymentStatus === PaymentStatus.NetworkProcessing && <ConfirmationPure operationHash={operationHash}\n          network={service.network}\n        />}\n        {operationHash && paymentStatus === PaymentStatus.Succeeded && <SuccessPure operationHash={operationHash}\n          network={service.network}\n        />}\n      </>\n      : <Spin size=\"large\" />;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, EnhancedStore } from '@reduxjs/toolkit';\n\nimport { applicationErrorReducer } from './applicationError';\nimport { currentPaymentSlice } from './currentPayment';\nimport { AppThunkDispatch } from './thunk';\n\nexport const appReducer = combineReducers({\n  currentPaymentState: currentPaymentSlice.reducer,\n  applicationError: applicationErrorReducer\n});\n\nexport type AppState = ReturnType<typeof appReducer>;\nexport type AppStore = EnhancedStore<AppState>;\nexport type AppDispatch = AppThunkDispatch & AppStore['dispatch'];\n","import { configureStore, isPlain } from '@reduxjs/toolkit';\nimport { BigNumber } from 'bignumber.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport { Provider } from 'react-redux';\n\nimport { ReactAppContext, WebApp } from './app';\nimport { App as AppComponent } from './components/App';\nimport { AppConfig, config } from './config';\nimport reportWebVitals from './reportWebVitals';\nimport { appReducer } from './store';\nimport './index.scss';\n\nconst app = new WebApp(app => configureStore({\n  reducer: appReducer,\n  devTools: {\n    serialize: true\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      thunk: {\n        extraArgument: app,\n      },\n      serializableCheck: {\n        isSerializable: (value: unknown) => isPlain(value)\n          || value instanceof Map\n          || value instanceof Set\n          || BigNumber.isBigNumber(value)\n          || value instanceof Date,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        getEntries: (value: any) => value instanceof Map || value instanceof Set\n          ? [...value.entries()]\n          : Object.entries(value)\n      }\n    })\n}));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={app.store}>\n      <ReactAppContext.Provider value={app.reactAppContext}>\n        <AppComponent />\n      </ReactAppContext.Provider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n(window as unknown as { config: AppConfig }).config = config;\n\nreportWebVitals();\n","import { ColorMode } from '@airgap/beacon-sdk';\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit } from '@taquito/taquito';\n\nimport { Network, networks } from '@tezospayments/common';\nimport {\n  BetterCallDevBlockchainUrlExplorer, BetterCallDevDataProvider, BlockchainUrlExplorer,\n  ServicesProvider, TzKTBlockchainUrlExplorer, TzKTDataProvider, TzStatsBlockchainUrlExplorer\n} from '@tezospayments/react-web-core';\n\nimport { config } from '../config';\nimport { LocalPaymentService } from '../services/localPaymentService';\nimport { AppStore } from '../store';\nimport { ReactAppContext } from './reactAppContext';\n\ninterface AppServices {\n  readonly localPaymentService: LocalPaymentService;\n}\n\nexport class WebApp {\n  readonly store: AppStore;\n  readonly reactAppContext: ReactAppContext;\n  readonly network: Network;\n  readonly services: AppServices;\n  readonly tezosToolkit: TezosToolkit;\n  readonly tezosWallet = new BeaconWallet({ name: config.app.name, colorMode: ColorMode.LIGHT });\n\n  constructor(storeFactory: (app: WebApp) => AppStore) {\n    this.store = storeFactory(this);\n    this.network = this.detectNetwork();\n\n    const networkConfig = config.tezos.networks[this.network.name];\n    this.tezosToolkit = new TezosToolkit(networkConfig.rpcUrls[networkConfig.default.rpc]);\n    this.tezosToolkit.setWalletProvider(this.tezosWallet);\n\n    this.services = this.createServices();\n    this.reactAppContext = this.createReactAppContext();\n  }\n\n  private detectNetwork(): Network {\n    const networkName = new URLSearchParams(window.location.search).get('network');\n\n    return (networkName && networks[networkName as keyof typeof networks]) || networks[config.tezos.defaultNetwork];\n  }\n\n  protected createReactAppContext(): ReactAppContext {\n    return {\n      tezosExplorer: this.createTezosBlockchainUrlExplorer(this.network)\n    };\n  }\n\n  private createServices(): AppServices {\n    const servicesProvider = this.createServicesProvider(this.network);\n\n    return {\n      localPaymentService: new LocalPaymentService({\n        network: this.network,\n        store: this.store,\n        tezosToolkit: this.tezosToolkit,\n        tezosWallet: this.tezosWallet,\n        servicesProvider\n      })\n    };\n  }\n\n  private createServicesProvider(network: Network): ServicesProvider {\n    const networkConfig = config.tezos.networks[network.name];\n    const indexerName = networkConfig.default.indexer;\n\n    switch (indexerName) {\n      case 'tzKT':\n        return new TzKTDataProvider(network, networkConfig.indexerUrls.tzKT, networkConfig.servicesFactoryContractAddress, networkConfig.minimumSupportedServiceVersion);\n      case 'betterCallDev':\n        return new BetterCallDevDataProvider(network, networkConfig.indexerUrls.betterCallDev, networkConfig.servicesFactoryContractAddress, networkConfig.minimumSupportedServiceVersion);\n      default:\n        throw new Error('Unknown service provider');\n    }\n  }\n\n  private createTezosBlockchainUrlExplorer(network: Network): BlockchainUrlExplorer {\n    const networkConfig = config.tezos.networks[network.name];\n    const explorerName = networkConfig.default.explorer;\n\n    switch (explorerName) {\n      case 'tzKT':\n        return new TzKTBlockchainUrlExplorer(network, networkConfig.explorers.tzKT.baseUrl);\n      case 'tzStats':\n        return new TzStatsBlockchainUrlExplorer(network, networkConfig.explorers.tzStats.baseUrl);\n      case 'betterCallDev':\n        return new BetterCallDevBlockchainUrlExplorer(network, networkConfig.explorers.betterCallDev.baseUrl);\n      default:\n        throw new Error('Unknown blockchain explorer');\n    }\n  }\n}\n"],"sourceRoot":""}